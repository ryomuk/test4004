 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 1 - 2023/02/24 22:59:16


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with calculator program for Intel 4004 evaluation board
       3/       0 :                     ;;; by Ryo Mukai
       4/       0 :                     ;;; 2023/02/23
       5/       0 :                     ;;;---------------------------------------------------------------------------
       6/       0 :                     
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     ;;; This source can be assembled with the Macroassembler AS
       9/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      10/       0 :                     ;;;---------------------------------------------------------------------------
      11/       0 :                     ;;; Conditional jumps syntax for Macroassembler AS:
      12/       0 :                     ;;; JCN T     jump if TEST = 0 - most positive voltage or +5V
      13/       0 :                     ;;; JCN TN    jump if TEST = 1 - most negative voltage or -10V
      14/       0 :                     ;;; JCN C     jump if carry = 1
      15/       0 :                     ;;; JCN CN    jump if carry = 0
      16/       0 :                     ;;; JCN Z     jump if accumulator = 0
      17/       0 :                     ;;; JCN ZN    jump if accumulator != 0
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     
      20/       0 :                     	cpu 4004        ; AS's command to specify CPU
      21/       0 :                     
      22/       0 :                     ;;;---------------------------------------------------------------------------
      23/       0 :                     ;;; function for label to address for FIM&FIN
      24/       0 :                     ;;;---------------------------------------------------------------------------
      25/       0 :                     
      26/       0 :                     lo     	function x, ((x)&255)
      27/       0 :                     
      28/       0 :                     ;;;---------------------------------------------------------------------------
      29/       0 :                     ;;; functuon for setting counter for ISZ loop
      30/       0 :                     ;;;---------------------------------------------------------------------------
      31/       0 :                     
      32/       0 :                     loop 	function x, (16-(x))
      33/       0 :                     loops   function x,y, ((16-(x))<<4 + (16-(y)))
      34/       0 :                     
      35/       0 :                     ;;;---------------------------------------------------------------------------
      36/       0 :                     ;;; Alias for Registers and Register Pairs
      37/       0 :                     ;;;---------------------------------------------------------------------------
      38/       0 :                     
      39/       0 :                     ;;; Registers
      40/       0 : =R10                 R10	reg RA
      41/       0 : =R11                 R11     reg RB
      42/       0 : =R12                 R12     reg RC
      43/       0 : =R13                 R13 	reg RD
      44/       0 : =R14                 R14     reg RE
      45/       0 : =R15                 R15     reg RF
      46/       0 :                     
      47/       0 :                     ;;; Register Pairs
      48/       0 : =R0P                 P0      reg R0R1
      49/       0 : =R1P                 P1      reg R2R3
      50/       0 : =R2P                 P2      reg R4R5
      51/       0 : =R3P                 P3      reg R6R7
      52/       0 : =R4P                 P4      reg R8R9
      53/       0 : =R5P                 P5      reg RARB
      54/       0 : =R6P                 P6      reg RCRD
      55/       0 : =R7P                 P7      reg RERF
      56/       0 : =R5P                 R10R11  reg RARB
      57/       0 : =R6P                 R12R13  reg RCRD
      58/       0 : =R7P                 R14R15  reg RERF
      59/       0 :                     
      60/       0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 2 - 2023/02/24 22:59:16


      61/       0 :                     ;;; Hardware Configuration
      62/       0 :                     ;;;---------------------------------------------------------------------------
      63/       0 :                     
      64/       0 :                     ;;; BANK# for DCL
      65/       0 : =0H                  BANK_RAM0	equ 0
      66/       0 : =0H                  BANK_RAM1      	equ 0
      67/       0 : =1H                  BANK_RAM2      	equ 1
      68/       0 : =1H                  BANK_RAM3      	equ 1
      69/       0 :                     
      70/       0 :                     ;;; CHIP#=(D7.D6.000000)
      71/       0 : =0H                  CHIP_RAM0      	equ 00H
      72/       0 : =40H                 CHIP_RAM1      	equ 40H
      73/       0 : =0H                  CHIP_RAM2      	equ 00H
      74/       0 : =40H                 CHIP_RAM3      	equ 40H
      75/       0 :                     
      76/       0 :                     ;;; Serial Port (BANK# and CHIP#)
      77/       0 : =1H                  BANK_SERIAL     equ BANK_RAM3
      78/       0 : =40H                 CHIP_SERIAL     equ CHIP_RAM3
      79/       0 :                     
      80/       0 :                     ;;; Program Memory
      81/       0 : =0F00H               PM_TOP          equ 0F00H
      82/       0 : =0FFEH               PM_READ_P0_P1   equ 0FFEH
      83/       0 :                     
      84/       0 :                     ;;; Port for PM Bank Selection(BANK# and CHIP#)
      85/       0 : =0H                  BANK_PMSELECT     equ BANK_RAM0
      86/       0 : =0H                  CHIP_PMSELECT     equ CHIP_RAM0
      87/       0 :                     
      88/       0 :                     ;;; Default Bank
      89/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      90/       0 :                     		
      91/       0 :                     ;;;---------------------------------------------------------------------------
      92/       0 :                     ;;; Program Start
      93/       0 :                     ;;;---------------------------------------------------------------------------
      94/       0 :                     	org 0000H		; beginning of Program Memory
      95/       0 :                     
      96/       0 :                     MAIN:
      97/       0 : F0                          CLB
      98/       1 : 56 68               	JMS INIT_SERIAL ; Initialize Serial Port
      99/       3 :                     
     100/       3 : F0                  	CLB
     101/       4 : 50 BC               	JMS PM_SELECTBANK_ACC	 ; set bank of program memory 0
     102/       6 : 50 B0               	JMS PM_WRITE_READROUTINE ; write PM_READ code on program memory
     103/       8 :                     
     104/       8 :                     ;       JCN TN, $		wait for TEST="0" (button pressed)
     105/       8 : D2                          LDM 2
     106/       9 : 56 8F                       JMS BLINK_LED   ; blink LED 2 times
     107/       B : 20 33               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     108/       D : 57 00                       JMS PRINT_P0;
     109/       F : 20 0F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     110/      11 : 57 00                       JMS PRINT_P0;
     111/      13 :                     
     112/      13 :                     CMD_LOOP:
     113/      13 : 22 5D                       FIM P1, ']'		; prompt
     114/      15 : 56 28                       JMS PUTCHAR_P1
     115/      17 :                     
     116/      17 :                     L_CR:
     117/      17 : 56 00               	JMS GETCHAR_P1
     118/      19 : 56 7E                       JMS DISPLED_P1
     119/      1B : 20 0D               	FIM P0, '\r'
     120/      1D : 50 98               	JMS CMP_P0P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 3 - 2023/02/24 22:59:16


     121/      1F : 14 17               	JCN Z, L_CR		; skip CR
     122/      21 :                     
     123/      21 : 56 28               	JMS PUTCHAR_P1		; echo input
     124/      23 :                     
     125/      23 : 20 0A               	FIM P0, '\n'
     126/      25 : 50 98               	JMS CMP_P0P1
     127/      27 : 1C 2F               	JCN ZN, L0
     128/      29 : 22 0D               	FIM P1, '\r'
     129/      2B : 56 28               	JMS PUTCHAR_P1		; put CR
     130/      2D : 40 13               	JUN CMD_LOOP
     131/      2F :                     
     132/      2F :                     L0:
     133/      2F : 20 64               	FIM P0, 'd'		; dump data memory
     134/      31 : 50 98               	JMS CMP_P0P1
     135/      33 : 1C 39               	JCN ZN, L1
     136/      35 : 50 79               	JMS SETBANKCHIP_P5
     137/      37 : 41 00               	JUN COMMAND_D
     138/      39 :                     L1:
     139/      39 : 20 77               	FIM P0, 'w'		; write to data memory
     140/      3B : 50 98               	JMS CMP_P0P1
     141/      3D : 1C 43               	JCN ZN, L2
     142/      3F : 50 79               	JMS SETBANKCHIP_P5
     143/      41 : 41 2A               	JUN COMMAND_W
     144/      43 :                     L2:
     145/      43 : 20 44               	FIM P0, 'D'		; Dump program memory
     146/      45 : 50 98               	JMS CMP_P0P1
     147/      47 : 1C 4B               	JCN ZN, L3
     148/      49 : 41 AA               	JUN COMMAND_DP
     149/      4B :                     L3:
     150/      4B : 20 57               	FIM P0, 'W'		; Write Program memory
     151/      4D : 50 98               	JMS CMP_P0P1
     152/      4F : 1C 53               	JCN ZN, L4
     153/      51 : 41 6D               	JUN COMMAND_WP
     154/      53 :                     L4:
     155/      53 : 20 43               	FIM P0, 'C'		; Clear program memory
     156/      55 : 50 98               	JMS CMP_P0P1
     157/      57 : 1C 5B               	JCN ZN, L41
     158/      59 : 41 D5               	JUN COMMAND_CP
     159/      5B :                     L41:
     160/      5B : 20 42               	FIM P0, 'B'		; Set Bank of program memory
     161/      5D : 50 98               	JMS CMP_P0P1
     162/      5F : 1C 63               	JCN ZN, L5
     163/      61 : 41 E3               	JUN COMMAND_BP
     164/      63 :                     L5:
     165/      63 : 20 67               	FIM P0, 'g'		; Go to PM_TOP (0F00H)
     166/      65 : 50 98               	JMS CMP_P0P1
     167/      67 : 1C 6B               	JCN ZN, L6
     168/      69 : 41 F6               	JUN COMMAND_G
     169/      6B :                     L6:
     170/      6B : 20 63               	FIM P0, 'c'		; Calculator
     171/      6D : 50 98               	JMS CMP_P0P1
     172/      6F : 1C 73               	JCN ZN, L9
     173/      71 : 42 00               	JUN COMMAND_C
     174/      73 :                     L9:
     175/      73 : 20 65               	FIM P0, lo(STR_CMDERR)
     176/      75 : 57 00               	JMS PRINT_P0
     177/      77 : 40 13               	JUN CMD_LOOP
     178/      79 :                     
     179/      79 :                     ;;;---------------------------------------------------------------------------
     180/      79 :                     ;;; SETBANKCHIP_P5
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 4 - 2023/02/24 22:59:16


     181/      79 :                     ;;; Set #bank and #chip to R10 and R11
     182/      79 :                     ;;;---------------------------------------------------------------------------
     183/      79 :                     SETBANKCHIP_P5:
     184/      79 : 20 38               	FIM P0, lo(STR_BANK)	; print " BANK="
     185/      7B : 57 00               	JMS PRINT_P0
     186/      7D : 56 00               	JMS GETCHAR_P1
     187/      7F : 56 28               	JMS PUTCHAR_P1
     188/      81 : 56 72               	JMS CTOI_P1
     189/      83 : A3                  	LD R3
     190/      84 : BA                  	XCH R10			; save BANK to R10
     191/      85 :                     
     192/      85 : 20 3F               	FIM P0, lo(STR_CHIP)	; print " CHIP="
     193/      87 : 57 00               	JMS PRINT_P0
     194/      89 : 56 00               	JMS GETCHAR_P1
     195/      8B : 56 28               	JMS PUTCHAR_P1
     196/      8D : 56 72               	JMS CTOI_P1
     197/      8F : A3                  	LD R3
     198/      90 : F1                  	CLC
     199/      91 : F5                  	RAL
     200/      92 : F1                  	CLC
     201/      93 : F5                  	RAL
     202/      94 : BB                  	XCH R11 	;set D3D2.00@X2 to R11 (0000 or 0100 or 1000 or 1100)
     203/      95 : 56 57               	JMS PRINT_CRLF
     204/      97 : C0                  	BBL 0
     205/      98 :                     	
     206/      98 :                     ;;;---------------------------------------------------------------------------
     207/      98 :                     ;;; CMP_P0P1
     208/      98 :                     ;;; compare P0(R0R1) and P1(R2R3)
     209/      98 :                     ;;; input: P0, P1
     210/      98 :                     ;;; output: ACC=1,CY=0 if P0<P1
     211/      98 :                     ;;;         ACC=0,CY=1 if P0==P1 
     212/      98 :                     ;;;         ACC=1,CY=1 if P0>P1
     213/      98 :                     ;;; P0 - P1 (the carry bit is a complement of the borrow)
     214/      98 :                     ;;;---------------------------------------------------------------------------
     215/      98 :                     CMP_P0P1:
     216/      98 : F0                  	CLB
     217/      99 : A0                  	LD R0			
     218/      9A : 92                  	SUB R2			;R0-R2
     219/      9B : 14 A0               	JCN Z, CMP_L1
     220/      9D : 12 A9               	JCN C, CMP_EXIT11
     221/      9F : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     222/      A0 :                     CMP_L1:	
     223/      A0 : F0                  	CLB
     224/      A1 : A1                  	LD R1
     225/      A2 : 93                  	SUB R3			;R1-R3
     226/      A3 : 14 A8               	JCN Z, CMP_EXIT01
     227/      A5 : 12 A9               	JCN C, CMP_EXIT11
     228/      A7 : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     229/      A8 :                     CMP_EXIT01:
     230/      A8 : C0                  	BBL 0			;P0==P1, ACC=0, CY=1
     231/      A9 :                     CMP_EXIT11
     232/      A9 : C1                  	BBL 1			;P0>P1,  ACC=1, CY=1
     233/      AA :                     	
     234/      AA :                     ;;;---------------------------------------------------------------------------
     235/      AA :                     ;;; PM_WRITE_P0_P1
     236/      AA :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
     237/      AA :                     ;;; (0F00H+P0) = P1
     238/      AA :                     ;;; input: P0, P1
     239/      AA :                     ;;; output: none
     240/      AA :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 5 - 2023/02/24 22:59:16


     241/      AA :                     	
     242/      AA :                     PM_WRITE_P0_P1:
     243/      AA : 21                  	SRC P0
     244/      AB : A3                  	LD R3
     245/      AC : E3                  	WPM			; write lower 4bit
     246/      AD : A2                  	LD R2
     247/      AE : E3                  	WPM			; write higher 4bit
     248/      AF : C0                  	BBL 0
     249/      B0 :                     
     250/      B0 :                     ;;;---------------------------------------------------------------------------
     251/      B0 :                     ;;; PM_WRITE_READROUTINE
     252/      B0 :                     ;;; preparation for reading program memory
     253/      B0 :                     ;;;---------------------------------------------------------------------------
     254/      B0 :                     PM_WRITE_READROUTINE:	
     255/      B0 : 20 FE               	FIM P0, lo(PM_READ_P0_P1)
     256/      B2 : 22 32               	FIM P1, 32H		; FIN P1
     257/      B4 : 50 AA               	JMS PM_WRITE_P0_P1
     258/      B6 : 61                  	INC R1
     259/      B7 : 22 C0               	FIM P1, 0C0H		; BBL 0
     260/      B9 : 50 AA               	JMS PM_WRITE_P0_P1
     261/      BB : C0                  	BBL 0
     262/      BC :                     
     263/      BC :                     ;;;---------------------------------------------------------------------------
     264/      BC :                     ;;; PM_SELECTBANK_ACC
     265/      BC :                     ;;; Write ACC to RAM port (BANK_PMSELECT, CHIP_PMSELECT)
     266/      BC :                     ;;; to select a bank of program memory
     267/      BC :                     ;;; destroy: P7
     268/      BC :                     ;;;---------------------------------------------------------------------------
     269/      BC :                     PM_SELECTBANK_ACC:
     270/      BC :                     	;; XCH R15
     271/      BC :                     	;; LDM BANK_PMSELECT
     272/      BC :                     	;; DCL
     273/      BC :                     	;; XCH R15
     274/      BC :                     	
     275/      BC : 2E 00                       FIM P7, CHIP_PMSELECT
     276/      BE : 2F                          SRC P7
     277/      BF : E1                          WMP
     278/      C0 :                     	;; LDM BANK_DEFAULT
     279/      C0 :                     	;; DCL
     280/      C0 : C0                  	BBL 0
     281/      C1 :                     ;;;---------------------------------------------------------------------------
     282/      C1 :                     ;;; CMDC_SQUAREROOT:
     283/      C1 :                     ;;; X = sqrt(X)
     284/      C1 :                     ;;; registers Y, Z, T are destroyed
     285/      C1 :                     ;;; this routine cannot be a subroutine because of the limitation of stack
     286/      C1 :                     ;;;---------------------------------------------------------------------------
     287/      C1 :                     CMDC_SQUAREROOT:
     288/      C1 : 20 30               	FIM P0, REG_T
     289/      C3 : 54 C8               	JMS CLEAR_REGISTER_P0
     290/      C5 : DE                  	LDM 14
     291/      C6 : B1                  	XCH R1
     292/      C7 : 21                  	SRC P0
     293/      C8 : D5                  	LDM 5
     294/      C9 : E0                  	WRM			; REG_T=0.5
     295/      CA :                     	
     296/      CA : 2C 50               	FIM P6, REG_A		; A = X
     297/      CC : 2E 00               	FIM P7, REG_X
     298/      CE : 54 D4               	JMS LD_REGISTER_P6_P7
     299/      D0 :                     
     300/      D0 : 26 C0               	FIM P3, loops(4, 16)
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 6 - 2023/02/24 22:59:16


     301/      D2 :                     ; loop of "0.5 ENTER X ENTER A ENTER X / + *"
     302/      D2 :                     ; REG_T keeps 0.5 
     303/      D2 :                     CMDC_SQR_LOOP:	
     304/      D2 : 2C 20               	FIM P6, REG_Z		; Z = X
     305/      D4 : 2E 00               	FIM P7, REG_X
     306/      D6 : 54 D4               	JMS LD_REGISTER_P6_P7
     307/      D8 :                     
     308/      D8 : 2C 60               	FIM P6, REG_B		; B = X
     309/      DA : 54 D4               	JMS LD_REGISTER_P6_P7
     310/      DC :                     
     311/      DC : 2C 10               	FIM P6, REG_Y		; Y = A
     312/      DE : 2E 50               	FIM P7, REG_A
     313/      E0 : 54 D4               	JMS LD_REGISTER_P6_P7
     314/      E2 :                     
     315/      E2 : 54 FD               	JMS CMDC_DIV
     316/      E4 : 53 41               	JMS CMDC_ADD
     317/      E6 : 54 00               	JMS CMDC_MUL
     318/      E8 :                     
     319/      E8 : 20 00               	FIM P0, REG_X
     320/      EA : 55 92               	JMS PRINT_REGISTER_P0
     321/      EC : 56 60               	JMS PRINT_CR
     322/      EE :                     
     323/      EE : 2C 60               	FIM P6, REG_B
     324/      F0 : 2E 00               	FIM P7, REG_X
     325/      F2 : 53 B0               	JMS CMP_FRACTION_P6_P7
     326/      F4 : 14 FA               	JCN Z, CMDC_SQR_EXIT
     327/      F6 :                     	
     328/      F6 : 77 D2               	ISZ R7, CMDC_SQR_LOOP
     329/      F8 : 76 D2               	ISZ R6, CMDC_SQR_LOOP
     330/      FA :                     	
     331/      FA :                     CMDC_SQR_EXIT:
     332/      FA : 42 A5               	JUN CMDC_SQR_RETURN
     333/      FC :                     
     334/      FC :                     ;;;---------------------------------------------------------------------------
     335/      FC :                     ;;; Monitor commands located in page 0100H
     336/      FC :                     ;;;---------------------------------------------------------------------------
     337/     100 :                     	org 0100H
     338/     100 :                     ;;;---------------------------------------------------------------------------
     339/     100 :                     ;;; COMMAND_D
     340/     100 :                     ;;; Dump Data RAM
     341/     100 :                     ;;; input:
     342/     100 :                     ;;; 	R10: #bank
     343/     100 :                     ;;; 	R11: #chip (D3.D2.0.0)
     344/     100 :                     ;;; working memory:
     345/     100 :                     ;;;     P0(R0R1): working for PRINT_P0
     346/     100 :                     ;;;     P1(R2R3): working for PUTCHAR_P1, PRINT_ACC
     347/     100 :                     ;;;     R4: loop counter for #REG (0.0.D1.D0)
     348/     100 :                     ;;;     R5: working for input
     349/     100 :                     ;;;     R6: working for SCR (R6=R11+R4)
     350/     100 :                     ;;;     R7: working for SCR #CHARACTER (D3.D2.D1.D0)@X3 (loop counter)
     351/     100 :                     ;;;         SCR R6R7
     352/     100 :                     ;;; 	R11: #CHIP (D3.D2.0.0)@X2
     353/     100 :                     ;;;     P6(R12R13): working for uart
     354/     100 :                     ;;;     P7(R14R15): working for uart
     355/     100 :                     ;;;---------------------------------------------------------------------------
     356/     100 :                     COMMAND_D:
     357/     100 :                     	;; PRINT 4 registers
     358/     100 : DC                  	LDM loop(4)		; 4 regs
     359/     101 : B4                  	XCH R4			; R4=loop(4)
     360/     102 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 7 - 2023/02/24 22:59:16


     361/     102 :                     	;; PRINT 16 characters
     362/     102 :                     CMDD_L1:
     363/     102 : D0                  	LDM loop(16)		; 16 characters
     364/     103 : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     365/     104 :                     CMDD_L2:
     366/     104 : F0                  	CLB
     367/     105 : D4                  	LDM 4
     368/     106 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     369/     107 : F1                  	CLC
     370/     108 : 8B                  	ADD R11
     371/     109 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     372/     10A :                     	
     373/     10A : 27                  	SRC R6R7	; set address
     374/     10B : E9                  	RDM		; read data memory
     375/     10C : 56 4C               	JMS PRINT_ACC
     376/     10E : 77 04               	ISZ R7,CMDD_L2
     377/     110 :                     
     378/     110 :                     	;; PRINT STATUS 
     379/     110 : 22 3A               	FIM P1, ':'
     380/     112 : 56 28               	JMS PUTCHAR_P1
     381/     114 : 27                  	SRC R6R7	; set address
     382/     115 : EC                  	RD0
     383/     116 : 56 4C               	JMS PRINT_ACC
     384/     118 : 27                  	SRC R6R7	; set address
     385/     119 : ED                  	RD1
     386/     11A : 56 4C               	JMS PRINT_ACC
     387/     11C : 27                  	SRC R6R7	; set address
     388/     11D : EE                  	RD2
     389/     11E : 56 4C               	JMS PRINT_ACC
     390/     120 : 27                  	SRC R6R7	; set address
     391/     121 : EF                  	RD3
     392/     122 : 56 4C               	JMS PRINT_ACC
     393/     124 : 56 57               	JMS PRINT_CRLF
     394/     126 :                     
     395/     126 : 74 02               	ISZ R4,CMDD_L1
     396/     128 : 40 13               	JUN CMD_LOOP		; return to command loop
     397/     12A :                     	
     398/     12A :                     ;;;---------------------------------------------------------------------------
     399/     12A :                     ;;; COMMAND_W:
     400/     12A :                     ;;; Write Data RAM
     401/     12A :                     ;;; input:
     402/     12A :                     ;;; 	R10: #bank
     403/     12A :                     ;;; 	R11: #chip (D3.D2.0.0)
     404/     12A :                     ;;;---------------------------------------------------------------------------
     405/     12A :                     COMMAND_W:
     406/     12A :                     	;; PRINT 4 registers
     407/     12A : DC                  	LDM loop(4)		; 4 regs
     408/     12B : B4                  	XCH R4			; R4=loop(4)
     409/     12C :                     
     410/     12C :                     	;; PRINT 16 characters
     411/     12C :                     CMDW_L1:
     412/     12C : D0                  	LDM loop(16)		; 16 characters
     413/     12D : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     414/     12E :                     CMDW_L2:
     415/     12E : F0                  	CLB
     416/     12F : D4                  	LDM 4
     417/     130 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     418/     131 : F1                  	CLC
     419/     132 : 8B                  	ADD R11
     420/     133 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 8 - 2023/02/24 22:59:16


     421/     134 :                     
     422/     134 : 56 00               	JMS GETCHAR_P1
     423/     136 : 56 72               	JMS CTOI_P1
     424/     138 :                     
     425/     138 : 27                  	SRC R6R7	; set address
     426/     139 : A3                  	LD R3
     427/     13A : E0                  	WRM			; write to memory
     428/     13B : 56 4C               	JMS PRINT_ACC
     429/     13D : 77 2E               	ISZ R7,CMDW_L2
     430/     13F :                     
     431/     13F :                     	;; PRINT STATUS 
     432/     13F : 22 3A               	FIM P1, ':'
     433/     141 : 56 28               	JMS PUTCHAR_P1
     434/     143 :                     
     435/     143 : 56 00               	JMS GETCHAR_P1
     436/     145 : 56 72               	JMS CTOI_P1
     437/     147 :                     
     438/     147 : 27                  	SRC R6R7	; set address
     439/     148 : A3                  	LD R3
     440/     149 : E4                  	WR0
     441/     14A : 56 4C               	JMS PRINT_ACC
     442/     14C :                     
     443/     14C : 56 00               	JMS GETCHAR_P1
     444/     14E : 56 72               	JMS CTOI_P1
     445/     150 :                     
     446/     150 : 27                  	SRC R6R7	; set address
     447/     151 : A3                  	LD R3
     448/     152 : E5                  	WR1
     449/     153 : 56 4C               	JMS PRINT_ACC
     450/     155 :                     
     451/     155 : 56 00               	JMS GETCHAR_P1
     452/     157 : 56 72               	JMS CTOI_P1
     453/     159 :                     
     454/     159 : 27                  	SRC R6R7	; set address
     455/     15A : A3                  	LD R3
     456/     15B : E6                  	WR2
     457/     15C : 56 4C               	JMS PRINT_ACC
     458/     15E :                     
     459/     15E : 56 00               	JMS GETCHAR_P1
     460/     160 : 56 72               	JMS CTOI_P1
     461/     162 :                     
     462/     162 : 27                  	SRC R6R7	; set address
     463/     163 : A3                  	LD R3
     464/     164 : E7                  	WR3
     465/     165 : 56 4C               	JMS PRINT_ACC
     466/     167 : 56 57               	JMS PRINT_CRLF
     467/     169 :                     
     468/     169 : 74 2C               	ISZ R4,CMDW_L1
     469/     16B :                     	
     470/     16B : 40 13               	JUN CMD_LOOP		; return to command loop
     471/     16D :                     
     472/     16D :                     ;;;---------------------------------------------------------------------------
     473/     16D :                     ;;; COMMAND_WP
     474/     16D :                     ;;; Write Program Memory
     475/     16D :                     ;;;---------------------------------------------------------------------------
     476/     16D :                     COMMAND_WP:
     477/     16D : 20 46               	FIM P0, lo(STR_ADD)	; print " ADD="
     478/     16F : 57 00               	JMS PRINT_P0
     479/     171 : 56 00               	JMS GETCHAR_P1
     480/     173 : 56 28               	JMS PUTCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 9 - 2023/02/24 22:59:16


     481/     175 : 56 72               	JMS CTOI_P1
     482/     177 : A3                  	LD R3
     483/     178 : B5                  	XCH R5
     484/     179 : 56 57               	JMS PRINT_CRLF
     485/     17B :                     
     486/     17B : 22 46               	FIM P1,'F'
     487/     17D : 56 28               	JMS PUTCHAR_P1
     488/     17F : A5                  	LD R5
     489/     180 : 56 4C               	JMS PRINT_ACC
     490/     182 : 22 30               	FIM P1,'0'
     491/     184 : 56 28               	JMS PUTCHAR_P1
     492/     186 : 22 3A               	FIM P1,':'
     493/     188 : 56 28               	JMS PUTCHAR_P1
     494/     18A :                     	
     495/     18A : A5                  	LD R5
     496/     18B : B0                  	XCH R0
     497/     18C :                     
     498/     18C : D0                  	LDM 0
     499/     18D : B1                  	XCH R1
     500/     18E :                     CMDWP_L1:
     501/     18E : 22 20               	FIM P1, ' '
     502/     190 : 56 28               	JMS PUTCHAR_P1
     503/     192 :                     
     504/     192 : 56 00               	JMS GETCHAR_P1
     505/     194 : 56 28               	JMS PUTCHAR_P1
     506/     196 : 56 72               	JMS CTOI_P1
     507/     198 : A3                  	LD R3
     508/     199 : B4                  	XCH R4
     509/     19A :                     
     510/     19A : 56 00               	JMS GETCHAR_P1
     511/     19C : 56 28               	JMS PUTCHAR_P1
     512/     19E : 56 72               	JMS CTOI_P1
     513/     1A0 :                     
     514/     1A0 : A4                  	LD R4
     515/     1A1 : B2                  	XCH R2
     516/     1A2 :                     
     517/     1A2 : 50 AA               	JMS PM_WRITE_P0_P1
     518/     1A4 : 71 8E               	ISZ R1, CMDWP_L1
     519/     1A6 :                     
     520/     1A6 : 56 57               	JMS PRINT_CRLF
     521/     1A8 :                     
     522/     1A8 : 40 13               	JUN CMD_LOOP		; return to command loop
     523/     1AA :                     
     524/     1AA :                     ;;;---------------------------------------------------------------------------
     525/     1AA :                     ;;; COMMAND_DP
     526/     1AA :                     ;;; Dump Program Memory
     527/     1AA :                     ;;;---------------------------------------------------------------------------
     528/     1AA :                     COMMAND_DP:
     529/     1AA : 56 57               	JMS PRINT_CRLF
     530/     1AC :                     
     531/     1AC : 50 B0               	JMS PM_WRITE_READROUTINE
     532/     1AE :                     
     533/     1AE : 20 00               	FIM P0, 00H
     534/     1B0 :                     CMDDP_L0:
     535/     1B0 : 22 46               	FIM P1,'F'
     536/     1B2 : 56 28               	JMS PUTCHAR_P1
     537/     1B4 : A0                  	LD R0
     538/     1B5 : 56 4C               	JMS PRINT_ACC
     539/     1B7 : 22 30               	FIM P1,'0'
     540/     1B9 : 56 28               	JMS PUTCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 10 - 2023/02/24 22:59:16


     541/     1BB : 22 3A               	FIM P1,':'
     542/     1BD : 56 28               	JMS PUTCHAR_P1
     543/     1BF :                     CMDDP_L1:	
     544/     1BF : 22 20               	FIM P1, ' '
     545/     1C1 : 56 28               	JMS PUTCHAR_P1
     546/     1C3 :                     
     547/     1C3 : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
     548/     1C5 : A3                  	LD R3
     549/     1C6 : B5                  	XCH R5
     550/     1C7 : A2                  	LD R2
     551/     1C8 : 56 4C               	JMS PRINT_ACC
     552/     1CA : A5                  	LD R5
     553/     1CB : 56 4C               	JMS PRINT_ACC
     554/     1CD :                     
     555/     1CD : 71 BF               	ISZ R1, CMDDP_L1
     556/     1CF : 56 57               	JMS PRINT_CRLF
     557/     1D1 : 70 B0                       ISZ R0, CMDDP_L0
     558/     1D3 :                     	
     559/     1D3 : 40 13               	JUN CMD_LOOP		; return to command loop
     560/     1D5 :                     
     561/     1D5 :                     ;;;---------------------------------------------------------------------------
     562/     1D5 :                     ;;; COMMAND_CP
     563/     1D5 :                     ;;; Clear Program Memory
     564/     1D5 :                     ;;;---------------------------------------------------------------------------
     565/     1D5 :                     COMMAND_CP:
     566/     1D5 : 56 57               	JMS PRINT_CRLF
     567/     1D7 :                     
     568/     1D7 : 20 00               	FIM P0, 00H
     569/     1D9 : 22 00               	FIM P1, 00H
     570/     1DB :                     CMDCL_L1:
     571/     1DB : 50 AA               	JMS PM_WRITE_P0_P1
     572/     1DD : 71 DB               	ISZ R1, CMDCL_L1
     573/     1DF : 70 DB               	ISZ R0, CMDCL_L1
     574/     1E1 :                     	
     575/     1E1 : 40 13               	JUN CMD_LOOP		; return to command loop
     576/     1E3 :                     
     577/     1E3 :                     ;;;---------------------------------------------------------------------------
     578/     1E3 :                     ;;; COMMAND_BP
     579/     1E3 :                     ;;; Set a bank of program memory
     580/     1E3 :                     ;;;---------------------------------------------------------------------------
     581/     1E3 :                     COMMAND_BP:
     582/     1E3 : 20 38               	FIM P0, lo(STR_BANK)	; print " BANK="
     583/     1E5 : 57 00               	JMS PRINT_P0
     584/     1E7 : 56 00               	JMS GETCHAR_P1
     585/     1E9 : 56 28               	JMS PUTCHAR_P1
     586/     1EB : 56 72               	JMS CTOI_P1
     587/     1ED : A3                  	LD R3
     588/     1EE : 50 BC               	JMS PM_SELECTBANK_ACC
     589/     1F0 : 50 B0               	JMS PM_WRITE_READROUTINE
     590/     1F2 : 56 57               	JMS PRINT_CRLF
     591/     1F4 :                     
     592/     1F4 : 40 13               	JUN CMD_LOOP		; return to command loop
     593/     1F6 :                     	
     594/     1F6 :                     ;;;---------------------------------------------------------------------------
     595/     1F6 :                     ;;; COMMAND_G
     596/     1F6 :                     ;;; Go to Top of Program memory PM_TOP(0x0F00)
     597/     1F6 :                     ;;;---------------------------------------------------------------------------
     598/     1F6 :                     COMMAND_G:
     599/     1F6 : 56 57               	JMS PRINT_CRLF
     600/     1F8 : 5F 00               	JMS PM_TOP
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 11 - 2023/02/24 22:59:16


     601/     1FA : 40 13               	JUN CMD_LOOP		; return to command loop
     602/     1FC :                     
     603/     1FC :                     ;;;---------------------------------------------------------------------------
     604/     1FC :                     ;;; Program for the Calculator Mode
     605/     1FC :                     ;;;---------------------------------------------------------------------------
     606/     200 :                     	org 0200H
     607/     200 :                     ;;;---------------------------------------------------------------------------
     608/     200 :                     ;;; Memory Resisters used in the calculator mode
     609/     200 :                     ;;;---------------------------------------------------------------------------
     610/     200 :                     ;;; Bank0, Chip 0
     611/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_X
     612/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_Y
     613/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_Z
     614/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_T
     615/     200 :                     ;;;---------------------------------------------------------------------------
     616/     200 :                     ;;; Bank0, Chip 1
     617/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_M (working for multiplication/division)
     618/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_A (working for square root)
     619/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_B
     620/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_C
     621/     200 :                     ;;;---------------------------------------------------------------------------
     622/     200 :                     ;;; Bank1, Chip 0
     623/     200 :                     ;;;---------------------------------------------------------------------------
     624/     200 :                     ;;; Bank1, Chip 1
     625/     200 :                     ;;;---------------------------------------------------------------------------
     626/     200 :                     ;;;---------------------------------------------------------------------------
     627/     200 :                     ;;; CHIP#(=D7.D6), REG#(=D5.D4) of number registers 
     628/     200 :                     ;;;---------------------------------------------------------------------------
     629/     200 : =0H                  REG_X  	equ (CHIP_RAM0+(0<<4))	; CHIP#.00.0000
     630/     200 : =10H                 REG_Y	equ (CHIP_RAM0+(1<<4))	; CHIP#.01.0000
     631/     200 : =20H                 REG_Z  	equ (CHIP_RAM0+(2<<4))	; CHIP#.10.0000
     632/     200 : =30H                 REG_T	equ (CHIP_RAM0+(3<<4))	; CHIP#.11.0000
     633/     200 :                     
     634/     200 : =40H                 REG_M	equ (CHIP_RAM1+(0<<4))	; CHIP#.00.0000
     635/     200 : =50H                 REG_A	equ (CHIP_RAM1+(1<<4))	; CHIP#.01.0000
     636/     200 : =60H                 REG_B	equ (CHIP_RAM1+(2<<4))	; CHIP#.10.0000
     637/     200 : =70H                 REG_C	equ (CHIP_RAM1+(3<<4))	; CHIP#.11.0000
     638/     200 :                     
     639/     200 :                     ;;;---------------------------------------------------------------------------
     640/     200 :                     ;;; Number expression (simple floating point)
     641/     200 :                     ;;;       1 11111
     642/     200 :                     ;;; char# 5 432109876543210
     643/     200 :                     ;;;  (+/-)D.DDDDDDDDDDDDDDD*(10^E)
     644/     200 :                     ;;; D0-15: Fraction (D15=most significant digit, D0=least significant digit)
     645/     200 :                     ;;; D15 denotes an integer part, but it shuld be zero except
     646/     200 :                     ;;; while calculating addition or multiplication.
     647/     200 :                     ;;; It is used for avoiding overflow.
     648/     200 :                     ;;; The number is normalized so that D15 is zero and minimize exponent
     649/     200 :                     ;;; S0: Exponent (0 to 14)
     650/     200 :                     ;;; S1: Sign of the fraction (0=positive, 15=negative)
     651/     200 :                     ;;; S2: Error (0:no_error, 1:overflow, 2:divide_by_zero)
     652/     200 :                     ;;;---------------------------------------------------------------------------
     653/     200 :                     
     654/     200 :                     ; Error flags
     655/     200 : =1H                  REG_ERROR_OVERFLOW  equ 1
     656/     200 : =2H                  REG_ERROR_DIVBYZERO equ 2
     657/     200 :                     	
     658/     200 :                     ;;;---------------------------------------------------------------------------
     659/     200 :                     ;;;COMMAND_C
     660/     200 :                     ;;; 	Calculator
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 12 - 2023/02/24 22:59:16


     661/     200 :                     ;;; P0(R0, R1): working for PRINT
     662/     200 :                     ;;; P1(R2, R3): working for PRINT, GETCHAR, PUTCHAR
     663/     200 :                     ;;; P2(R4, R5):
     664/     200 :                     ;;; P3(R6, R7):   
     665/     200 :                     ;;; 		  R6.bit0 = automatic ENTER flag (0:desable , 1:enable)
     666/     200 :                     ;;;               R6.bit1 = input full flag (0:not full, 1:full)
     667/     200 :                     ;;; 	          R6.bit3 = digit point flag(0:no dp, 1:dp set)
     668/     200 :                     ;;; 	          R7=digit counter for key input
     669/     200 :                     ;;; 		  REG_X is automatically cleared if R7 is 0 (first digit input)
     670/     200 :                     ;;; P4(R8,  R9):  register address and character index(mainly REG_X)
     671/     200 :                     ;;; P5(R10, R11): register address and character index(mainly REG_Y)
     672/     200 :                     ;;; P6(R12, R13): working for register operation
     673/     200 :                     ;;; P7(R14, R15): working for register operation
     674/     200 :                     ;;;---------------------------------------------------------------------------
     675/     200 :                     COMMAND_C:
     676/     200 : 20 51               	FIM P0, lo(STR_CALC)
     677/     202 : 57 00               	JMS PRINT_P0
     678/     204 :                     
     679/     204 : 52 FB               	JMS CMDC_CLEAR		; clear registers
     680/     206 :                     
     681/     206 :                     CMDC_START:
     682/     206 : A6                  	LD R6
     683/     207 : F6                  	RAR
     684/     208 : D0                  	LDM 0
     685/     209 : F5                  	RAL
     686/     20A : B6                  	XCH R6			; reset flags except for automatic ENTER flag
     687/     20B : F0                  	CLB
     688/     20C : B7                  	XCH R7			; set digit counter = 0
     689/     20D : 20 00               	FIM P0, REG_X
     690/     20F : 55 92               	JMS PRINT_REGISTER_P0	; print REG_X
     691/     211 : 56 57               	JMS PRINT_CRLF
     692/     213 :                     	
     693/     213 :                     CMDC_LOOP:		; loop for input digits to REG_X
     694/     213 : 56 00               	JMS GETCHAR_P1
     695/     215 : 56 7E                       JMS DISPLED_P1
     696/     217 : 20 0D               	FIM P0, '\r'
     697/     219 : 50 98               	JMS CMP_P0P1
     698/     21B : 14 13               	JCN Z, CMDC_LOOP	; skip CR
     699/     21D :                     
     700/     21D : 20 0A               	FIM P0, '\n'		; 'ENTER' key
     701/     21F : 50 98               	JMS CMP_P0P1
     702/     221 : 1C 29               	JCN ZN, CMDC_L1
     703/     223 : 56 57               	JMS PRINT_CRLF
     704/     225 : 53 0D               	JMS CMDC_ENTER
     705/     227 : 42 06               	JUN CMDC_START
     706/     229 :                     CMDC_L1:
     707/     229 : 20 71               	FIM P0, 'q'		; quit
     708/     22B : 50 98               	JMS CMP_P0P1
     709/     22D : 1C 33               	JCN ZN, CMDC_L2
     710/     22F : 56 57               	JMS PRINT_CRLF
     711/     231 : 40 13               	JUN CMD_LOOP		; return to command loop
     712/     233 :                     CMDC_L2:	
     713/     233 : 20 2B               	FIM P0, '+'		; '+' key
     714/     235 : 50 98               	JMS CMP_P0P1
     715/     237 : 1C 43               	JCN ZN, CMDC_L3
     716/     239 : 56 28               	JMS PUTCHAR_P1
     717/     23B : 56 57               	JMS PRINT_CRLF
     718/     23D : 53 41               	JMS CMDC_ADD
     719/     23F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     720/     241 : 42 06               	JUN CMDC_START
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 13 - 2023/02/24 22:59:16


     721/     243 :                     CMDC_L3:
     722/     243 : 20 2D               	FIM P0, '-'		; '-' key
     723/     245 : 50 98               	JMS CMP_P0P1
     724/     247 : 1C 53               	JCN ZN, CMDC_L4
     725/     249 : 56 28               	JMS PUTCHAR_P1
     726/     24B : 56 57               	JMS PRINT_CRLF
     727/     24D : 54 6D               	JMS CMDC_SUB
     728/     24F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     729/     251 : 42 06               	JUN CMDC_START
     730/     253 :                     CMDC_L4:
     731/     253 : 20 2A               	FIM P0, '*'		; '*' key
     732/     255 : 50 98               	JMS CMP_P0P1
     733/     257 : 1C 63               	JCN ZN, CMDC_L5
     734/     259 : 56 28               	JMS PUTCHAR_P1
     735/     25B : 56 57               	JMS PRINT_CRLF
     736/     25D : 54 00               	JMS CMDC_MUL
     737/     25F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     738/     261 : 42 06               	JUN CMDC_START
     739/     263 :                     CMDC_L5:
     740/     263 : 20 2F               	FIM P0, '/'		; '/' key
     741/     265 : 50 98               	JMS CMP_P0P1
     742/     267 : 1C 73               	JCN ZN, CMDC_L6
     743/     269 : 56 28               	JMS PUTCHAR_P1
     744/     26B : 56 57               	JMS PRINT_CRLF
     745/     26D : 54 FD               	JMS CMDC_DIV
     746/     26F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     747/     271 : 42 06               	JUN CMDC_START
     748/     273 :                     CMDC_L6:
     749/     273 : 20 63               	FIM P0, 'c'		; clear
     750/     275 : 50 98               	JMS CMP_P0P1
     751/     277 : 1C 7F               	JCN ZN, CMDC_L7
     752/     279 : 56 57               	JMS PRINT_CRLF
     753/     27B : 52 FB               	JMS CMDC_CLEAR
     754/     27D : 42 06               	JUN CMDC_START
     755/     27F :                     CMDC_L7:
     756/     27F : 20 73               	FIM P0, 's'		; sign change
     757/     281 : 50 98               	JMS CMP_P0P1
     758/     283 : 1C 8D               	JCN ZN, CMDC_L8
     759/     285 :                     
     760/     285 : 54 F6               	JMS CHANGE_SIGN_REG_X
     761/     287 : 56 57               	JMS PRINT_CRLF
     762/     289 : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     763/     28B : 42 06               	JUN CMDC_START
     764/     28D :                     CMDC_L8:
     765/     28D : 20 70               	FIM P0, 'p'		; print registers
     766/     28F : 50 98               	JMS CMP_P0P1
     767/     291 : 1C 99               	JCN ZN, CMDC_L81
     768/     293 : 56 57               	JMS PRINT_CRLF
     769/     295 : 54 54               	JMS CMDC_PRINT
     770/     297 : 42 06               	JUN CMDC_START
     771/     299 :                     CMDC_L81:
     772/     299 : 20 72               	FIM P0, 'r'		; square root
     773/     29B : 50 98               	JMS CMP_P0P1
     774/     29D : 1C A9               	JCN ZN, CMDC_L9
     775/     29F : 20 AE               	FIM P0, lo(STR_CALC_SQRT)
     776/     2A1 : 57 00               	JMS PRINT_P0
     777/     2A3 : 40 C1               	JUN CMDC_SQUAREROOT	; because of the limit of the stack,
     778/     2A5 :                     				; it cannot be a subroutine
     779/     2A5 :                     CMDC_SQR_RETURN:	
     780/     2A5 : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 14 - 2023/02/24 22:59:16


     781/     2A7 : 42 06               	JUN CMDC_START
     782/     2A9 :                     CMDC_L9:
     783/     2A9 : A6                  	LD R6			; check number full flag (R6.bit1)
     784/     2AA : F6                  	RAR			; no more '0-9' or '.' input
     785/     2AB : F6                  	RAR
     786/     2AC : 12 CA               	JCN C, CMDC_L11
     787/     2AE :                     
     788/     2AE : 20 2E               	FIM P0, '.'		; '.' digit point
     789/     2B0 : 50 98               	JMS CMP_P0P1
     790/     2B2 : 1C C0               	JCN ZN, CMDC_L10
     791/     2B4 : A6                  	LD R6
     792/     2B5 : F5                  	RAL
     793/     2B6 : 12 CA               	JCN C, CMDC_L11	; skip if digit point flag (R6.bit3) is already set
     794/     2B8 : 56 28               	JMS PUTCHAR_P1		; echo input
     795/     2BA : 52 E6               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     796/     2BC : 52 F5               	JMS CMDC_DIGITPOINT
     797/     2BE : 42 13               	JUN CMDC_LOOP
     798/     2C0 :                     	
     799/     2C0 :                     CMDC_L10:
     800/     2C0 : 52 CC               	JMS ISNUM_P1
     801/     2C2 : 14 CA               	JCN Z, CMDC_L11         ; skip if not a number
     802/     2C4 : 56 28               	JMS PUTCHAR_P1		; echo input
     803/     2C6 : 52 E6               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     804/     2C8 : 53 21               	JMS CMDC_NUM
     805/     2CA :                     CMDC_L11:
     806/     2CA : 42 13               	JUN CMDC_LOOP
     807/     2CC :                     
     808/     2CC :                     ;;;---------------------------------------------------------------------------
     809/     2CC :                     ;;; ISNUM_P1
     810/     2CC :                     ;;; check P1 '0' to '9' as a ascii character
     811/     2CC :                     ;;; return: ACC=0 if P1 is not a number
     812/     2CC :                     ;;;         ACC=1 if P1 is a number
     813/     2CC :                     ;;; destroy: P0
     814/     2CC :                     ;;;---------------------------------------------------------------------------
     815/     2CC :                     ISNUM_P1:
     816/     2CC : 20 2F               	FIM P0, '0'-1
     817/     2CE : 50 98               	JMS CMP_P0P1
     818/     2D0 : 12 D9               	JCN C, ISNUM_FALSE	; '0'-1 >= P1
     819/     2D2 : 20 39               	FIM P0, '9'
     820/     2D4 : 50 98               	JMS CMP_P0P1
     821/     2D6 : 1A D9               	JCN CN, ISNUM_FALSE	; '9' < P1
     822/     2D8 : C1                  	BBL 1			; P1 is a number
     823/     2D9 :                     ISNUM_FALSE:
     824/     2D9 : C0                  	BBL 0			; P1 is not a number
     825/     2DA :                     	
     826/     2DA :                     ;;;---------------------------------------------------------------------------
     827/     2DA :                     ;;; CMDC_SET_AUTOMATIC_ENTER_FLAG
     828/     2DA :                     ;;;  set automatic ENTER flag
     829/     2DA :                     ;;;---------------------------------------------------------------------------
     830/     2DA :                     CMDC_SET_AUTOMATIC_ENTER_FLAG:	
     831/     2DA : A6                  	LD R6
     832/     2DB : F6                  	RAR
     833/     2DC : FA                  	STC
     834/     2DD : F5                  	RAL
     835/     2DE : B6                  	XCH R6
     836/     2DF : C0                  	BBL 0
     837/     2E0 :                     
     838/     2E0 :                     ;;;---------------------------------------------------------------------------
     839/     2E0 :                     ;;; CMDC_CLEAR_AUTOMATIC_ENTER_FLAG
     840/     2E0 :                     ;;; clear automatic ENTER flag
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 15 - 2023/02/24 22:59:16


     841/     2E0 :                     ;;;---------------------------------------------------------------------------
     842/     2E0 :                     CMDC_CLEAR_AUTOMATIC_ENTER_FLAG:
     843/     2E0 : A6                  	LD R6
     844/     2E1 : F6                  	RAR
     845/     2E2 : F1                  	CLC
     846/     2E3 : F5                  	RAL
     847/     2E4 : B6                  	XCH R6
     848/     2E5 : C0                  	BBL 0
     849/     2E6 :                     
     850/     2E6 :                     ;;;---------------------------------------------------------------------------
     851/     2E6 :                     ;;; CMDC_AUTOMATIC_PUSH_AND_CLEAR
     852/     2E6 :                     ;;;   push REG_X and clear for the first '0-9' or '.' after operation
     853/     2E6 :                     ;;;---------------------------------------------------------------------------
     854/     2E6 :                     CMDC_AUTOMATIC_PUSH_AND_CLEAR:
     855/     2E6 : A6                  	LD R6                   ; check automatic ENTER flag (R6.bit0)
     856/     2E7 : F6                  	RAR
     857/     2E8 : 1A EC               	JCN CN, CMDC_PUSH_L0
     858/     2EA : 53 0D               	JMS CMDC_ENTER		; push ENTER key
     859/     2EC :                     
     860/     2EC :                     CMDC_PUSH_L0:
     861/     2EC : A7                  	LD R7                   ; check digit count
     862/     2ED : 1C F4               	JCN ZN,CMDC_PUSH_EXIT	; if R7 = 0 then R7++ and clear REG_X
     863/     2EF : 67                  	INC R7
     864/     2F0 : 20 00               	FIM P0, REG_X
     865/     2F2 : 54 C8               	JMS CLEAR_REGISTER_P0	; clear X for the first keyin
     866/     2F4 :                     CMDC_PUSH_EXIT
     867/     2F4 : C0                  	BBL 0
     868/     2F5 :                     
     869/     2F5 :                     ;;;---------------------------------------------------------------------------
     870/     2F5 :                     ;;; CMDC_DIGITPOINT
     871/     2F5 :                     ;;; set a digit point
     872/     2F5 :                     ;;;---------------------------------------------------------------------------
     873/     2F5 :                     CMDC_DIGITPOINT:
     874/     2F5 : A6                  	LD R6
     875/     2F6 : F5                  	RAL
     876/     2F7 : FA                  	STC			; set digit point flag R6.bit3
     877/     2F8 : F6                  	RAR
     878/     2F9 : B6                  	XCH R6                  
     879/     2FA :                     CMDC_DP_EXIT:	
     880/     2FA : C0                  	BBL 0
     881/     2FB :                     
     882/     2FB :                     ;;;---------------------------------------------------------------------------
     883/     2FB :                     ;;; CMDC_CLEAR
     884/     2FB :                     ;;; clear all registers
     885/     2FB :                     ;;;---------------------------------------------------------------------------
     886/     2FB :                     CMDC_CLEAR:
     887/     2FB : 20 00               	FIM P0, REG_X
     888/     2FD : 54 C8               	JMS CLEAR_REGISTER_P0
     889/     2FF : 20 10               	FIM P0, REG_Y
     890/     301 : 54 C8               	JMS CLEAR_REGISTER_P0
     891/     303 : 20 20               	FIM P0, REG_Z
     892/     305 : 54 C8               	JMS CLEAR_REGISTER_P0
     893/     307 : 20 30               	FIM P0, REG_T
     894/     309 : 54 C8               	JMS CLEAR_REGISTER_P0
     895/     30B :                     
     896/     30B : 42 E0               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     897/     30D :                     	
     898/     30D :                     ;;;---------------------------------------------------------------------------
     899/     30D :                     ;;; CMDC_ENTER
     900/     30D :                     ;;; Push register stack
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 16 - 2023/02/24 22:59:16


     901/     30D :                     ;;; 	X=>Y=>Z=>T
     902/     30D :                     ;;;---------------------------------------------------------------------------
     903/     30D :                     CMDC_ENTER:
     904/     30D : 2C 30               	FIM P6, REG_T
     905/     30F : 2E 20               	FIM P7, REG_Z
     906/     311 : 54 D4               	JMS LD_REGISTER_P6_P7	; T<=Z
     907/     313 : 2C 20               	FIM P6, REG_Z
     908/     315 : 2E 10               	FIM P7, REG_Y
     909/     317 : 54 D4               	JMS LD_REGISTER_P6_P7	; Z<=Y
     910/     319 : 2C 10               	FIM P6, REG_Y
     911/     31B : 2E 00               	FIM P7, REG_X
     912/     31D : 54 D4               	JMS LD_REGISTER_P6_P7	; Y<=X
     913/     31F :                     
     914/     31F : 42 E0               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     915/     321 :                     	
     916/     321 :                     ;;;---------------------------------------------------------------------------
     917/     321 :                     ;;; CMDC_NUM
     918/     321 :                     ;;; enter a number to X
     919/     321 :                     ;;; input: P1=('0', ...'9') ASCII character
     920/     321 :                     ;;;        R7=digit count
     921/     321 :                     ;;;---------------------------------------------------------------------------
     922/     321 :                     CMDC_NUM:
     923/     321 : 56 72               	JMS CTOI_P1
     924/     323 : A3                  	LD R3
     925/     324 :                     	;; 	LD R6			; check digit point flag (R6.bit3)
     926/     324 :                     	;; 	RAL
     927/     324 :                     	;; 	JCN C,CMDC_NUM_L1	; digit point flag is ture
     928/     324 :                     	;; 	LD R3			; when digit point frag is false,
     929/     324 :                     	;; 	JCN NZ, CMDC_NUM_L1	; ignore key in '0' if digit counter is 1
     930/     324 :                     	;; 	LD R7		
     931/     324 :                     	;; 	DAC
     932/     324 :                     	;; 	JCN Z, CMDC_NUM_EXIT
     933/     324 :                     	;; CMDC_NUM_L1:
     934/     324 :                     	;; operation is for R7-th digit of X
     935/     324 : 2E 00               	FIM P7, REG_X
     936/     326 : DF                  	LDM 15
     937/     327 : F1                  	CLC
     938/     328 : 97                  	SUB R7			
     939/     329 : BF                  	XCH R15                 ; P7=(REG_X).(#char=15-R7)
     940/     32A : 2F                  	SRC P7
     941/     32B :                     
     942/     32B : A6                  	LD R6
     943/     32C : F5                  	RAL			; check R6.bit3 (dp flag)
     944/     32D : 12 31               	JCN C, CMDC_SETNUM	; if dp flag is true, exponent is not updated
     945/     32F :                     	;; set exponent of X
     946/     32F : A7                  	LD R7
     947/     330 : E4                  	WR0
     948/     331 :                     CMDC_SETNUM:
     949/     331 : A3                  	LD R3
     950/     332 : E0                  	WRM
     951/     333 : 67                  	INC R7
     952/     334 : DF                  	LDM 15			; maximum number of digits is 14,
     953/     335 : F1                  	CLC			; so set digit full flag when R7 becomes 15
     954/     336 : 97                  	SUB R7
     955/     337 : 1C 40               	JCN ZN, CMDC_NUM_EXIT
     956/     339 :                     	;; set digit full flag R6.bit1
     957/     339 : A6                  	LD R6
     958/     33A : F6                  	RAR
     959/     33B : F6                  	RAR
     960/     33C : FA                  	STC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 17 - 2023/02/24 22:59:16


     961/     33D : F5                  	RAL
     962/     33E : F5                  	RAL
     963/     33F : B6                  	XCH R6
     964/     340 :                     CMDC_NUM_EXIT:
     965/     340 : C0                  	BBL 0
     966/     341 :                     
     967/     341 :                     ;;;---------------------------------------------------------------------------
     968/     341 :                     ;;; CMDC_ADD
     969/     341 :                     ;;; X = X + Y
     970/     341 :                     ;;;---------------------------------------------------------------------------
     971/     341 :                     CMDC_ADD:
     972/     341 : 54 A6               	JMS ALIGN_REGISTER_XY
     973/     343 :                     
     974/     343 : 2C 00               	FIM P6, REG_X
     975/     345 : 2E 10               	FIM P7, REG_Y
     976/     347 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
     977/     348 : ED                  	RD1
     978/     349 : B0                  	XCH R0			; R0 = sign of X
     979/     34A : 2F                  	SRC P7
     980/     34B : ED                  	RD1
     981/     34C : F1                  	CLC
     982/     34D : 90                  	SUB R0
     983/     34E : 14 70                	JCN Z, CMDC_ADD_SAMESIGN
     984/     350 :                     
     985/     350 : 53 B0               	JMS CMP_FRACTION_P6_P7
     986/     352 : 14 78               	JCN Z, CMDC_ADD_ZERO_EXIT
     987/     354 : 12 68               	JCN C, CMD_SUB_X_Y	; P6 > P7
     988/     356 :                     CMD_SUB_Y_X:
     989/     356 : 2C 40               	FIM P6, REG_M		; swap X and Y
     990/     358 : 2E 00               	FIM P7, REG_X
     991/     35A : 54 D4               	JMS LD_REGISTER_P6_P7	; M<=X
     992/     35C : 2C 00               	FIM P6, REG_X
     993/     35E : 2E 10               	FIM P7, REG_Y
     994/     360 : 54 D4               	JMS LD_REGISTER_P6_P7	; X<=Y
     995/     362 : 2C 10               	FIM P6, REG_Y
     996/     364 : 2E 40               	FIM P7, REG_M
     997/     366 : 54 D4               	JMS LD_REGISTER_P6_P7	; Y<=M
     998/     368 :                     
     999/     368 :                     CMD_SUB_X_Y:	
    1000/     368 : 2C 00               	FIM P6, REG_X
    1001/     36A : 2E 10               	FIM P7, REG_Y
    1002/     36C : 53 9E               	JMS SUB_FRACTION_P6_P7
    1003/     36E :                     
    1004/     36E : 43 76               	JUN CMDC_ADD_EXIT
    1005/     370 :                     
    1006/     370 :                     CMDC_ADD_SAMESIGN:
    1007/     370 : 2C 00               	FIM P6, REG_X
    1008/     372 : 2E 10               	FIM P7, REG_Y
    1009/     374 : 53 8F               	JMS ADD_FRACTION_P6_P7
    1010/     376 :                     	
    1011/     376 :                     CMDC_ADD_EXIT:
    1012/     376 : 43 7E               	JUN CMDC_NORMALIZE_AND_POP
    1013/     378 :                     
    1014/     378 :                     CMDC_ADD_ZERO_EXIT:
    1015/     378 : 20 00               	FIM P0, REG_X
    1016/     37A : 54 C8               	JMS CLEAR_REGISTER_P0
    1017/     37C : 43 76               	JUN CMDC_ADD_EXIT
    1018/     37E :                     
    1019/     37E :                     ;;;---------------------------------------------------------------------------
    1020/     37E :                     ;;; CMDC_NORMALIZE_AND_POP
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 18 - 2023/02/24 22:59:16


    1021/     37E :                     ;;; Common routine for finish calculation
    1022/     37E :                     ;;; Normalize REG_X
    1023/     37E :                     ;;; Pop registers
    1024/     37E :                     ;;; REG_Y<= REG_Z<=REG_T
    1025/     37E :                     ;;;---------------------------------------------------------------------------
    1026/     37E :                     CMDC_NORMALIZE_AND_POP:
    1027/     37E : 20 00                	FIM P0, REG_X
    1028/     380 : 53 CA                	JMS NORMALIZE_REGISTER_P0
    1029/     382 :                     
    1030/     382 : 2C 10               	FIM P6, REG_Y
    1031/     384 : 2E 20               	FIM P7, REG_Z
    1032/     386 : 54 D4               	JMS LD_REGISTER_P6_P7 	; Y<=Z
    1033/     388 :                     
    1034/     388 : 2C 20               	FIM P6, REG_Z
    1035/     38A : 2E 30               	FIM P7, REG_T
    1036/     38C : 54 D4               	JMS LD_REGISTER_P6_P7 	; Z<=T
    1037/     38E :                     
    1038/     38E : C0                  	BBL 0
    1039/     38F :                     	
    1040/     38F :                     ;;;---------------------------------------------------------------------------
    1041/     38F :                     ;;; ADD_FRACTION_P6_P7
    1042/     38F :                     ;;; Add fraction of two registers
    1043/     38F :                     ;;; REG(P6) = REG(P6) + REG(P7)
    1044/     38F :                     ;;; register should be normalized so that D15 = 0
    1045/     38F :                     ;;; in order to avoid overflow
    1046/     38F :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
    1047/     38F :                     ;;;---------------------------------------------------------------------------
    1048/     38F :                     ADD_FRACTION_P6_P7:
    1049/     38F : F0                  	CLB
    1050/     390 : BD                  	XCH R13
    1051/     391 : F0                  	CLB
    1052/     392 : BF                  	XCH R15
    1053/     393 : F0                  	CLB
    1054/     394 :                     ADD_FRA_LOOP:
    1055/     394 : 2F                  	SRC P7
    1056/     395 : E9                  	RDM
    1057/     396 : 2D                  	SRC P6
    1058/     397 : EB                  	ADM
    1059/     398 : FB                  	DAA
    1060/     399 : E0                  	WRM
    1061/     39A : 6D                  	INC R13
    1062/     39B : 7F 94               	ISZ R15, ADD_FRA_LOOP
    1063/     39D :                     ADD_FRA_EXIT:	
    1064/     39D : C0                  	BBL 0
    1065/     39E :                     	
    1066/     39E :                     ;;;---------------------------------------------------------------------------
    1067/     39E :                     ;;; SUB_FRACTION_P6_P7
    1068/     39E :                     ;;; subtract fraction
    1069/     39E :                     ;;; REG(P6) = REG(P6) - REG(P7)
    1070/     39E :                     ;;; REG(P6) should be equal or larger than REG(P7)
    1071/     39E :                     ;;; in order to avoid underflow
    1072/     39E :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
    1073/     39E :                     ;;;---------------------------------------------------------------------------
    1074/     39E :                     ;;; Reference
    1075/     39E :                     ;;; "Intel MCS-4 Assembly Language Programming Manual" Dec.1973,
    1076/     39E :                     ;;; 4.8 Decimal Subtraction, pp.4-20--23
    1077/     39E :                     ;;;---------------------------------------------------------------------------
    1078/     39E :                     SUB_FRACTION_P6_P7:
    1079/     39E : F0                  	CLB
    1080/     39F : BD                  	XCH R13
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 19 - 2023/02/24 22:59:16


    1081/     3A0 : F0                  	CLB
    1082/     3A1 : BF                  	XCH R15
    1083/     3A2 : F0                  	CLB
    1084/     3A3 : FA                  	STC
    1085/     3A4 :                     SUB_FRA_LOOP:
    1086/     3A4 : F9                  	TCS
    1087/     3A5 : 2F                  	SRC P7
    1088/     3A6 : E8                  	SBM
    1089/     3A7 :                     
    1090/     3A7 : F1                  	CLC
    1091/     3A8 : 2D                  	SRC P6
    1092/     3A9 : EB                  	ADM
    1093/     3AA :                     
    1094/     3AA : FB                  	DAA
    1095/     3AB : E0                  	WRM
    1096/     3AC : 6D                  	INC R13
    1097/     3AD : 7F A4               	ISZ R15, SUB_FRA_LOOP
    1098/     3AF : C0                  	BBL 0
    1099/     3B0 :                     
    1100/     3B0 :                     ;;;---------------------------------------------------------------------------
    1101/     3B0 :                     ;;; CMP_FRACTION_P6_P7
    1102/     3B0 :                     ;;; compare fraction of REG(P6) and REG(P7)
    1103/     3B0 :                     ;;; output: ACC=1,CY=0 if REG(P6) < REG(P7)
    1104/     3B0 :                     ;;;         ACC=0,CY=1 if REG(P6)== REG(P7)
    1105/     3B0 :                     ;;;         ACC=1,CY=1 if REG(P6) > REG(P7)
    1106/     3B0 :                     ;;; REG(P6) - (P7) (the carry bit is a complement of the borrow)
    1107/     3B0 :                     ;;; working: R0, R1
    1108/     3B0 :                     ;;; destroy: P0, R13, R15, (R12 and R14 are not affected)
    1109/     3B0 :                     ;;;---------------------------------------------------------------------------
    1110/     3B0 :                     CMP_FRACTION_P6_P7:	
    1111/     3B0 : F0                  	CLB
    1112/     3B1 : B0                  	XCH R0			; R0 = 0
    1113/     3B2 :                     
    1114/     3B2 :                     CMP_FRACTION_LOOP:		; for i(R0)=0 to 15
    1115/     3B2 : A0                  	LD R0
    1116/     3B3 : F4                  	CMA
    1117/     3B4 : BD                  	XCH R13
    1118/     3B5 : 2D                  	SRC P6
    1119/     3B6 : E9                  	RDM
    1120/     3B7 : B1                  	XCH R1			; R1=REG(P6)[15-i]
    1121/     3B8 :                     
    1122/     3B8 : A0                  	LD R0
    1123/     3B9 : F4                  	CMA
    1124/     3BA : BF                  	XCH R15
    1125/     3BB : 2F                  	SRC P7
    1126/     3BC :                     
    1127/     3BC : A1                  	LD R1
    1128/     3BD : F1                  	CLC
    1129/     3BE : E8                  	SBM			; ACC=REG(P6)[15-i] - REG(P7)[15-i]
    1130/     3BF :                     
    1131/     3BF : 14 C5               	JCN Z, CMP_FRACTION_NEXT
    1132/     3C1 : 12 C9               	JCN C, CMP_FRACTION_EXIT11
    1133/     3C3 : 43 C8               	JUN CMP_FRACTION_EXIT10
    1134/     3C5 :                     
    1135/     3C5 :                     CMP_FRACTION_NEXT:
    1136/     3C5 : 70 B2               	ISZ R0, CMP_FRACTION_LOOP
    1137/     3C7 : C0                  	BBL 0			; REG(P6) == REG(P7)
    1138/     3C8 :                     
    1139/     3C8 :                     CMP_FRACTION_EXIT10:
    1140/     3C8 : C1                  	BBL 1			; REG(P6) < REG(P7)
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 20 - 2023/02/24 22:59:16


    1141/     3C9 :                     
    1142/     3C9 :                     CMP_FRACTION_EXIT11:
    1143/     3C9 : C1                  	BBL 1			; REG(P6) > REG(P7)
    1144/     3CA :                     
    1145/     3CA :                     ;;;---------------------------------------------------------------------------
    1146/     3CA :                     ;;; NORMALIZE_REGISTER_P0
    1147/     3CA :                     ;;; minimize exponent
    1148/     3CA :                     ;;; example
    1149/     3CA :                     ;;; 0.0000001 E 9 ->shift L7->  1.0000000 E 2 -> shift R1 -> 0.10000000 E3
    1150/     3CA :                     ;;; 0.0000001 E 7 ->shift L7->  1.0000000 E 0 -> shift R1 -> 0.10000000 E1
    1151/     3CA :                     ;;; 0.0000001 E 5 ->shift L5->  0.0100000 E 0
    1152/     3CA :                     ;;; 
    1153/     3CA :                     ;;; working: P0, R2, R3
    1154/     3CA :                     ;;;---------------------------------------------------------------------------
    1155/     3CA :                     NORMALIZE_REGISTER_P0:	
    1156/     3CA : 21                  	SRC P0
    1157/     3CB : EC                  	RD0			; exponent of REG(P0)
    1158/     3CC : F4                  	CMA
    1159/     3CD : B3                  	XCH R3			; R3 = 15 - exponent
    1160/     3CE :                     	
    1161/     3CE : F0                  	CLB
    1162/     3CF : B2                  	XCH R2			; R2=0 (counter)
    1163/     3D0 : 43 DA               	JUN NM_LOOP_ENTRY
    1164/     3D2 :                     NM_LOOP:
    1165/     3D2 : A2                  	LD R2
    1166/     3D3 : F4                  	CMA
    1167/     3D4 : B1                  	XCH R1			; R1=15, 14,.., 0
    1168/     3D5 : 21                  	SRC P0
    1169/     3D6 : E9                  	RDM
    1170/     3D7 : 1C DC               	JCN ZN, NM_GO_SHIFT
    1171/     3D9 : 62                  	INC R2
    1172/     3DA :                     NM_LOOP_ENTRY:
    1173/     3DA : 73 D2               	ISZ R3, NM_LOOP
    1174/     3DC :                     NM_GO_SHIFT:
    1175/     3DC :                     	;  exponent = exponent - shift count
    1176/     3DC : EC                  	RD0
    1177/     3DD : F1                  	CLC
    1178/     3DE : 92                  	SUB R2
    1179/     3DF : E4                  	WR0
    1180/     3E0 : A2                  	LD R2			; ACC = shift count
    1181/     3E1 : 54 87               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1182/     3E3 :                     
    1183/     3E3 : DF                  	LDM 15			; check most significant digit
    1184/     3E4 : B1                  	XCH R1			; and shift to right if it is not zero
    1185/     3E5 : 21                  	SRC P0
    1186/     3E6 : E9                  	RDM
    1187/     3E7 : 14 F1               	JCN Z, NM_EXIT
    1188/     3E9 : EC                  	RD0			; increment exponent
    1189/     3EA : F2                  	IAC
    1190/     3EB : E4                  	WR0
    1191/     3EC : 1A F0               	JCN CN, NM_NOERROR
    1192/     3EE : D1                  	LDM REG_ERROR_OVERFLOW
    1193/     3EF : E6                  	WR2	;; set overflow flag
    1194/     3F0 :                     NM_NOERROR:
    1195/     3F0 : D1                  	LDM 1
    1196/     3F1 :                     NM_EXIT:
    1197/     3F1 : 44 71               	JUN SHIFT_FRACTION_RIGHT_P0_ACC
    1198/     3F3 :                     
    1199/     400 :                     	org 0400H
    1200/     400 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 21 - 2023/02/24 22:59:16


    1201/     400 :                     ;;; CMDC_MUL
    1202/     400 :                     ;;; X = X * Y
    1203/     400 :                     ;;;---------------------------------------------------------------------------
    1204/     400 :                     CMDC_MUL:
    1205/     400 : 20 00               	FIM P0, REG_X
    1206/     402 : 54 EC               	JMS ISZERO_REGISTER_P0
    1207/     404 : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1208/     406 :                     
    1209/     406 : 20 10               	FIM P0, REG_Y
    1210/     408 : 54 EC               	JMS ISZERO_REGISTER_P0
    1211/     40A : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1212/     40C :                     	
    1213/     40C : 2C 00               	FIM P6, REG_X
    1214/     40E : 2E 10               	FIM P7, REG_Y
    1215/     410 :                     
    1216/     410 : 55 80               	JMS GET_SIGN_PRODUCT_P6_P7
    1217/     412 : 2D                  	SRC P6
    1218/     413 : E5                  	WR1
    1219/     414 :                     	
    1220/     414 :                     	;;  calculate exponent of the result
    1221/     414 : EC                  	RD0
    1222/     415 : B0                  	XCH R0
    1223/     416 : 2F                  	SRC P7
    1224/     417 : EC                  	RD0
    1225/     418 : F1                  	CLC
    1226/     419 : 80                  	ADD R0
    1227/     41A : 2D                  	SRC P6
    1228/     41B : E4                  	WR0			; set exp X (tentative)
    1229/     41C :                     				; it may be adjusted by the normalization
    1230/     41C : 1A 20               	JCN CN, CMDC_MUL_L0	; check overflow
    1231/     41E : D1                  	LDM REG_ERROR_OVERFLOW
    1232/     41F : E6                  	WR2			; set overflow flag
    1233/     420 :                     CMDC_MUL_L0:
    1234/     420 :                     	;; 	LDM 0
    1235/     420 :                     	;; 	SRC P7
    1236/     420 :                     	;; 	WR0			; exp Y = 0 (can be omitted)
    1237/     420 :                     
    1238/     420 :                     	; multiply fraction X = X * Y
    1239/     420 : 54 2A               	JMS MUL_FRACTION_XY
    1240/     422 :                     
    1241/     422 :                     CMDC_MUL_EXIT:
    1242/     422 : 43 7E               	JUN CMDC_NORMALIZE_AND_POP
    1243/     424 :                     CMDC_MUL_ZERO:
    1244/     424 : 20 00               	FIM P0, REG_X
    1245/     426 : 54 C8               	JMS CLEAR_REGISTER_P0
    1246/     428 : 44 22               	JUN CMDC_MUL_EXIT
    1247/     42A :                     
    1248/     42A :                     ;;;---------------------------------------------------------------------------
    1249/     42A :                     ;;; MUL_FRACTION_XY
    1250/     42A :                     ;;; multiply fraction of REG_X and REG_Y
    1251/     42A :                     ;;; REG_X = REG_X* REG_Y
    1252/     42A :                     ;;; working: P6, P7, P5, P0(for shift), P1(for shift), P4(R8, R9)
    1253/     42A :                     ;;;---------------------------------------------------------------------------
    1254/     42A :                     ;;; D15=0 (number is normalized)
    1255/     42A :                     ;;; sum up folloings and store to FRA_X
    1256/     42A :                     ;;; FRA_Y
    1257/     42A :                     ;;; 0EDCBA9876543210 * 0 FRA_M(=FRA_X)
    1258/     42A :                     ;;;  0EDCBA987654321 * E
    1259/     42A :                     ;;;   0EDCBA98765432 * D
    1260/     42A :                     ;;;    0EDCBA9876543 * C
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 22 - 2023/02/24 22:59:16


    1261/     42A :                     ;;;     0EDCBA987654 * B
    1262/     42A :                     ;;;      0EDCBA98765 * A
    1263/     42A :                     ;;;       0EDCBA9876 * 9
    1264/     42A :                     ;;;        0EDCBA987 * 8
    1265/     42A :                     ;;;         0EDCBA98 * 7
    1266/     42A :                     ;;;          0EDCBA9 * 6
    1267/     42A :                     ;;;           0EDCBA * 5
    1268/     42A :                     ;;;            0EDCB * 4
    1269/     42A :                     ;;;             0EDC * 3
    1270/     42A :                     ;;;              0ED * 2
    1271/     42A :                     ;;;               0E * 1
    1272/     42A :                     ;;;                0 * 0
    1273/     42A :                     ;;;---------------------------------------------------------------------------
    1274/     42A :                     MUL_FRACTION_XY:
    1275/     42A : 2C 40               	FIM P6, REG_M
    1276/     42C : 2E 00               	FIM P7, REG_X
    1277/     42E : 54 E4               	JMS LD_FRACTION_P6_P7	; FRA_M <= FRA_X
    1278/     430 :                     
    1279/     430 : 20 00               	FIM P0, REG_X
    1280/     432 : 54 CE               	JMS CLEAR_FRACTION_P0	; FRA_X = 0, status(sign, exp) is reserved
    1281/     434 :                     	
    1282/     434 : 2A 40               	FIM P5, REG_M		; for mult loop (copy of X)
    1283/     436 : 2C 00               	FIM P6, REG_X		; for ADD (total)
    1284/     438 : 2E 10               	FIM P7, REG_Y		; for ADD
    1285/     43A : 20 10               	FIM P0, REG_Y		; for SHIFT (working reg. P1)
    1286/     43C :                     
    1287/     43C : F0                  	CLB
    1288/     43D : B8                  	XCH R8
    1289/     43E :                     MUL_LOOP:			; for i(R8)=0 to 15
    1290/     43E : A8                  	LD R8
    1291/     43F : F4                  	CMA
    1292/     440 : BB                  	XCH R11			; R11 = 15, 14, ..., 0
    1293/     441 : 2B                  	SRC P5
    1294/     442 : E9                  	RDM
    1295/     443 : 14 4C               	JCN Z, MUL_LOOP_NEXT	; next if (REG_Y)[15-i] == 0
    1296/     445 : F4                  	CMA
    1297/     446 : F2                  	IAC
    1298/     447 : B9                  	XCH R9			; R9 = 16-(REG_Y)[15-i]
    1299/     448 :                     MUL_ADD_LOOP:			; add FRA_M to FRA_X '(REG_Y)[15-i] times'
    1300/     448 : 53 8F               	JMS ADD_FRACTION_P6_P7
    1301/     44A : 79 48               	ISZ R9, MUL_ADD_LOOP
    1302/     44C :                     MUL_LOOP_NEXT:
    1303/     44C : D1                  	LDM 1
    1304/     44D : 20 10               	FIM P0, REG_Y
    1305/     44F : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift FRA_Y 1 digit right
    1306/     451 : 78 3E               	ISZ R8, MUL_LOOP
    1307/     453 :                     
    1308/     453 : C0                  	BBL 0
    1309/     454 :                     	
    1310/     454 :                     ;;;---------------------------------------------------------------------------
    1311/     454 :                     ;;; CMDC_PRINT
    1312/     454 :                     ;;; Print X and Y
    1313/     454 :                     ;;;---------------------------------------------------------------------------
    1314/     454 :                     CMDC_PRINT:
    1315/     454 : 20 00               	FIM P0, REG_X
    1316/     456 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1317/     458 : 56 57               	JMS PRINT_CRLF
    1318/     45A : 20 10               	FIM P0, REG_Y
    1319/     45C : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1320/     45E : 56 57               	JMS PRINT_CRLF
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 23 - 2023/02/24 22:59:16


    1321/     460 : 20 20               	FIM P0, REG_Z
    1322/     462 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1323/     464 : 56 57               	JMS PRINT_CRLF
    1324/     466 : 20 30               	FIM P0, REG_T
    1325/     468 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1326/     46A : 56 57               	JMS PRINT_CRLF
    1327/     46C : C0                  	BBL 0
    1328/     46D :                     
    1329/     46D :                     ;;;---------------------------------------------------------------------------
    1330/     46D :                     ;;; CMDC_SUB
    1331/     46D :                     ;;; X = Y - X
    1332/     46D :                     ;;;---------------------------------------------------------------------------
    1333/     46D :                     CMDC_SUB:
    1334/     46D : 54 F6               	JMS CHANGE_SIGN_REG_X
    1335/     46F : 43 41               	JUN CMDC_ADD
    1336/     471 :                     	
    1337/     471 :                     ;;;---------------------------------------------------------------------------
    1338/     471 :                     ;;; SHIFT_FRACTION_RIGHT_P0_ACC
    1339/     471 :                     ;;; shift fraction of the register to right with filling 0
    1340/     471 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1341/     471 :                     ;;; 	   ACC=shift count
    1342/     471 :                     ;;; working: P0(R0, R1), P1(R2, R3)
    1343/     471 :                     ;;; destroy P1(R2, R3), R1 becomes 0 but R0 is not affected
    1344/     471 :                     ;;;---------------------------------------------------------------------------
    1345/     471 :                     SHIFT_FRACTION_RIGHT_P0_ACC:
    1346/     471 : 14 86               	JCN Z, SHIFTR_EXIT	; exit if ACC==0
    1347/     473 : B3                  	XCH R3			; R3 = ACC = shift
    1348/     474 : A0                  	LD R0
    1349/     475 : B2                  	XCH R2			; R2 = R0
    1350/     476 :                     
    1351/     476 : F0                  	CLB			; clear ACC and CY
    1352/     477 : B1                  	XCH R1			; R1=0
    1353/     478 :                     SHIFTR_LOOP:			; for(i=0 to 15) P0(REG(i))=P1(REG(i+shift))
    1354/     478 : D0                  	LDM 0
    1355/     479 : 12 7D               	JCN C, SHIFTR_WRITE
    1356/     47B :                     SHIFTR_READ:	
    1357/     47B : 23                  	SRC P1
    1358/     47C : E9                  	RDM
    1359/     47D :                     SHIFTR_WRITE:
    1360/     47D : 21                  	SRC P0
    1361/     47E : E0                  	WRM
    1362/     47F : 63                  	INC R3
    1363/     480 : A3                  	LD R3
    1364/     481 : 1C 84               	JCN ZN, SHIFTR_NEXT      ; check if shift completed
    1365/     483 : FA                  	STC			; set flag to fill remaining bits with 0 
    1366/     484 :                     SHIFTR_NEXT:
    1367/     484 : 71 78               	ISZ R1, SHIFTR_LOOP
    1368/     486 :                     SHIFTR_EXIT:
    1369/     486 : C0                  	BBL 0
    1370/     487 :                     
    1371/     487 :                     ;;;---------------------------------------------------------------------------
    1372/     487 :                     ;;; SHIFT_FRACTION_LEFT_P0_ACC
    1373/     487 :                     ;;; shift fraction of the register to left with filling 0
    1374/     487 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1375/     487 :                     ;;; 	   ACC=shift count
    1376/     487 :                     ;;; working: P0(R0, R1), P1(R2, R3), P2(R4, R5), R15
    1377/     487 :                     ;;; destroy P1(R2, R3), P2, R15, R1 becomes 0 but R0 is not affected
    1378/     487 :                     ;;;---------------------------------------------------------------------------
    1379/     487 :                     SHIFT_FRACTION_LEFT_P0_ACC:
    1380/     487 : 14 A5               	JCN Z, SHIFTL_EXIT	; exit if ACC==0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 24 - 2023/02/24 22:59:16


    1381/     489 : B5                  	XCH R5			; R5 = ACC = shift
    1382/     48A : A0                  	LD R0
    1383/     48B : B2                  	XCH R2			; R2 = R0
    1384/     48C :                     
    1385/     48C : F0                  	CLB			; clear ACC and CY
    1386/     48D : B4                  	XCH R4			; R4=0 (R4=i, R5=i+shift)
    1387/     48E :                     SHIFTL_LOOP:			; for(i=0 to 15) P0(REG(~i))=P1(REG(~(i+shift))
    1388/     48E : D0                  	LDM 0
    1389/     48F : BF                  	XCH R15
    1390/     490 : 12 98               	JCN C, SHIFTL_WRITE
    1391/     492 :                     SHIFTL_READ:	
    1392/     492 : A5                  	LD R5
    1393/     493 : F4                  	CMA
    1394/     494 : B3                  	XCH R3			; R3 = ~R5 =~(i+shift)
    1395/     495 : 23                  	SRC P1
    1396/     496 : E9                  	RDM
    1397/     497 : BF                  	XCH R15
    1398/     498 :                     SHIFTL_WRITE:
    1399/     498 : A4                  	LD R4
    1400/     499 : F4                  	CMA
    1401/     49A : B1                  	XCH R1			; R1 = ~R4 =~i
    1402/     49B : 21                  	SRC P0
    1403/     49C : BF                  	XCH R15
    1404/     49D : E0                  	WRM
    1405/     49E : 65                  	INC R5
    1406/     49F : A5                  	LD R5
    1407/     4A0 : 1C A3               	JCN ZN, SHIFTL_NEXT	; check if shift completed
    1408/     4A2 : FA                  	STC			; set flag to fill remaining bits with 0 
    1409/     4A3 :                     SHIFTL_NEXT:
    1410/     4A3 : 74 8E               	ISZ R4, SHIFTL_LOOP
    1411/     4A5 :                     SHIFTL_EXIT:
    1412/     4A5 : C0                  	BBL 0
    1413/     4A6 :                     	
    1414/     4A6 :                     ;;;---------------------------------------------------------------------------
    1415/     4A6 :                     ;;; ALIGN_REGISTER_XY
    1416/     4A6 :                     ;;; align digit point to larger register
    1417/     4A6 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1418/     4A6 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1419/     4A6 :                     ;;; working: R10, R11
    1420/     4A6 :                     ;;;---------------------------------------------------------------------------
    1421/     4A6 :                     ALIGN_REGISTER_XY:
    1422/     4A6 : 2C 00               	FIM P6, REG_X
    1423/     4A8 : 2E 10               	FIM P7, REG_Y
    1424/     4AA : 2D                  	SRC P6
    1425/     4AB : EC                  	RD0
    1426/     4AC : BA                  	XCH R10			; R10 = expoenent of REG_P6
    1427/     4AD : 2F                  	SRC P7
    1428/     4AE : EC                  	RD0 
    1429/     4AF : BB                  	XCH R11			; R11 = expoenent of REG_P7
    1430/     4B0 :                     
    1431/     4B0 : AB                  	LD R11
    1432/     4B1 : F1                  	CLC
    1433/     4B2 : 9A                  	SUB R10
    1434/     4B3 : 12 C0               	JCN C, EY_GE_EX		; R11 >= R10
    1435/     4B5 :                     	;; R11 < R10
    1436/     4B5 : F4                  	CMA
    1437/     4B6 : F2                  	IAC
    1438/     4B7 : 20 10               	FIM P0, REG_Y
    1439/     4B9 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1440/     4BB : AA                  	LD R10
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 25 - 2023/02/24 22:59:16


    1441/     4BC : 2F                  	SRC P7
    1442/     4BD : E4                  	WR0
    1443/     4BE : 44 C7               	JUN ALIGN_EXIT
    1444/     4C0 :                     EY_GE_EX:
    1445/     4C0 : 20 00               	FIM P0, REG_X
    1446/     4C2 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1447/     4C4 : AB                  	LD R11
    1448/     4C5 : 2D                  	SRC P6
    1449/     4C6 : E4                  	WR0
    1450/     4C7 :                     ALIGN_EXIT:
    1451/     4C7 : C0                  	BBL 0
    1452/     4C8 :                     	
    1453/     4C8 :                     ;;;---------------------------------------------------------------------------
    1454/     4C8 :                     ;;; CLEAR_REGISTER_P0
    1455/     4C8 :                     ;;; Clear register
    1456/     4C8 :                     ;;; input: P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1457/     4C8 :                     ;;; output: ACC=0, R1=0, (R0 is not affected)
    1458/     4C8 :                     ;;;---------------------------------------------------------------------------
    1459/     4C8 :                     CLEAR_REGISTER_P0:
    1460/     4C8 : F0                  	CLB
    1461/     4C9 : 21                  	SRC P0
    1462/     4CA : E4                  	WR0
    1463/     4CB : E5                  	WR1
    1464/     4CC : E6                  	WR2
    1465/     4CD : E7                  	WR3
    1466/     4CE :                     ;;;---------------------------------------------------------------------------
    1467/     4CE :                     ;;; CLEAR_FRACTION_P0
    1468/     4CE :                     ;;;---------------------------------------------------------------------------
    1469/     4CE :                     CLEAR_FRACTION_P0:
    1470/     4CE : F0                  	CLB
    1471/     4CF :                     CLEAR_REGISTER_L0:
    1472/     4CF : 21                  	SRC P0
    1473/     4D0 : E0                  	WRM
    1474/     4D1 : 71 CF               	ISZ R1, CLEAR_REGISTER_L0
    1475/     4D3 : C0                  	BBL 0
    1476/     4D4 :                     
    1477/     4D4 :                     ;;;---------------------------------------------------------------------------
    1478/     4D4 :                     ;;; LD_REGISTER_P6_P7
    1479/     4D4 :                     ;;; load register REG(P7) to REG(P6) (REG_P6 <= REG_P7)
    1480/     4D4 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)) 
    1481/     4D4 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1482/     4D4 :                     ;;; output: ACC=0, R13=0, R15=0
    1483/     4D4 :                     ;;; destroy R13, R15 (R12 and R14 are not affected)
    1484/     4D4 :                     ;;;---------------------------------------------------------------------------
    1485/     4D4 :                     LD_REGISTER_P6_P7:
    1486/     4D4 :                     	;; copy status characters
    1487/     4D4 : 2F                  	SRC P7
    1488/     4D5 : EC                  	RD0
    1489/     4D6 : 2D                  	SRC P6
    1490/     4D7 : E4                  	WR0
    1491/     4D8 :                     
    1492/     4D8 : 2F                  	SRC P7
    1493/     4D9 : ED                  	RD1
    1494/     4DA : 2D                  	SRC P6
    1495/     4DB : E5                  	WR1
    1496/     4DC :                     
    1497/     4DC : 2F                  	SRC P7
    1498/     4DD : EE                  	RD2
    1499/     4DE : 2D                  	SRC P6
    1500/     4DF : E6                  	WR2
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 26 - 2023/02/24 22:59:16


    1501/     4E0 :                     
    1502/     4E0 : 2F                  	SRC P7
    1503/     4E1 : EF                  	RD3
    1504/     4E2 : 2D                  	SRC P6
    1505/     4E3 : E7                  	WR3
    1506/     4E4 :                     ;;;---------------------------------------------------------------------------
    1507/     4E4 :                     ;;; LD_FRACTION_P6_P7
    1508/     4E4 :                     ;;;---------------------------------------------------------------------------
    1509/     4E4 :                     LD_FRACTION_P6_P7
    1510/     4E4 :                     	; CLB
    1511/     4E4 :                     	; XCH R13			; clear R13
    1512/     4E4 :                     	; CLB
    1513/     4E4 :                     	; XCH R15			; clear R15
    1514/     4E4 :                     LD_FRACTION_L0:
    1515/     4E4 : 2F                  	SRC P7
    1516/     4E5 : E9                  	RDM			; read a digit from the source register
    1517/     4E6 : 2D                  	SRC P6
    1518/     4E7 : E0                  	WRM			; write the digit to memory
    1519/     4E8 : 6D                  	INC R13
    1520/     4E9 : 7F E4               	ISZ R15, LD_FRACTION_L0
    1521/     4EB :                     
    1522/     4EB : C0                  	BBL 0
    1523/     4EC :                     
    1524/     4EC :                     ;;;---------------------------------------------------------------------------
    1525/     4EC :                     ;;; ISZERO_REGISTER_P0
    1526/     4EC :                     ;;; check if REG(P0) == 0 or not
    1527/     4EC :                     ;;; return: ACC = (REG==0) ? 1 : 0;
    1528/     4EC :                     ;;; destroy: R1 (R0 is not affected)
    1529/     4EC :                     ;;;---------------------------------------------------------------------------
    1530/     4EC :                     ISZERO_REGISTER_P0:
    1531/     4EC : F0                  	CLB
    1532/     4ED : B1                  	XCH R1
    1533/     4EE :                     ISZERO_LOOP:
    1534/     4EE : 21                  	SRC P0
    1535/     4EF : E9                  	RDM
    1536/     4F0 : 1C F5               	JCN ZN, ISZERO_EXIT0
    1537/     4F2 : 71 EE               	ISZ R1, ISZERO_LOOP
    1538/     4F4 :                     
    1539/     4F4 : C1                  	BBL 1
    1540/     4F5 :                     ISZERO_EXIT0:
    1541/     4F5 : C0                  	BBL 0
    1542/     4F6 :                     	
    1543/     4F6 :                     ;;;---------------------------------------------------------------------------
    1544/     4F6 :                     ;;; CHANGE_SIGN_REG_X
    1545/     4F6 :                     ;;; X = -X
    1546/     4F6 :                     ;;; destroy: P7
    1547/     4F6 :                     ;;;---------------------------------------------------------------------------
    1548/     4F6 :                     CHANGE_SIGN_REG_X:
    1549/     4F6 : 2E 00               	FIM P7, REG_X
    1550/     4F8 : 2F                  	SRC P7
    1551/     4F9 : ED                  	RD1
    1552/     4FA : F4                  	CMA
    1553/     4FB : E5                  	WR1
    1554/     4FC : C0                  	BBL 0
    1555/     4FD :                     
    1556/     4FD :                     ;;;---------------------------------------------------------------------------
    1557/     4FD :                     ;;; CMDC_DIV
    1558/     4FD :                     ;;; X = Y / X
    1559/     4FD :                     ;;;---------------------------------------------------------------------------
    1560/     4FD :                     CMDC_DIV:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 27 - 2023/02/24 22:59:16


    1561/     4FD : 20 00               	FIM P0, REG_X
    1562/     4FF : 53 CA               	JMS NORMALIZE_REGISTER_P0
    1563/     501 : 54 EC               	JMS ISZERO_REGISTER_P0
    1564/     503 : 1C 41               	JCN ZN, CMDC_DIV_BY_ZERO
    1565/     505 :                     
    1566/     505 : 20 10               	FIM P0, REG_Y
    1567/     507 : 54 EC               	JMS ISZERO_REGISTER_P0
    1568/     509 : 1C 47               	JCN ZN, CMDC_DIVIDEND_ZERO
    1569/     50B :                     	
    1570/     50B : 2C 00               	FIM P6, REG_X
    1571/     50D : 2E 10               	FIM P7, REG_Y
    1572/     50F :                     
    1573/     50F : 55 80               	JMS GET_SIGN_PRODUCT_P6_P7
    1574/     511 : 2F                  	SRC P7
    1575/     512 : E5                  	WR1			; save sign to Y
    1576/     513 :                     	
    1577/     513 :                     	;; if devisor(REG_X) is less than 0.1,
    1578/     513 :                     	;; shift it left until it become equal or larger than 0.1
    1579/     513 :                     	;; and increment the exponent of devidend
    1580/     513 :                     	;; example
    1581/     513 :                     	;; X=0.0001 -> X=0.1000, exponent of Y += 3
    1582/     513 : 2D                  	SRC P6
    1583/     514 : EC                  	RD0			; check exponent of REG_X(devisor)
    1584/     515 : 1C 2A               	JCN ZN, DIV_FRAC_ADJ_EXP
    1585/     517 :                     DIV_LOOP_D14:
    1586/     517 :                     	;; increment exponent of Y
    1587/     517 : 2F                  	SRC P7			; Y
    1588/     518 : EC                  	RD0
    1589/     519 : F2                  	IAC
    1590/     51A : E4                  	WR0			; EXP(Y)++
    1591/     51B : 1A 1F               	JCN NC, DIV_LOOP_L0
    1592/     51D : D1                  	LDM REG_ERROR_OVERFLOW
    1593/     51E : E6                  	WR2			; set overflow flag, but continue calculation
    1594/     51F :                     DIV_LOOP_L0:
    1595/     51F : DE                  	LDM 14
    1596/     520 : BD                  	XCH R13
    1597/     521 : 2D                  	SRC P6			; X
    1598/     522 : E9                  	RDM			; ACC = D14 of X
    1599/     523 : 1C 3D               	JCN ZN, DIV_FRAC        ; exit loop and continue calculation
    1600/     525 : D1                  	LDM 1
    1601/     526 : 54 87               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1602/     528 : 45 17               	JUN DIV_LOOP_D14
    1603/     52A :                     
    1604/     52A :                     	; adjust exponent of Y
    1605/     52A :                     DIV_FRAC_ADJ_EXP:
    1606/     52A : 2D                  	SRC P6			; X
    1607/     52B : EC                  	RD0
    1608/     52C : F8                   	DAC
    1609/     52D : B0                  	XCH R0			; R0 = (exponent of X)-1
    1610/     52E : 2F                  	SRC P7
    1611/     52F : EC                  	RD0
    1612/     530 : F1                  	CLC
    1613/     531 : 90                  	SUB R0			; exp(Y) - exp(X)
    1614/     532 : E4                  	WR0
    1615/     533 : 12 3D               	JCN C, DIV_FRAC		; no borrow
    1616/     535 : F4                  	CMA
    1617/     536 : F2                  	IAC
    1618/     537 : 20 10               	FIM P0, REG_Y
    1619/     539 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift frac(Y) and set exp(Y)=0
    1620/     53B : F0                  	CLB
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 28 - 2023/02/24 22:59:16


    1621/     53C : E4                  	WR0
    1622/     53D :                     DIV_FRAC:
    1623/     53D : 55 4C               	JMS DIV_FRACTION_XY
    1624/     53F :                     	;; 	JUN DIV_FRACTION_XY
    1625/     53F :                     	;; RETURN_DIV_FRACTION_XY:	
    1626/     53F :                     	; normalize REG_X and clear REG_Y
    1627/     53F : 43 7E               	JUN CMDC_NORMALIZE_AND_POP
    1628/     541 :                     	
    1629/     541 :                     CMDC_DIV_BY_ZERO:
    1630/     541 : 20 00               	FIM P0, REG_X
    1631/     543 : 21                  	SRC P0
    1632/     544 : D2                  	LDM REG_ERROR_DIVBYZERO
    1633/     545 : E6                  	WR2			; set error flag
    1634/     546 : C0                  	BBL 0
    1635/     547 :                     CMDC_DIVIDEND_ZERO:
    1636/     547 : 20 00               	FIM P0, REG_X
    1637/     549 : 54 C8               	JMS CLEAR_REGISTER_P0
    1638/     54B : C0                  	BBL 0
    1639/     54C :                     	
    1640/     54C :                     ;;;---------------------------------------------------------------------------
    1641/     54C :                     ;;; DIV_FRACTION_XY
    1642/     54C :                     ;;; FRAC(X) = FRAC(Y) / FRAC(X)
    1643/     54C :                     ;;; working: P6, P7, P5, P0(for shift), P1 (for shift), P4(R8, R9)
    1644/     54C :                     ;;;---------------------------------------------------------------------------
    1645/     54C :                     ;;;  compare and subtract and count, and shift
    1646/     54C :                     ;;; 
    1647/     54C :                     ;;;  0EDCBA9876543210
    1648/     54C :                     ;;;  0edcba9876543210 -> E
    1649/     54C :                     ;;;
    1650/     54C :                     ;;;  0EDCBA9876543210
    1651/     54C :                     ;;;   0edcba987654321 -> D
    1652/     54C :                     ;;; 
    1653/     54C :                     ;;;  0EDCBA9876543210
    1654/     54C :                     ;;;    0edcba98765432 -> C
    1655/     54C :                     ;;; ...
    1656/     54C :                     ;;;  0EDCBA9876543210 -> 0
    1657/     54C :                     ;;;                0e
    1658/     54C :                     ;;;
    1659/     54C :                     ;;; e!=0
    1660/     54C :                     ;;;---------------------------------------------------------------------------
    1661/     54C :                     	
    1662/     54C :                     DIV_FRACTION_XY:
    1663/     54C : 2C 10               	FIM P6, REG_Y
    1664/     54E : 2E 00               	FIM P7, REG_X
    1665/     550 : 2A 40               	FIM P5, REG_M
    1666/     552 :                     
    1667/     552 : 20 40               	FIM P0, REG_M
    1668/     554 : 54 CE               	JMS CLEAR_FRACTION_P0
    1669/     556 :                     
    1670/     556 : D1                  	LDM 1
    1671/     557 : B8                  	XCH R8			; for i(R8)= 1 to 15;
    1672/     558 :                     DIV_LOOP:	
    1673/     558 : F0                  	CLB
    1674/     559 : B9                  	XCH R9			; counter R9 = 0
    1675/     55A :                     DIV_SUB_COUNT:
    1676/     55A : 53 B0               	JMS CMP_FRACTION_P6_P7	   ; Compare Y with X
    1677/     55C : 1A 68               	JCN CN, DIV_SUB_COUNT_EXIT ; jump if REG_Y < REG_X
    1678/     55E :                     
    1679/     55E :                     	;; check R9 is already 9
    1680/     55E :                     	;; it occurs when shifted divisor is truncated
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 29 - 2023/02/24 22:59:16


    1681/     55E :                     	;; (ex. previous loop 100/109 -> this loop 100/10)
    1682/     55E : D9                  	LDM 9
    1683/     55F : F1                  	CLC
    1684/     560 : 99                  	SUB R9
    1685/     561 : 14 68               	JCN Z, DIV_SUB_COUNT_EXIT
    1686/     563 :                     	
    1687/     563 : 53 9E               	JMS SUB_FRACTION_P6_P7	   ; Y = Y - X
    1688/     565 : 69                  	INC R9
    1689/     566 : 45 5A               	JUN DIV_SUB_COUNT
    1690/     568 :                     DIV_SUB_COUNT_EXIT:	
    1691/     568 : A8                  	LD R8
    1692/     569 : F4                  	CMA
    1693/     56A : BB                  	XCH R11			; R11 = 14, 13, ..., 0
    1694/     56B : 2B                  	SRC P5			; REG_M
    1695/     56C : A9                  	LD R9
    1696/     56D : E0                  	WRM			; REG_M(R11) = R9
    1697/     56E : D1                  	LDM 1
    1698/     56F : 20 00               	FIM P0, REG_X
    1699/     571 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; X=X/10
    1700/     573 :                     
    1701/     573 : 78 58               	ISZ R8, DIV_LOOP
    1702/     575 :                     
    1703/     575 : 2C 00               	FIM P6, REG_X
    1704/     577 : 2E 10               	FIM P7, REG_Y
    1705/     579 : 54 D4               	JMS LD_REGISTER_P6_P7	; copy exponent of Y to X
    1706/     57B : 2E 40               	FIM P7, REG_M
    1707/     57D : 54 E4               	JMS LD_FRACTION_P6_P7	; copy fraction of M to X
    1708/     57F :                     				; X need to be normalized
    1709/     57F : C0                  	BBL 0
    1710/     580 :                     	;; 	JUN RETURN_DIV_FRACTION_XY
    1711/     580 :                     
    1712/     580 :                     ;;;---------------------------------------------------------------------------
    1713/     580 :                     ;;; GET_SIGN_PRODUCT_P6_P7
    1714/     580 :                     ;;; calculate sign of the result for multiplication and division
    1715/     580 :                     ;;; result: ACC=0 (+) if REG(P6) and REG(P7) have the same sign (++or--)
    1716/     580 :                     ;;;            =15(-) if REG(P6) and REG(P7) have the different signs (+-or-+)
    1717/     580 :                     ;;; destroy: R0
    1718/     580 :                     ;;;---------------------------------------------------------------------------
    1719/     580 :                     GET_SIGN_PRODUCT_P6_P7:	
    1720/     580 :                     	;;  calculate sign of the result for multiplication and division
    1721/     580 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
    1722/     581 : ED                  	RD1
    1723/     582 : B0                  	XCH R0			; R0 = sign of X
    1724/     583 : 2F                  	SRC P7
    1725/     584 : ED                  	RD1			; sign of Y
    1726/     585 : F1                  	CLC
    1727/     586 : 90                  	SUB R0
    1728/     587 : 14 8A                	JCN Z, GET_SIGN_EXIT
    1729/     589 : CF                  	BBL 15			; negative sign
    1730/     58A :                     GET_SIGN_EXIT:
    1731/     58A : C0                  	BBL 0
    1732/     58B :                     
    1733/     58B :                     ;;;---------------------------------------------------------------------------
    1734/     58B :                     ;;; PRINT_REGISTER_WITH_NAME_P0
    1735/     58B :                     ;;; Print the contents of the number register
    1736/     58B :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1737/     58B :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1738/     58B :                     ;;; output: ACC=0
    1739/     58B :                     ;;;---------------------------------------------------------------------------
    1740/     58B :                     PRINT_REGISTER_WITH_NAME_P0:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 30 - 2023/02/24 22:59:16


    1741/     58B : 22 58               	FIM P1, 'X'
    1742/     58D : 56 28               	JMS PUTCHAR_P1
    1743/     58F : A0                  	LD R0
    1744/     590 : 56 4C               	JMS PRINT_ACC
    1745/     592 :                     ;;;---------------------------------------------------------------------------
    1746/     592 :                     ;;; PRINT_REGISTER_P0
    1747/     592 :                     ;;; Print the contents of the number register
    1748/     592 :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1749/     592 :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1750/     592 :                     ;;; output: ACC=0
    1751/     592 :                     ;;;---------------------------------------------------------------------------
    1752/     592 :                     	;;
    1753/     592 :                     PRINT_REGISTER_P0:
    1754/     592 : 22 3D               	FIM P1, '='
    1755/     594 : 21                  	SRC P0
    1756/     595 : EE                  	RD2
    1757/     596 : 14 9A               	JCN Z, PRINT_REGISTER_EQU_ERR
    1758/     598 : 22 45               	FIM P1, 'E'
    1759/     59A :                     PRINT_REGISTER_EQU_ERR
    1760/     59A : 56 28               	JMS PUTCHAR_P1
    1761/     59C :                     
    1762/     59C : 22 2B               	FIM P1, '+'
    1763/     59E : 21                  	SRC P0
    1764/     59F : ED                  	RD1
    1765/     5A0 : 14 A4               	JCN Z, PRINT_REGISTER_SGN
    1766/     5A2 : 22 2D               	FIM P1, '-'
    1767/     5A4 :                     PRINT_REGISTER_SGN:
    1768/     5A4 : 56 28               	JMS PUTCHAR_P1
    1769/     5A6 :                     	
    1770/     5A6 : 21                  	SRC P0
    1771/     5A7 : EC                  	RD0			
    1772/     5A8 : BA                  	XCH R10                 ; load R10=exponent
    1773/     5A9 :                     
    1774/     5A9 :                     	;; print first digit(D15) if it is not zero
    1775/     5A9 :                     	;; (it should be '0' if the number is normalized) 
    1776/     5A9 : DF                  	LDM 15
    1777/     5AA : B1                  	XCH R1
    1778/     5AB : 21                  	SRC P0
    1779/     5AC : E9                  	RDM
    1780/     5AD : 14 B1               	JCN Z, PRINT_CHECK_EXP
    1781/     5AF : 56 4C               	JMS PRINT_ACC
    1782/     5B1 :                     
    1783/     5B1 :                     PRINT_CHECK_EXP:		; print digit point if exponent is 0
    1784/     5B1 : AA                  	LD R10
    1785/     5B2 : 1C B8               	JCN ZN, PRINT_REGISTER_LOOP_SETUP
    1786/     5B4 : 22 2E               	FIM P1, '.'
    1787/     5B6 : 56 28               	JMS PUTCHAR_P1
    1788/     5B8 :                     
    1789/     5B8 :                     PRINT_REGISTER_LOOP_SETUP:
    1790/     5B8 : F0                  	CLB
    1791/     5B9 : D1                  	LDM 1
    1792/     5BA : BB                  	XCH R11			; R11 is loop counter start from 1
    1793/     5BB :                     PRINT_REGISTER_LOOP:
    1794/     5BB : DF                  	LDM 15
    1795/     5BC : F1                  	CLC
    1796/     5BD : 9B                  	SUB R11			; (R11 =  1, 2,...,15) 
    1797/     5BE : 14 D0               	JCN Z, PRINT_EXIT	; skip last digit
    1798/     5C0 : B1                  	XCH R1			; ( R1 = 14,13,..., 1)
    1799/     5C1 : 21                  	SRC P0
    1800/     5C2 : E9                  	RDM
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 31 - 2023/02/24 22:59:16


    1801/     5C3 : 56 4C               	JMS PRINT_ACC
    1802/     5C5 :                     
    1803/     5C5 : F0                  	CLB			; print digit point
    1804/     5C6 : AA                  	LD R10
    1805/     5C7 : 9B                  	SUB R11
    1806/     5C8 : 1C CE               	JCN ZN, PRINT_REGISTER_L1
    1807/     5CA : 22 2E               	FIM P1, '.'
    1808/     5CC : 56 28               	JMS PUTCHAR_P1
    1809/     5CE :                     PRINT_REGISTER_L1:
    1810/     5CE : 7B BB               	ISZ R11, PRINT_REGISTER_LOOP
    1811/     5D0 :                     PRINT_EXIT:	
    1812/     5D0 : C0                  	BBL 0
    1813/     5D1 :                     
    1814/     5D1 :                     ;;;----------------------------------------------------------------------------
    1815/     5D1 :                     ;;; I/O routines located in Page 0600H
    1816/     5D1 :                     ;;;----------------------------------------------------------------------------
    1817/     600 :                     	org 0600H
    1818/     600 :                     ;;;---------------------------------------------------------------------------
    1819/     600 :                     ;;; Software UART Routine
    1820/     600 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    1821/     600 :                     ;;; defined in separated file
    1822/     600 :                     ;;;---------------------------------------------------------------------------
    1823/     600 :                     ;;; supported baudrates are 4800bps or 9600bps
    1824/     600 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    1825/     600 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    1826/     600 :                     
    1827/     600 : =2580H               	switch BAUDRATE
    1828/     600 : =>FALSE              	case 4800
    1829/     600 :                     	include "4800bps.inc"
    1830/     600 : =>TRUE               	case 9600
    1831/     600 :                     	include "9600bps.inc"
(1)    1/     600 :                     ;;;---------------------------------------------------------------------------
(1)    2/     600 :                     ;;; getchar and putchar functions
(1)    3/     600 :                     ;;; baud rate = 9600bps
(1)    4/     600 :                     ;;; 8bit, no parity, stop 1
(1)    5/     600 :                     ;;;---------------------------------------------------------------------------
(1)    6/     600 :                     
(1)    7/     600 :                     ;;;---------------------------------------------------------------------------
(1)    8/     600 :                     ;;; GETCHAR_P1
(1)    9/     600 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     600 :                     ;;;
(1)   11/     600 :                     ;;; Input: none
(1)   12/     600 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     600 :                     ;;; Working: P6, P7
(1)   14/     600 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     600 :                     ;;; 
(1)   16/     600 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     600 :                     ;;; 
(1)   18/     600 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     600 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     600 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     600 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     600 :                     ;;;               |->phase delay
(1)   23/     600 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     600 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     600 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     600 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     600 :                     ;;;---------------------------------------------------------------------------
(1)   28/     600 :                     
(1)   29/     600 :                     GETCHAR_P1:
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 32 - 2023/02/24 22:59:16


(1)   30/     600 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     602 :                                                     ; 
(1)   32/     602 : 19 02                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     604 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     606 : 7F 06               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     608 :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     608 :                     GETCHAR_L1:
(1)   37/     608 : 19 0D               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     60A : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     60B : 46 10                       JUN GETCHAR_L3          ;<2>
(1)   40/     60D :                     GETCHAR_L2:
(1)   41/     60D : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     60E : 00                          NOP                     ;[1]
(1)   43/     60F : 00                          NOP                     ;[1]
(1)   44/     610 :                     GETCHAR_L3:
(1)   45/     610 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     611 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     612 : 7D 08                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     614 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     614 : B3                  	XCH R3                  ;(1)
(1)   50/     615 : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     617 :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     617 :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     617 :                     GETCHAR_L4:
(1)   54/     617 : 19 1C               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     619 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     61A : 46 1F                       JUN GETCHAR_L6          ;<2>
(1)   57/     61C :                     GETCHAR_L5:
(1)   58/     61C : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     61D : 00                          NOP                     ;[1]
(1)   60/     61E : 00                          NOP                     ;[1]
(1)   61/     61F :                     GETCHAR_L6:
(1)   62/     61F : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     620 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     621 : 7D 17                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     623 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     623 : B2                  	XCH R2                  ;(1)
(1)   67/     624 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     624 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     624 :                     	;; check stop bit
(1)   70/     624 : 19 27                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     626 : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     627 :                     GETCHAR_OK:
(1)   73/     627 : C0                  	BBL 0
(1)   74/     628 :                                     
(1)   75/     628 :                     ;;;---------------------------------------------------------------------------
(1)   76/     628 :                     ;;; PUTCHAR_P1
(1)   77/     628 :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     628 :                     ;;; 
(1)   79/     628 :                     ;;; Input: P1(R2,R3)
(1)   80/     628 :                     ;;; Output: ACC=0
(1)   81/     628 :                     ;;; Working: P6(R12R13), P7
(1)   82/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   83/     628 :                     ;;; P1 is not affected
(1)   84/     628 :                     ;;; 
(1)   85/     628 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     628 :                     ;;; 
(1)   87/     628 :                     ;;; Input: P1(R2,R3)
(1)   88/     628 :                     ;;; Output: ACC=0
(1)   89/     628 :                     ;;; Working: P6(R12R13), P7
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 33 - 2023/02/24 22:59:16


(1)   90/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   91/     628 :                     ;;;---------------------------------------------------------------------------
(1)   92/     628 :                     ;;; 
(1)   93/     628 :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     628 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     628 :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     628 :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     628 :                     ;;;---------------------------------------------------------------------------
(1)   98/     628 :                     
(1)   99/     628 :                     PUTCHAR_P1:
(1)  100/     628 : D1                  	LDM BANK_SERIAL     ; bank of output port
(1)  101/     629 : FD                          DCL                 ; set port bank
(1)  102/     62A :                     
(1)  103/     62A : 2E 40                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  104/     62C : 2F                  	SRC P7              ; set port address
(1)  105/     62D :                     
(1)  106/     62D : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  107/     62F : A3                          LD R3
(1)  108/     630 : F1                          CLC                 ; start bit is 0
(1)  109/     631 : F5                          RAL
(1)  110/     632 :                                     
(1)  111/     632 :                     PUTCHAR_L1:
(1)  112/     632 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  113/     633 : 00                          NOP                 ;(1)
(1)  114/     634 : 00                          NOP                 ;(1)
(1)  115/     635 : 00                          NOP                 ;(1)
(1)  116/     636 : 00                          NOP                 ;(1)
(1)  117/     637 : E1                          WMP                 ;(1)
(1)  118/     638 : F6                          RAR                 ;(1)
(1)  119/     639 : 7D 32                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  120/     63B :                     	
(1)  121/     63B : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  122/     63D : A2                          LD R2               ;(1)
(1)  123/     63E : FA                          STC                 ;(1) stop bit is 1
(1)  124/     63F : 00                  	NOP                 ;(1) timing adjustment
(1)  125/     640 : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  126/     641 :                     PUTCHAR_L2:
(1)  127/     641 : E1                  	WMP                 ;(1) 10cycle/bit
(1)  128/     642 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  129/     644 : 7F 44                       ISZ R15, $          ;(4)
(1)  130/     646 : F6                          RAR                 ;(1)
(1)  131/     647 : 7D 41                       ISZ R13, PUTCHAR_L2  ;(2)
(1)  132/     649 :                     	
(1)  133/     649 : D0                  	LDM BANK_DEFAULT    
(1)  134/     64A : FD                          DCL                 ; restore bank to default
(1)  135/     64B : C0                          BBL 0
(1)  136/     64C :                     
(1)  137/     64C :                     
    1832/     64C : [1827]               	endcase
    1833/     64C :                     
    1834/     64C :                     ;;;---------------------------------------------------------------------------
    1835/     64C :                     ;;; PRINT_ACC
    1836/     64C :                     ;;; print contents of ACC('0'...'F') as a character
    1837/     64C :                     ;;; destroy: P1, P6, P7, ACC
    1838/     64C :                     ;;;---------------------------------------------------------------------------
    1839/     64C :                     
    1840/     64C :                     PRINT_ACC:
    1841/     64C : 22 30               	FIM R2R3, 30H		;'0'
    1842/     64E : F1                  	CLC			; clear carry
    1843/     64F : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 34 - 2023/02/24 22:59:16


    1844/     650 : 1A 54               	JCN CN, PRINTACC_L1
    1845/     652 : 62                  	INC R2
    1846/     653 : F2                  	IAC
    1847/     654 :                     PRINTACC_L1:	
    1848/     654 : B3                  	XCH R3			; R3<-ACC
    1849/     655 : 46 28               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    1850/     657 :                     
    1851/     657 :                     ;;;---------------------------------------------------------------------------
    1852/     657 :                     ;;; PRINT_CRLF
    1853/     657 :                     ;;; print "\r\n"
    1854/     657 :                     ;;; destroy: P1, ACC
    1855/     657 :                     ;;; this routine consumes 2 PC stack
    1856/     657 :                     ;;;---------------------------------------------------------------------------
    1857/     657 :                     PRINT_CRLF:
    1858/     657 : 22 0D               	FIM P1, '\r'
    1859/     659 : 56 28               	JMS PUTCHAR_P1
    1860/     65B : 22 0A               	FIM P1, '\n'
    1861/     65D : 56 28               	JMS PUTCHAR_P1
    1862/     65F : C0                  	BBL 0
    1863/     660 :                     
    1864/     660 :                     ;;;---------------------------------------------------------------------------
    1865/     660 :                     ;;; PRINT_CR
    1866/     660 :                     ;;; print "\r"
    1867/     660 :                     ;;; destroy: P1, ACC
    1868/     660 :                     ;;; this routine consumes 1 PC stack
    1869/     660 :                     ;;;---------------------------------------------------------------------------
    1870/     660 :                     PRINT_CR:
    1871/     660 : 22 0D               	FIM P1, '\r'
    1872/     662 : 46 28               	JUN PUTCHAR_P1
    1873/     664 :                     
    1874/     664 :                     ;;;---------------------------------------------------------------------------
    1875/     664 :                     ;;; PRINT_LF
    1876/     664 :                     ;;; print "\n"
    1877/     664 :                     ;;; destroy: P1, ACC
    1878/     664 :                     ;;; this routine consumes 1 PC stack
    1879/     664 :                     ;;;---------------------------------------------------------------------------
    1880/     664 :                     PRINT_LF:
    1881/     664 : 22 0A               	FIM P1, '\n'
    1882/     666 : 46 28               	JUN PUTCHAR_P1
    1883/     668 :                     
    1884/     668 :                     ;;;---------------------------------------------------------------------------
    1885/     668 :                     ;;; INIT_SERIAL
    1886/     668 :                     ;;; Initialize serial port
    1887/     668 :                     ;;;---------------------------------------------------------------------------
    1888/     668 :                     
    1889/     668 :                     INIT_SERIAL:
    1890/     668 : D1                  	LDM BANK_SERIAL     ; bank of output port
    1891/     669 : FD                          DCL                 ; set port bank
    1892/     66A :                     	
    1893/     66A : 2E 40                       FIM P7, CHIP_SERIAL ; chip# of output port
    1894/     66C : 2F                  	SRC P7              ; set port address
    1895/     66D : D1                  	LDM 1
    1896/     66E : E1                          WMP                 ; set serial port to 1 (TTL->H)
    1897/     66F :                     
    1898/     66F : D0                  	LDM BANK_DEFAULT    
    1899/     670 : FD                          DCL                 ; restore bank to default
    1900/     671 :                     
    1901/     671 : C0                          BBL 0
    1902/     672 :                     
    1903/     672 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 35 - 2023/02/24 22:59:16


    1904/     672 :                     ;;; CTOI_P1
    1905/     672 :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    1906/     672 :                     ;;; input: P1(R2R3)
    1907/     672 :                     ;;; output: R3, (R2=0)
    1908/     672 :                     ;;;---------------------------------------------------------------------------
    1909/     672 :                     CTOI_P1:
    1910/     672 : F0                  	CLB
    1911/     673 : D3                  	LDM 3
    1912/     674 : 92                  	SUB R2
    1913/     675 : 14 7B               	JCN Z, CTOI_09		; check upper 4bit
    1914/     677 : F0                  	CLB
    1915/     678 : D9                  	LDM 9
    1916/     679 : 83                  	ADD R3
    1917/     67A : B3                  	XCH R3			; R3 = R3 + 9 for 'a-fA-F'
    1918/     67B :                     CTOI_09:
    1919/     67B : F0                  	CLB
    1920/     67C : B2                  	XCH R2			; R2 = 0
    1921/     67D : C0                  	BBL 0
    1922/     67E :                     	
    1923/     67E :                     ;;;----------------------------------------------------------------------------
    1924/     67E :                     ;;; DISPLED_P1
    1925/     67E :                     ;;;   DISPLAY the contents of P1 on Port 1 and 2
    1926/     67E :                     ;;; Input: P1(R2R3)
    1927/     67E :                     ;;; Output:  ACC=0
    1928/     67E :                     ;;; Working: P7
    1929/     67E :                     ;;; Destroy: P7
    1930/     67E :                     ;;;----------------------------------------------------------------------------
    1931/     67E :                     
    1932/     67E :                     DISPLED_P1:
    1933/     67E : D0                  	LDM BANK_RAM1
    1934/     67F : FD                          DCL
    1935/     680 : 2E 40                       FIM P7, CHIP_RAM1
    1936/     682 : 2F                          SRC P7
    1937/     683 : A3                          LD R3
    1938/     684 : E1                          WMP
    1939/     685 :                     	
    1940/     685 : D1                          LDM BANK_RAM2
    1941/     686 : FD                          DCL
    1942/     687 : 2E 00                       FIM P7, CHIP_RAM2
    1943/     689 : 2F                          SRC P7
    1944/     68A : A2                          LD R2
    1945/     68B : E1                          WMP
    1946/     68C :                     
    1947/     68C : D0                          LDM BANK_DEFAULT	; restore BANK to default
    1948/     68D : FD                  	DCL
    1949/     68E :                     	
    1950/     68E : C0                          BBL 0
    1951/     68F :                     
    1952/     68F :                     ;;;----------------------------------------------------------------------------
    1953/     68F :                     ;;; BLINK_LED
    1954/     68F :                     ;;;   Blink LED N times (N=ACC, N=16 if ACC==0)
    1955/     68F :                     ;;; Input: ACC
    1956/     68F :                     ;;; Output: ACC=0
    1957/     68F :                     ;;; Working: R11
    1958/     68F :                     ;;; Destroy: R11, P6, P7
    1959/     68F :                     ;;;----------------------------------------------------------------------------
    1960/     68F :                     
    1961/     68F :                     BLINK_LED:
    1962/     68F : F4                  	CMA
    1963/     690 : F2                  	IAC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 36 - 2023/02/24 22:59:16


    1964/     691 : BB                  	XCH R11         ; set counter=16-ACC
    1965/     692 :                     BLINK_L0	
    1966/     692 : D0                          LDM BANK_RAM1
    1967/     693 : 2E 40                       FIM P7, CHIP_RAM1
    1968/     695 : 56 A1                       JMS BLINK_SUB
    1969/     697 :                     
    1970/     697 : D1                          LDM BANK_RAM2
    1971/     698 : 2E 00                       FIM P7, CHIP_RAM2
    1972/     69A : 56 A1                       JMS BLINK_SUB
    1973/     69C :                     
    1974/     69C : 7B 92                       ISZ R11, BLINK_L0
    1975/     69E :                     
    1976/     69E : D0                  	LDM BANK_DEFAULT
    1977/     69F : FD                  	DCL
    1978/     6A0 :                     
    1979/     6A0 : C0                  	BBL 0
    1980/     6A1 :                     
    1981/     6A1 :                     BLINK_SUB:	
    1982/     6A1 : FD                          DCL
    1983/     6A2 : 2F                          SRC P7
    1984/     6A3 : D8                          LDM 8
    1985/     6A4 : E1                          WMP             ; LED(MSB) on
    1986/     6A5 : D8                          LDM 8
    1987/     6A6 : 56 AB                       JMS WAIT10MS    ; wait 80ms
    1988/     6A8 : D0                          LDM 0
    1989/     6A9 : E1                          WMP             ; LED off
    1990/     6AA : C0                          BBL 0
    1991/     6AB :                     
    1992/     6AB :                     ;;;----------------------------------------------------------------------------
    1993/     6AB :                     ;;; WAIT10MS
    1994/     6AB :                     ;;; Input: ACC
    1995/     6AB :                     ;;; Output: return with ACC=0
    1996/     6AB :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    1997/     6AB :                     ;;;   wait for 10 * N ms (N=ACC, N=16 if ACC==0)
    1998/     6AB :                     ;;; 
    1999/     6AB :                     ;;; Constants '45EF'(10ms) is calculated by Jim's 4004 Delay Loop Calculator
    2000/     6AB :                     ;;; https://github.com/jim11662418/4004-delay-calculator
    2001/     6AB :                     ;;;
    2002/     6AB :                     ;;; 10.8003857uS/cycle (@5.185MHz clock)
    2003/     6AB :                     ;;;----------------------------------------------------------------------------
    2004/     6AB :                                     
    2005/     6AB :                     WAIT10MS:
    2006/     6AB : 2C 45               	FIM R12R13, 045H  ; 9947us delay(921 cycles)
    2007/     6AD : 2E EF                       FIM R14R15, 0EFH  ; 
    2008/     6AF :                     W10_L1:
    2009/     6AF : 7C AF                	ISZ R12, W10_L1
    2010/     6B1 : 7D AF                       ISZ R13, W10_L1
    2011/     6B3 : 7E AF                       ISZ R14, W10_L1
    2012/     6B5 : 7F AF                       ISZ R15, W10_L1
    2013/     6B7 : F8                          DAC
    2014/     6B8 : 1C AB                       JCN ZN, WAIT10MS  ; 9979us delay(924 cycles)/loop
    2015/     6BA :                     W10_EXIT:
    2016/     6BA : C0                  	BBL 0
    2017/     6BB :                     
    2018/     6BB :                     ;;;----------------------------------------------------------------------------
    2019/     6BB :                     ;;; Print subroutine and string data located in Page 7 (0700H-07FFH)
    2020/     6BB :                     ;;; 
    2021/     6BB :                     ;;; The string data sould be located in the same page as the print routine.
    2022/     6BB :                     ;;;----------------------------------------------------------------------------
    2023/     700 :                             org 0700H
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 37 - 2023/02/24 22:59:16


    2024/     700 :                     ;;;----------------------------------------------------------------------------
    2025/     700 :                     ;;; PRINT_P0
    2026/     700 :                     ;;; Input: P0 (top of the string is 0700H+P0)
    2027/     700 :                     ;;; Working: P1(R2, R3)
    2028/     700 :                     ;;; Destroy: P1, P6, P7 (by PUTCHAR_P1), 
    2029/     700 :                     ;;;----------------------------------------------------------------------------
    2030/     700 :                     
    2031/     700 :                     PRINT_P0:
    2032/     700 : 32                          FIN P1			; P1=(P0)
    2033/     701 : A2                          LD R2
    2034/     702 : 14 0B                       JCN Z, P7_UPPER0	; R2==0
    2035/     704 :                     P7_PUT:
    2036/     704 : 56 28                       JMS PUTCHAR_P1             ; putchar(P1)
    2037/     706 : 71 00                       ISZ R1, PRINT_P0           ; P0=P0+1
    2038/     708 : 60                          INC R0
    2039/     709 : 47 00                       JUN PRINT_P0               ; print remaining string
    2040/     70B :                     P7_UPPER0:
    2041/     70B : A3                  	LD R3
    2042/     70C : 1C 04                       JCN ZN, P7_PUT     	; R3 != 0
    2043/     70E :                     P7_EXIT:
    2044/     70E : C0                          BBL 0                   ; exit if P1(R2,R3) == 0
    2045/     70F :                                     
    2046/     70F :                     ;;;----------------------------------------------------------------------------
    2047/     70F :                     ;;; String data
    2048/     70F :                     ;;;----------------------------------------------------------------------------
    2049/     70F :                     
    2050/     70F :                     STR_OMSG:
    2051/     70F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004)\r\nTiny Monitor\r\n", 0
              715 : 20 4D 43 53 2D 34 
              71B : 20 28 34 30 30 34 
              721 : 29 0D 0A 54 69 6E 
              727 : 79 20 4D 6F 6E 69 
              72D : 74 6F 72 0D 0A 00 
    2052/     733 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    2053/     733 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    2054/     738 :                     STR_BANK:
    2055/     738 : 20 42 41 4E 4B 3D   	data " BANK=", 0
              73E : 00                
    2056/     73F :                     STR_CHIP:
    2057/     73F : 20 43 48 49 50 3D   	data " CHIP=", 0
              745 : 00                
    2058/     746 :                     STR_ADD:
    2059/     746 : 20 41 44 44 28 46   	data " ADD(Fx0)=", 0
              74C : 78 30 29 3D 00    
    2060/     751 :                     STR_CALC:
    2061/     751 : 0D 0A 43 61 6C 63   	data "\r\nCalculator Mode\r\n", 0
              757 : 75 6C 61 74 6F 72 
              75D : 20 4D 6F 64 65 0D 
              763 : 0A 00             
    2062/     765 :                     STR_CMDERR:
    2063/     765 : 0D 0A 64 3A 64 75   	data "\r\nd:dump RAM, w:write RAM, W:Write PM, D:Dump PM\r\nC:Clear, c:Calc mode\r\n", 0 ;
              76B : 6D 70 20 52 41 4D 
              771 : 2C 20 77 3A 77 72 
              777 : 69 74 65 20 52 41 
              77D : 4D 2C 20 57 3A 57 
              783 : 72 69 74 65 20 50 
              789 : 4D 2C 20 44 3A 44 
              78F : 75 6D 70 20 50 4D 
              795 : 0D 0A 43 3A 43 6C 
              79B : 65 61 72 2C 20 63 
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 38 - 2023/02/24 22:59:16


              7A1 : 3A 43 61 6C 63 20 
              7A7 : 6D 6F 64 65 0D 0A 
              7AD : 00                
    2064/     7AE :                     STR_CALC_SQRT:
    2065/     7AE : 20 53 51 52 0D 0A   	data " SQR\r\n",0
              7B4 : 00                
    2066/     7B5 :                     
    2067/     7B5 :                     ;;;----------------------------------------------------------------------------
    2068/     7B5 :                     ;;; String data
    2069/     7B5 :                     ;;;----------------------------------------------------------------------------
    2070/     7B5 :                     	
    2071/     7B5 :                     ;;;---------------------------------------------------------------------------
    2072/     7B5 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    2073/     7B5 :                     ;;;---------------------------------------------------------------------------
    2074/     7B5 :                     ;;; READPM_P0
    2075/     7B5 :                     ;;; P1 = (P0)
    2076/     7B5 :                     ;;; input: P0
    2077/     7B5 :                     ;;; output: P1
    2078/     7B5 :                     ;;;---------------------------------------------------------------------------
    2079/     7B5 :                     ;;; 	org 0FF0H
    2080/     7B5 :                     ;;; PM_READ_P0_P1:
    2081/     7B5 : 32                  	FIN P1
    2082/     7B6 : C0                  	BBL 0
    2083/     7B7 :                     
    2084/     7B7 :                     	end
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 39 - 2023/02/24 22:59:16


  Symbol Table (* = unused):
  --------------------------

 ADD_FRACTION_P6_P7 :           38F C | *ADD_FRA_EXIT :                 39D C |
 ADD_FRA_LOOP :                 394 C |  ALIGN_EXIT :                   4C7 C |
 ALIGN_REGISTER_XY :            4A6 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - | *BANK_PMSELECT :                  0 - |
 BANK_RAM0 :                      0 - |  BANK_RAM1 :                      0 - |
 BANK_RAM2 :                      1 - |  BANK_RAM3 :                      1 - |
 BANK_SERIAL :                    1 - |  BAUDRATE :                    2580 - |
 BLINK_L0 :                     692 C |  BLINK_LED :                    68F C |
 BLINK_SUB :                    6A1 C | *CASESENSITIVE :                  0 - |
 CHANGE_SIGN_REG_X :            4F6 C |  CHIP_PMSELECT :                  0 - |
 CHIP_RAM0 :                      0 - |  CHIP_RAM1 :                     40 - |
 CHIP_RAM2 :                      0 - |  CHIP_RAM3 :                     40 - |
 CHIP_SERIAL :                   40 - |  CLEAR_FRACTION_P0 :            4CE C |
 CLEAR_REGISTER_L0 :            4CF C |  CLEAR_REGISTER_P0 :            4C8 C |
 CMDCL_L1 :                     1DB C |  CMDC_ADD :                     341 C |
 CMDC_ADD_EXIT :                376 C |  CMDC_ADD_SAMESIGN :            370 C |
 CMDC_ADD_ZERO_EXIT :           378 C |
 CMDC_AUTOMATIC_PUSH_AND_CLEAR :                                        2E6 C |
 CMDC_CLEAR :                   2FB C |
 CMDC_CLEAR_AUTOMATIC_ENTER_FLAG :                                      2E0 C |
 CMDC_DIGITPOINT :              2F5 C |  CMDC_DIV :                     4FD C |
 CMDC_DIVIDEND_ZERO :           547 C |  CMDC_DIV_BY_ZERO :             541 C |
*CMDC_DP_EXIT :                 2FA C |  CMDC_ENTER :                   30D C |
 CMDC_L1 :                      229 C |  CMDC_L10 :                     2C0 C |
 CMDC_L11 :                     2CA C |  CMDC_L2 :                      233 C |
 CMDC_L3 :                      243 C |  CMDC_L4 :                      253 C |
 CMDC_L5 :                      263 C |  CMDC_L6 :                      273 C |
 CMDC_L7 :                      27F C |  CMDC_L8 :                      28D C |
 CMDC_L81 :                     299 C |  CMDC_L9 :                      2A9 C |
 CMDC_LOOP :                    213 C |  CMDC_MUL :                     400 C |
 CMDC_MUL_EXIT :                422 C |  CMDC_MUL_L0 :                  420 C |
 CMDC_MUL_ZERO :                424 C |  CMDC_NORMALIZE_AND_POP :       37E C |
 CMDC_NUM :                     321 C |  CMDC_NUM_EXIT :                340 C |
 CMDC_PRINT :                   454 C |  CMDC_PUSH_EXIT :               2F4 C |
 CMDC_PUSH_L0 :                 2EC C |  CMDC_SETNUM :                  331 C |
 CMDC_SET_AUTOMATIC_ENTER_FLAG :                                        2DA C |
 CMDC_SQR_EXIT :                0FA C |  CMDC_SQR_LOOP :                0D2 C |
 CMDC_SQR_RETURN :              2A5 C |  CMDC_SQUAREROOT :              0C1 C |
 CMDC_START :                   206 C |  CMDC_SUB :                     46D C |
 CMDDP_L0 :                     1B0 C |  CMDDP_L1 :                     1BF C |
 CMDD_L1 :                      102 C |  CMDD_L2 :                      104 C |
 CMDWP_L1 :                     18E C |  CMDW_L1 :                      12C C |
 CMDW_L2 :                      12E C |  CMD_LOOP :                      13 C |
 CMD_SUB_X_Y :                  368 C | *CMD_SUB_Y_X :                  356 C |
 CMP_EXIT01 :                   0A8 C |  CMP_EXIT11 :                   0A9 C |
 CMP_FRACTION_EXIT10 :          3C8 C |  CMP_FRACTION_EXIT11 :          3C9 C |
 CMP_FRACTION_LOOP :            3B2 C |  CMP_FRACTION_NEXT :            3C5 C |
 CMP_FRACTION_P6_P7 :           3B0 C |  CMP_L1 :                       0A0 C |
 CMP_P0P1 :                      98 C |  COMMAND_BP :                   1E3 C |
 COMMAND_C :                    200 C |  COMMAND_CP :                   1D5 C |
 COMMAND_D :                    100 C |  COMMAND_DP :                   1AA C |
 COMMAND_G :                    1F6 C |  COMMAND_W :                    12A C |
 COMMAND_WP :                   16D C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CTOI_09 :                      67B C |
 CTOI_P1 :                      672 C | *DATE :                "2023/02/24" - |
 DISPLED_P1 :                   67E C |  DIV_FRAC :                     53D C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 40 - 2023/02/24 22:59:16


 DIV_FRACTION_XY :              54C C |  DIV_FRAC_ADJ_EXP :             52A C |
 DIV_LOOP :                     558 C |  DIV_LOOP_D14 :                 517 C |
 DIV_LOOP_L0 :                  51F C |  DIV_SUB_COUNT :                55A C |
 DIV_SUB_COUNT_EXIT :           568 C |  EY_GE_EX :                     4C0 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR_L1 :                   608 C |  GETCHAR_L2 :                   60D C |
 GETCHAR_L3 :                   610 C |  GETCHAR_L4 :                   617 C |
 GETCHAR_L5 :                   61C C |  GETCHAR_L6 :                   61F C |
 GETCHAR_OK :                   627 C |  GETCHAR_P1 :                   600 C |
 GET_SIGN_EXIT :                58A C |  GET_SIGN_PRODUCT_P6_P7 :       580 C |
*HAS64 :                          1 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  INIT_SERIAL :                  668 C |
*INSUPMODE :                      0 - |  ISNUM_FALSE :                  2D9 C |
 ISNUM_P1 :                     2CC C |  ISZERO_EXIT0 :                 4F5 C |
 ISZERO_LOOP :                  4EE C |  ISZERO_REGISTER_P0 :           4EC C |
 L0 :                            2F C |  L1 :                            39 C |
 L2 :                            43 C |  L3 :                            4B C |
 L4 :                            53 C |  L41 :                           5B C |
 L5 :                            63 C |  L6 :                            6B C |
 L9 :                            73 C |  LD_FRACTION_L0 :               4E4 C |
 LD_FRACTION_P6_P7 :            4E4 C |  LD_REGISTER_P6_P7 :            4D4 C |
*LISTON :                         1 - |  L_CR :                          17 C |
*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL_ADD_LOOP :                 448 C |  MUL_FRACTION_XY :              42A C |
 MUL_LOOP :                     43E C |  MUL_LOOP_NEXT :                44C C |
*NESTMAX :                      100 - |  NM_EXIT :                      3F1 C |
 NM_GO_SHIFT :                  3DC C |  NM_LOOP :                      3D2 C |
 NM_LOOP_ENTRY :                3DA C |  NM_NOERROR :                   3F0 C |
 NORMALIZE_REGISTER_P0 :        3CA C | *P7_EXIT :                      70E C |
 P7_PUT :                       704 C |  P7_UPPER0 :                    70B C |
*PADDING :                        1 - |  PM_READ_P0_P1 :               0FFE - |
 PM_SELECTBANK_ACC :            0BC C |  PM_TOP :                      0F00 - |
 PM_WRITE_P0_P1 :               0AA C |  PM_WRITE_READROUTINE :         0B0 C |
 PRINTACC_L1 :                  654 C |  PRINT_ACC :                    64C C |
 PRINT_CHECK_EXP :              5B1 C |  PRINT_CR :                     660 C |
 PRINT_CRLF :                   657 C |  PRINT_EXIT :                   5D0 C |
*PRINT_LF :                     664 C |  PRINT_P0 :                     700 C |
 PRINT_REGISTER_EQU_ERR :       59A C |  PRINT_REGISTER_L1 :            5CE C |
 PRINT_REGISTER_LOOP :          5BB C |  PRINT_REGISTER_LOOP_SETUP :    5B8 C |
 PRINT_REGISTER_P0 :            592 C |  PRINT_REGISTER_SGN :           5A4 C |
 PRINT_REGISTER_WITH_NAME_P0 :  58B C |  PUTCHAR_L1 :                   632 C |
 PUTCHAR_L2 :                   641 C |  PUTCHAR_P1 :                   628 C |
 REG_A :                         50 - |  REG_B :                         60 - |
*REG_C :                         70 - |  REG_ERROR_DIVBYZERO :            2 - |
 REG_ERROR_OVERFLOW :             1 - |  REG_M :                         40 - |
 REG_T :                         30 - |  REG_X :                          0 - |
 REG_Y :                         10 - |  REG_Z :                         20 - |
*RELAXED :                        0 - |  SETBANKCHIP_P5 :                79 C |
 SHIFTL_EXIT :                  4A5 C |  SHIFTL_LOOP :                  48E C |
 SHIFTL_NEXT :                  4A3 C | *SHIFTL_READ :                  492 C |
 SHIFTL_WRITE :                 498 C |  SHIFTR_EXIT :                  486 C |
 SHIFTR_LOOP :                  478 C |  SHIFTR_NEXT :                  484 C |
*SHIFTR_READ :                  47B C |  SHIFTR_WRITE :                 47D C |
 SHIFT_FRACTION_LEFT_P0_ACC :   487 C |  SHIFT_FRACTION_RIGHT_P0_ACC :  471 C |
 STR_ADD :                      746 C |  STR_BANK :                     738 C |
 STR_CALC :                     751 C |  STR_CALC_SQRT :                7AE C |
 STR_CHIP :                     73F C |  STR_CMDERR :                   765 C |
 STR_OMSG :                     70F C |  STR_VFD_INIT :                 733 C |
 SUB_FRACTION_P6_P7 :           39E C |  SUB_FRA_LOOP :                 3A4 C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 41 - 2023/02/24 22:59:16


*TIME :                  "22:59:16" - | *TRUE :                           1 - |
*VERSION :                     142F - | *W10_EXIT :                     6BA C |
 W10_L1 :                       6AF C |  WAIT10MS :                     6AB C |

    233 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 42 - 2023/02/24 22:59:16


  Register Definitions (* = unused):
  ----------------------------------

 P0 --> R0P                           |  P1 --> R1P                          
*P2 --> R2P                           |  P3 --> R3P                          
*P4 --> R4P                           |  P5 --> R5P                          
 P6 --> R6P                           |  P7 --> R7P                          
*R10 --> R10                          | *R10R11 --> R5P                      
*R11 --> R11                          | *R12 --> R12                         
*R12R13 --> R6P                       | *R13 --> R13                         
*R14 --> R14                          | *R14R15 --> R7P                      
*R15 --> R15                         

     17 definitions

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 43 - 2023/02/24 22:59:16


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
LO                                    |

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 44 - 2023/02/24 22:59:16


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   2222 lines source file
      2 passes
      0 errors
      0 warnings
