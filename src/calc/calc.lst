 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 1 - 2023/02/23 11:05:23


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with calculator program for Intel 4004 evaluation board
       3/       0 :                     ;;; by Ryo Mukai
       4/       0 :                     ;;; 2023/02/23
       5/       0 :                     ;;;---------------------------------------------------------------------------
       6/       0 :                     
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     ;;; This source can be assembled with the Macroassembler AS
       9/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      10/       0 :                     ;;;---------------------------------------------------------------------------
      11/       0 :                     ;;; Conditional jumps syntax for Macroassembler AS:
      12/       0 :                     ;;; JCN T     jump if TEST = 0 - most positive voltage or +5V
      13/       0 :                     ;;; JCN TN    jump if TEST = 1 - most negative voltage or -10V
      14/       0 :                     ;;; JCN C     jump if carry = 1
      15/       0 :                     ;;; JCN CN    jump if carry = 0
      16/       0 :                     ;;; JCN Z     jump if accumulator = 0
      17/       0 :                     ;;; JCN ZN    jump if accumulator != 0
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     
      20/       0 :                     	cpu 4004        ; AS's command to specify CPU
      21/       0 :                     
      22/       0 :                     ;;;---------------------------------------------------------------------------
      23/       0 :                     ;;; function for label to address for FIM&FIN
      24/       0 :                     ;;;---------------------------------------------------------------------------
      25/       0 :                     
      26/       0 :                     lo     	function x, ((x)&255)
      27/       0 :                     
      28/       0 :                     ;;;---------------------------------------------------------------------------
      29/       0 :                     ;;; functuon for setting counter for ISZ loop
      30/       0 :                     ;;;---------------------------------------------------------------------------
      31/       0 :                     
      32/       0 :                     loop 	function x, (16-(x))
      33/       0 :                     loops   function x,y, ((16-(x))<<4 + (16-(y)))
      34/       0 :                     
      35/       0 :                     ;;;---------------------------------------------------------------------------
      36/       0 :                     ;;; Alias for Registers and Register Pairs
      37/       0 :                     ;;;---------------------------------------------------------------------------
      38/       0 :                     
      39/       0 :                     ;;; Registers
      40/       0 : =R10                 R10	reg RA
      41/       0 : =R11                 R11     reg RB
      42/       0 : =R12                 R12     reg RC
      43/       0 : =R13                 R13 	reg RD
      44/       0 : =R14                 R14     reg RE
      45/       0 : =R15                 R15     reg RF
      46/       0 :                     
      47/       0 :                     ;;; Register Pairs
      48/       0 : =R0P                 P0      reg R0R1
      49/       0 : =R1P                 P1      reg R2R3
      50/       0 : =R2P                 P2      reg R4R5
      51/       0 : =R3P                 P3      reg R6R7
      52/       0 : =R4P                 P4      reg R8R9
      53/       0 : =R5P                 P5      reg RARB
      54/       0 : =R6P                 P6      reg RCRD
      55/       0 : =R7P                 P7      reg RERF
      56/       0 : =R5P                 R10R11  reg RARB
      57/       0 : =R6P                 R12R13  reg RCRD
      58/       0 : =R7P                 R14R15  reg RERF
      59/       0 :                     
      60/       0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 2 - 2023/02/23 11:05:23


      61/       0 :                     ;;; Hardware Configuration
      62/       0 :                     ;;;---------------------------------------------------------------------------
      63/       0 :                     
      64/       0 :                     ;;; BANK# for DCL
      65/       0 : =0H                  BANK_RAM0	equ 0
      66/       0 : =0H                  BANK_RAM1      	equ 0
      67/       0 : =1H                  BANK_RAM2      	equ 1
      68/       0 : =1H                  BANK_RAM3      	equ 1
      69/       0 :                     
      70/       0 :                     ;;; CHIP#=(D7.D6.000000)
      71/       0 : =0H                  CHIP_RAM0      	equ 00H
      72/       0 : =40H                 CHIP_RAM1      	equ 40H
      73/       0 : =0H                  CHIP_RAM2      	equ 00H
      74/       0 : =40H                 CHIP_RAM3      	equ 40H
      75/       0 :                     
      76/       0 :                     ;;; Serial Port (BANK# and CHIP#)
      77/       0 : =0H                  BANK_SERIAL     equ BANK_RAM0
      78/       0 : =0H                  CHIP_SERIAL     equ CHIP_RAM0
      79/       0 :                     
      80/       0 :                     ;;; Program Memory
      81/       0 : =0F00H               PM_TOP          equ 0F00H
      82/       0 : =0FFEH               PM_READ_P0_P1   equ 0FFEH
      83/       0 :                     
      84/       0 :                     ;;; Port for PM Bank Selection(BANK# and CHIP#)
      85/       0 : =0H                  BANK_PMSELECT     equ BANK_RAM1
      86/       0 : =40H                 CHIP_PMSELECT     equ CHIP_RAM1
      87/       0 :                     
      88/       0 :                     ;;; Default Bank
      89/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      90/       0 :                     		
      91/       0 :                     ;;;---------------------------------------------------------------------------
      92/       0 :                     ;;; Program Start
      93/       0 :                     ;;;---------------------------------------------------------------------------
      94/       0 :                     	org 0000H		; beginning of Program Memory
      95/       0 :                     
      96/       0 :                     MAIN:
      97/       0 : F0                          CLB
      98/       1 :                     
      99/       1 : =>FALSE              	if (BANK_DEFAULT != 0)
     100/       1 :                     	;; initialize DL to bank 0
     101/       1 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
     102/       1 :                     	;; except when in use for another banks.
     103/       1 :                     	LDM BANK_DEFAULT
     104/       1 :                     	DCL
     105/       1 : [99]                 	endif
     106/       1 :                     	
     107/       1 : 56 64               	JMS INIT_SERIAL ; Initialize Serial Port
     108/       3 :                     
     109/       3 : F0                  	CLB
     110/       4 : 50 BC               	JMS PM_SELECTBANK_ACC	 ; set bank of program memory 0
     111/       6 : 50 B0               	JMS PM_WRITE_READROUTINE ; write PM_READ code on program memory
     112/       8 :                     
     113/       8 :                     ;       JCN TN, $		wait for TEST="0" (button pressed)
     114/       8 : D2                          LDM 2
     115/       9 : 56 87                       JMS BLINK_LED   ; blink LED 2 times
     116/       B : 20 33               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     117/       D : 57 00                       JMS PRINT_P0;
     118/       F : 20 0F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     119/      11 : 57 00                       JMS PRINT_P0;
     120/      13 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 3 - 2023/02/23 11:05:23


     121/      13 :                     CMD_LOOP:
     122/      13 : 22 5D                       FIM P1, ']'		; prompt
     123/      15 : 56 28                       JMS PUTCHAR_P1
     124/      17 :                     
     125/      17 :                     L_CR:
     126/      17 : 56 00               	JMS GETCHAR_P1
     127/      19 : 56 76                       JMS DISPLED_P1
     128/      1B : 20 0D               	FIM P0, '\r'
     129/      1D : 50 98               	JMS CMP_P0P1
     130/      1F : 14 17               	JCN Z, L_CR		; skip CR
     131/      21 :                     
     132/      21 : 56 28               	JMS PUTCHAR_P1		; echo input
     133/      23 :                     
     134/      23 : 20 0A               	FIM P0, '\n'
     135/      25 : 50 98               	JMS CMP_P0P1
     136/      27 : 1C 2F               	JCN ZN, L0
     137/      29 : 22 0D               	FIM P1, '\r'
     138/      2B : 56 28               	JMS PUTCHAR_P1		; put CR
     139/      2D : 40 13               	JUN CMD_LOOP
     140/      2F :                     
     141/      2F :                     L0:
     142/      2F : 20 64               	FIM P0, 'd'		; dump data memory
     143/      31 : 50 98               	JMS CMP_P0P1
     144/      33 : 1C 39               	JCN ZN, L1
     145/      35 : 50 79               	JMS SETBANKCHIP_P5
     146/      37 : 41 00               	JUN COMMAND_D
     147/      39 :                     L1:
     148/      39 : 20 77               	FIM P0, 'w'		; write to data memory
     149/      3B : 50 98               	JMS CMP_P0P1
     150/      3D : 1C 43               	JCN ZN, L2
     151/      3F : 50 79               	JMS SETBANKCHIP_P5
     152/      41 : 41 2A               	JUN COMMAND_W
     153/      43 :                     L2:
     154/      43 : 20 44               	FIM P0, 'D'		; Dump program memory
     155/      45 : 50 98               	JMS CMP_P0P1
     156/      47 : 1C 4B               	JCN ZN, L3
     157/      49 : 41 AA               	JUN COMMAND_DP
     158/      4B :                     L3:
     159/      4B : 20 57               	FIM P0, 'W'		; Write Program memory
     160/      4D : 50 98               	JMS CMP_P0P1
     161/      4F : 1C 53               	JCN ZN, L4
     162/      51 : 41 6D               	JUN COMMAND_WP
     163/      53 :                     L4:
     164/      53 : 20 43               	FIM P0, 'C'		; Clear program memory
     165/      55 : 50 98               	JMS CMP_P0P1
     166/      57 : 1C 5B               	JCN ZN, L41
     167/      59 : 41 D5               	JUN COMMAND_CP
     168/      5B :                     L41:
     169/      5B : 20 42               	FIM P0, 'B'		; Set Bank of program memory
     170/      5D : 50 98               	JMS CMP_P0P1
     171/      5F : 1C 63               	JCN ZN, L5
     172/      61 : 41 E3               	JUN COMMAND_BP
     173/      63 :                     L5:
     174/      63 : 20 67               	FIM P0, 'g'		; Go to PM_TOP (0F00H)
     175/      65 : 50 98               	JMS CMP_P0P1
     176/      67 : 1C 6B               	JCN ZN, L6
     177/      69 : 41 F6               	JUN COMMAND_G
     178/      6B :                     L6:
     179/      6B : 20 63               	FIM P0, 'c'		; Calculator
     180/      6D : 50 98               	JMS CMP_P0P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 4 - 2023/02/23 11:05:23


     181/      6F : 1C 73               	JCN ZN, L9
     182/      71 : 42 00               	JUN COMMAND_C
     183/      73 :                     L9:
     184/      73 : 20 65               	FIM P0, lo(STR_CMDERR)
     185/      75 : 57 00               	JMS PRINT_P0
     186/      77 : 40 13               	JUN CMD_LOOP
     187/      79 :                     
     188/      79 :                     ;;;---------------------------------------------------------------------------
     189/      79 :                     ;;; SETBANKCHIP_P5
     190/      79 :                     ;;; Set #bank and #chip to R10 and R11
     191/      79 :                     ;;;---------------------------------------------------------------------------
     192/      79 :                     SETBANKCHIP_P5:
     193/      79 : 20 38               	FIM P0, lo(STR_BANK)	; print " BANK="
     194/      7B : 57 00               	JMS PRINT_P0
     195/      7D : 56 00               	JMS GETCHAR_P1
     196/      7F : 56 28               	JMS PUTCHAR_P1
     197/      81 : 56 6A               	JMS CTOI_P1
     198/      83 : A3                  	LD R3
     199/      84 : BA                  	XCH R10			; save BANK to R10
     200/      85 :                     
     201/      85 : 20 3F               	FIM P0, lo(STR_CHIP)	; print " CHIP="
     202/      87 : 57 00               	JMS PRINT_P0
     203/      89 : 56 00               	JMS GETCHAR_P1
     204/      8B : 56 28               	JMS PUTCHAR_P1
     205/      8D : 56 6A               	JMS CTOI_P1
     206/      8F : A3                  	LD R3
     207/      90 : F1                  	CLC
     208/      91 : F5                  	RAL
     209/      92 : F1                  	CLC
     210/      93 : F5                  	RAL
     211/      94 : BB                  	XCH R11 	;set D3D2.00@X2 to R11 (0000 or 0100 or 1000 or 1100)
     212/      95 : 56 53               	JMS PRINT_CRLF
     213/      97 : C0                  	BBL 0
     214/      98 :                     	
     215/      98 :                     ;;;---------------------------------------------------------------------------
     216/      98 :                     ;;; CMP_P0P1
     217/      98 :                     ;;; compare P0(R0R1) and P1(R2R3)
     218/      98 :                     ;;; input: P0, P1
     219/      98 :                     ;;; output: ACC=1,CY=0 if P0<P1
     220/      98 :                     ;;;         ACC=0,CY=1 if P0==P1 
     221/      98 :                     ;;;         ACC=1,CY=1 if P0>P1
     222/      98 :                     ;;; P0 - P1 (the carry bit is a complement of the borrow)
     223/      98 :                     ;;;---------------------------------------------------------------------------
     224/      98 :                     CMP_P0P1:
     225/      98 : F0                  	CLB
     226/      99 : A0                  	LD R0			
     227/      9A : 92                  	SUB R2			;R0-R2
     228/      9B : 14 A0               	JCN Z, CMP_L1
     229/      9D : 12 A9               	JCN C, CMP_EXIT11
     230/      9F : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     231/      A0 :                     CMP_L1:	
     232/      A0 : F0                  	CLB
     233/      A1 : A1                  	LD R1
     234/      A2 : 93                  	SUB R3			;R1-R3
     235/      A3 : 14 A8               	JCN Z, CMP_EXIT01
     236/      A5 : 12 A9               	JCN C, CMP_EXIT11
     237/      A7 : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     238/      A8 :                     CMP_EXIT01:
     239/      A8 : C0                  	BBL 0			;P0==P1, ACC=0, CY=1
     240/      A9 :                     CMP_EXIT11
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 5 - 2023/02/23 11:05:23


     241/      A9 : C1                  	BBL 1			;P0>P1,  ACC=1, CY=1
     242/      AA :                     	
     243/      AA :                     ;;;---------------------------------------------------------------------------
     244/      AA :                     ;;; PM_WRITE_P0_P1
     245/      AA :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
     246/      AA :                     ;;; (0F00H+P0) = P1
     247/      AA :                     ;;; input: P0, P1
     248/      AA :                     ;;; output: none
     249/      AA :                     ;;;---------------------------------------------------------------------------
     250/      AA :                     	
     251/      AA :                     PM_WRITE_P0_P1:
     252/      AA : 21                  	SRC P0
     253/      AB : A3                  	LD R3
     254/      AC : E3                  	WPM			; write lower 4bit
     255/      AD : A2                  	LD R2
     256/      AE : E3                  	WPM			; write higher 4bit
     257/      AF : C0                  	BBL 0
     258/      B0 :                     
     259/      B0 :                     ;;;---------------------------------------------------------------------------
     260/      B0 :                     ;;; PM_WRITE_READROUTINE
     261/      B0 :                     ;;; preparation for reading program memory
     262/      B0 :                     ;;;---------------------------------------------------------------------------
     263/      B0 :                     PM_WRITE_READROUTINE:	
     264/      B0 : 20 FE               	FIM P0, lo(PM_READ_P0_P1)
     265/      B2 : 22 32               	FIM P1, 32H		; FIN P1
     266/      B4 : 50 AA               	JMS PM_WRITE_P0_P1
     267/      B6 : 61                  	INC R1
     268/      B7 : 22 C0               	FIM P1, 0C0H		; BBL 0
     269/      B9 : 50 AA               	JMS PM_WRITE_P0_P1
     270/      BB : C0                  	BBL 0
     271/      BC :                     
     272/      BC :                     ;;;---------------------------------------------------------------------------
     273/      BC :                     ;;; PM_SELECTBANK_ACC
     274/      BC :                     ;;; Write ACC to RAM port (BANK_PMSELECT, CHIP_PMSELECT)
     275/      BC :                     ;;; to select a bank of program memory
     276/      BC :                     ;;; destroy: P7
     277/      BC :                     ;;;---------------------------------------------------------------------------
     278/      BC :                     PM_SELECTBANK_ACC:
     279/      BC : =>FALSE              	if (BANK_PMSELECT != BANK_DEFAULT)
     280/      BC :                     	XCH R15
     281/      BC :                     	LDM BANK_PMSELECT
     282/      BC :                     	DCL
     283/      BC :                     	XCH R15
     284/      BC : [279]                	endif 
     285/      BC :                     	
     286/      BC : 2E 40                       FIM P7, CHIP_PMSELECT
     287/      BE : 2F                          SRC P7
     288/      BF : E1                          WMP
     289/      C0 :                     	
     290/      C0 : =>FALSE              	if (BANK_PMSELECT != BANK_DEFAULT)
     291/      C0 :                     	LDM BANK_DEFAULT
     292/      C0 :                     	DCL
     293/      C0 : [290]                	endif
     294/      C0 : C0                  	BBL 0
     295/      C1 :                     ;;;---------------------------------------------------------------------------
     296/      C1 :                     ;;; CMDC_SQUAREROOT:
     297/      C1 :                     ;;; X = sqrt(X)
     298/      C1 :                     ;;; registers Y, Z, T are destroyed
     299/      C1 :                     ;;; this routine cannot be a subroutine because of the limitation of stack
     300/      C1 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 6 - 2023/02/23 11:05:23


     301/      C1 :                     CMDC_SQUAREROOT:
     302/      C1 : 20 30               	FIM P0, REG_T
     303/      C3 : 54 C8               	JMS CLEAR_REGISTER_P0
     304/      C5 : DE                  	LDM 14
     305/      C6 : B1                  	XCH R1
     306/      C7 : 21                  	SRC P0
     307/      C8 : D5                  	LDM 5
     308/      C9 : E0                  	WRM			; REG_T=0.5
     309/      CA :                     	
     310/      CA : 2C 50               	FIM P6, REG_A		; A = X
     311/      CC : 2E 00               	FIM P7, REG_X
     312/      CE : 54 D4               	JMS LD_REGISTER_P6_P7
     313/      D0 :                     
     314/      D0 : 26 C0               	FIM P3, loops(4, 16)
     315/      D2 :                     ; loop of "0.5 ENTER X ENTER A ENTER X / + *"
     316/      D2 :                     ; REG_T keeps 0.5 
     317/      D2 :                     CMDC_SQR_LOOP:	
     318/      D2 : 2C 20               	FIM P6, REG_Z		; Z = X
     319/      D4 : 2E 00               	FIM P7, REG_X
     320/      D6 : 54 D4               	JMS LD_REGISTER_P6_P7
     321/      D8 :                     
     322/      D8 : 2C 60               	FIM P6, REG_B		; B = X
     323/      DA : 54 D4               	JMS LD_REGISTER_P6_P7
     324/      DC :                     
     325/      DC : 2C 10               	FIM P6, REG_Y		; Y = A
     326/      DE : 2E 50               	FIM P7, REG_A
     327/      E0 : 54 D4               	JMS LD_REGISTER_P6_P7
     328/      E2 :                     
     329/      E2 : 54 FD               	JMS CMDC_DIV
     330/      E4 : 53 41               	JMS CMDC_ADD
     331/      E6 : 54 00               	JMS CMDC_MUL
     332/      E8 :                     
     333/      E8 : 20 00               	FIM P0, REG_X
     334/      EA : 55 92               	JMS PRINT_REGISTER_P0
     335/      EC : 56 5C               	JMS PRINT_CR
     336/      EE :                     
     337/      EE : 2C 60               	FIM P6, REG_B
     338/      F0 : 2E 00               	FIM P7, REG_X
     339/      F2 : 53 B0               	JMS CMP_FRACTION_P6_P7
     340/      F4 : 14 FA               	JCN Z, CMDC_SQR_EXIT
     341/      F6 :                     	
     342/      F6 : 77 D2               	ISZ R7, CMDC_SQR_LOOP
     343/      F8 : 76 D2               	ISZ R6, CMDC_SQR_LOOP
     344/      FA :                     	
     345/      FA :                     CMDC_SQR_EXIT:
     346/      FA : 42 A5               	JUN CMDC_SQR_RETURN
     347/      FC :                     
     348/      FC :                     ;;;---------------------------------------------------------------------------
     349/      FC :                     ;;; Monitor commands located in page 0100H
     350/      FC :                     ;;;---------------------------------------------------------------------------
     351/     100 :                     	org 0100H
     352/     100 :                     ;;;---------------------------------------------------------------------------
     353/     100 :                     ;;; COMMAND_D
     354/     100 :                     ;;; Dump Data RAM
     355/     100 :                     ;;; input:
     356/     100 :                     ;;; 	R10: #bank
     357/     100 :                     ;;; 	R11: #chip (D3.D2.0.0)
     358/     100 :                     ;;; working memory:
     359/     100 :                     ;;;     P0(R0R1): working for PRINT_P0
     360/     100 :                     ;;;     P1(R2R3): working for PUTCHAR_P1, PRINT_ACC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 7 - 2023/02/23 11:05:23


     361/     100 :                     ;;;     R4: loop counter for #REG (0.0.D1.D0)
     362/     100 :                     ;;;     R5: working for input
     363/     100 :                     ;;;     R6: working for SCR (R6=R11+R4)
     364/     100 :                     ;;;     R7: working for SCR #CHARACTER (D3.D2.D1.D0)@X3 (loop counter)
     365/     100 :                     ;;;         SCR R6R7
     366/     100 :                     ;;; 	R11: #CHIP (D3.D2.0.0)@X2
     367/     100 :                     ;;;     P6(R12R13): working for uart
     368/     100 :                     ;;;     P7(R14R15): working for uart
     369/     100 :                     ;;;---------------------------------------------------------------------------
     370/     100 :                     COMMAND_D:
     371/     100 :                     	;; PRINT 4 registers
     372/     100 : DC                  	LDM loop(4)		; 4 regs
     373/     101 : B4                  	XCH R4			; R4=loop(4)
     374/     102 :                     
     375/     102 :                     	;; PRINT 16 characters
     376/     102 :                     CMDD_L1:
     377/     102 : D0                  	LDM loop(16)		; 16 characters
     378/     103 : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     379/     104 :                     CMDD_L2:
     380/     104 : F0                  	CLB
     381/     105 : D4                  	LDM 4
     382/     106 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     383/     107 : F1                  	CLC
     384/     108 : 8B                  	ADD R11
     385/     109 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     386/     10A :                     	
     387/     10A : 27                  	SRC R6R7	; set address
     388/     10B : E9                  	RDM		; read data memory
     389/     10C : 56 48               	JMS PRINT_ACC
     390/     10E : 77 04               	ISZ R7,CMDD_L2
     391/     110 :                     
     392/     110 :                     	;; PRINT STATUS 
     393/     110 : 22 3A               	FIM P1, ':'
     394/     112 : 56 28               	JMS PUTCHAR_P1
     395/     114 : 27                  	SRC R6R7	; set address
     396/     115 : EC                  	RD0
     397/     116 : 56 48               	JMS PRINT_ACC
     398/     118 : 27                  	SRC R6R7	; set address
     399/     119 : ED                  	RD1
     400/     11A : 56 48               	JMS PRINT_ACC
     401/     11C : 27                  	SRC R6R7	; set address
     402/     11D : EE                  	RD2
     403/     11E : 56 48               	JMS PRINT_ACC
     404/     120 : 27                  	SRC R6R7	; set address
     405/     121 : EF                  	RD3
     406/     122 : 56 48               	JMS PRINT_ACC
     407/     124 : 56 53               	JMS PRINT_CRLF
     408/     126 :                     
     409/     126 : 74 02               	ISZ R4,CMDD_L1
     410/     128 : 40 13               	JUN CMD_LOOP		; return to command loop
     411/     12A :                     	
     412/     12A :                     ;;;---------------------------------------------------------------------------
     413/     12A :                     ;;; COMMAND_W:
     414/     12A :                     ;;; Write Data RAM
     415/     12A :                     ;;; input:
     416/     12A :                     ;;; 	R10: #bank
     417/     12A :                     ;;; 	R11: #chip (D3.D2.0.0)
     418/     12A :                     ;;;---------------------------------------------------------------------------
     419/     12A :                     COMMAND_W:
     420/     12A :                     	;; PRINT 4 registers
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 8 - 2023/02/23 11:05:23


     421/     12A : DC                  	LDM loop(4)		; 4 regs
     422/     12B : B4                  	XCH R4			; R4=loop(4)
     423/     12C :                     
     424/     12C :                     	;; PRINT 16 characters
     425/     12C :                     CMDW_L1:
     426/     12C : D0                  	LDM loop(16)		; 16 characters
     427/     12D : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     428/     12E :                     CMDW_L2:
     429/     12E : F0                  	CLB
     430/     12F : D4                  	LDM 4
     431/     130 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     432/     131 : F1                  	CLC
     433/     132 : 8B                  	ADD R11
     434/     133 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     435/     134 :                     
     436/     134 : 56 00               	JMS GETCHAR_P1
     437/     136 : 56 6A               	JMS CTOI_P1
     438/     138 :                     
     439/     138 : 27                  	SRC R6R7	; set address
     440/     139 : A3                  	LD R3
     441/     13A : E0                  	WRM			; write to memory
     442/     13B : 56 48               	JMS PRINT_ACC
     443/     13D : 77 2E               	ISZ R7,CMDW_L2
     444/     13F :                     
     445/     13F :                     	;; PRINT STATUS 
     446/     13F : 22 3A               	FIM P1, ':'
     447/     141 : 56 28               	JMS PUTCHAR_P1
     448/     143 :                     
     449/     143 : 56 00               	JMS GETCHAR_P1
     450/     145 : 56 6A               	JMS CTOI_P1
     451/     147 :                     
     452/     147 : 27                  	SRC R6R7	; set address
     453/     148 : A3                  	LD R3
     454/     149 : E4                  	WR0
     455/     14A : 56 48               	JMS PRINT_ACC
     456/     14C :                     
     457/     14C : 56 00               	JMS GETCHAR_P1
     458/     14E : 56 6A               	JMS CTOI_P1
     459/     150 :                     
     460/     150 : 27                  	SRC R6R7	; set address
     461/     151 : A3                  	LD R3
     462/     152 : E5                  	WR1
     463/     153 : 56 48               	JMS PRINT_ACC
     464/     155 :                     
     465/     155 : 56 00               	JMS GETCHAR_P1
     466/     157 : 56 6A               	JMS CTOI_P1
     467/     159 :                     
     468/     159 : 27                  	SRC R6R7	; set address
     469/     15A : A3                  	LD R3
     470/     15B : E6                  	WR2
     471/     15C : 56 48               	JMS PRINT_ACC
     472/     15E :                     
     473/     15E : 56 00               	JMS GETCHAR_P1
     474/     160 : 56 6A               	JMS CTOI_P1
     475/     162 :                     
     476/     162 : 27                  	SRC R6R7	; set address
     477/     163 : A3                  	LD R3
     478/     164 : E7                  	WR3
     479/     165 : 56 48               	JMS PRINT_ACC
     480/     167 : 56 53               	JMS PRINT_CRLF
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 9 - 2023/02/23 11:05:23


     481/     169 :                     
     482/     169 : 74 2C               	ISZ R4,CMDW_L1
     483/     16B :                     	
     484/     16B : 40 13               	JUN CMD_LOOP		; return to command loop
     485/     16D :                     
     486/     16D :                     ;;;---------------------------------------------------------------------------
     487/     16D :                     ;;; COMMAND_WP
     488/     16D :                     ;;; Write Program Memory
     489/     16D :                     ;;;---------------------------------------------------------------------------
     490/     16D :                     COMMAND_WP:
     491/     16D : 20 46               	FIM P0, lo(STR_ADD)	; print " ADD="
     492/     16F : 57 00               	JMS PRINT_P0
     493/     171 : 56 00               	JMS GETCHAR_P1
     494/     173 : 56 28               	JMS PUTCHAR_P1
     495/     175 : 56 6A               	JMS CTOI_P1
     496/     177 : A3                  	LD R3
     497/     178 : B5                  	XCH R5
     498/     179 : 56 53               	JMS PRINT_CRLF
     499/     17B :                     
     500/     17B : 22 46               	FIM P1,'F'
     501/     17D : 56 28               	JMS PUTCHAR_P1
     502/     17F : A5                  	LD R5
     503/     180 : 56 48               	JMS PRINT_ACC
     504/     182 : 22 30               	FIM P1,'0'
     505/     184 : 56 28               	JMS PUTCHAR_P1
     506/     186 : 22 3A               	FIM P1,':'
     507/     188 : 56 28               	JMS PUTCHAR_P1
     508/     18A :                     	
     509/     18A : A5                  	LD R5
     510/     18B : B0                  	XCH R0
     511/     18C :                     
     512/     18C : D0                  	LDM 0
     513/     18D : B1                  	XCH R1
     514/     18E :                     CMDWP_L1:
     515/     18E : 22 20               	FIM P1, ' '
     516/     190 : 56 28               	JMS PUTCHAR_P1
     517/     192 :                     
     518/     192 : 56 00               	JMS GETCHAR_P1
     519/     194 : 56 28               	JMS PUTCHAR_P1
     520/     196 : 56 6A               	JMS CTOI_P1
     521/     198 : A3                  	LD R3
     522/     199 : B4                  	XCH R4
     523/     19A :                     
     524/     19A : 56 00               	JMS GETCHAR_P1
     525/     19C : 56 28               	JMS PUTCHAR_P1
     526/     19E : 56 6A               	JMS CTOI_P1
     527/     1A0 :                     
     528/     1A0 : A4                  	LD R4
     529/     1A1 : B2                  	XCH R2
     530/     1A2 :                     
     531/     1A2 : 50 AA               	JMS PM_WRITE_P0_P1
     532/     1A4 : 71 8E               	ISZ R1, CMDWP_L1
     533/     1A6 :                     
     534/     1A6 : 56 53               	JMS PRINT_CRLF
     535/     1A8 :                     
     536/     1A8 : 40 13               	JUN CMD_LOOP		; return to command loop
     537/     1AA :                     
     538/     1AA :                     ;;;---------------------------------------------------------------------------
     539/     1AA :                     ;;; COMMAND_DP
     540/     1AA :                     ;;; Dump Program Memory
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 10 - 2023/02/23 11:05:23


     541/     1AA :                     ;;;---------------------------------------------------------------------------
     542/     1AA :                     COMMAND_DP:
     543/     1AA : 56 53               	JMS PRINT_CRLF
     544/     1AC :                     
     545/     1AC : 50 B0               	JMS PM_WRITE_READROUTINE
     546/     1AE :                     
     547/     1AE : 20 00               	FIM P0, 00H
     548/     1B0 :                     CMDDP_L0:
     549/     1B0 : 22 46               	FIM P1,'F'
     550/     1B2 : 56 28               	JMS PUTCHAR_P1
     551/     1B4 : A0                  	LD R0
     552/     1B5 : 56 48               	JMS PRINT_ACC
     553/     1B7 : 22 30               	FIM P1,'0'
     554/     1B9 : 56 28               	JMS PUTCHAR_P1
     555/     1BB : 22 3A               	FIM P1,':'
     556/     1BD : 56 28               	JMS PUTCHAR_P1
     557/     1BF :                     CMDDP_L1:	
     558/     1BF : 22 20               	FIM P1, ' '
     559/     1C1 : 56 28               	JMS PUTCHAR_P1
     560/     1C3 :                     
     561/     1C3 : 5F FE               	JMS PM_READ_P0_P1	; Read program memory
     562/     1C5 : A3                  	LD R3
     563/     1C6 : B5                  	XCH R5
     564/     1C7 : A2                  	LD R2
     565/     1C8 : 56 48               	JMS PRINT_ACC
     566/     1CA : A5                  	LD R5
     567/     1CB : 56 48               	JMS PRINT_ACC
     568/     1CD :                     
     569/     1CD : 71 BF               	ISZ R1, CMDDP_L1
     570/     1CF : 56 53               	JMS PRINT_CRLF
     571/     1D1 : 70 B0                       ISZ R0, CMDDP_L0
     572/     1D3 :                     	
     573/     1D3 : 40 13               	JUN CMD_LOOP		; return to command loop
     574/     1D5 :                     
     575/     1D5 :                     ;;;---------------------------------------------------------------------------
     576/     1D5 :                     ;;; COMMAND_CP
     577/     1D5 :                     ;;; Clear Program Memory
     578/     1D5 :                     ;;;---------------------------------------------------------------------------
     579/     1D5 :                     COMMAND_CP:
     580/     1D5 : 56 53               	JMS PRINT_CRLF
     581/     1D7 :                     
     582/     1D7 : 20 00               	FIM P0, 00H
     583/     1D9 : 22 00               	FIM P1, 00H
     584/     1DB :                     CMDCL_L1:
     585/     1DB : 50 AA               	JMS PM_WRITE_P0_P1
     586/     1DD : 71 DB               	ISZ R1, CMDCL_L1
     587/     1DF : 70 DB               	ISZ R0, CMDCL_L1
     588/     1E1 :                     	
     589/     1E1 : 40 13               	JUN CMD_LOOP		; return to command loop
     590/     1E3 :                     
     591/     1E3 :                     ;;;---------------------------------------------------------------------------
     592/     1E3 :                     ;;; COMMAND_BP
     593/     1E3 :                     ;;; Set a bank of program memory
     594/     1E3 :                     ;;;---------------------------------------------------------------------------
     595/     1E3 :                     COMMAND_BP:
     596/     1E3 : 20 38               	FIM P0, lo(STR_BANK)	; print " BANK="
     597/     1E5 : 57 00               	JMS PRINT_P0
     598/     1E7 : 56 00               	JMS GETCHAR_P1
     599/     1E9 : 56 28               	JMS PUTCHAR_P1
     600/     1EB : 56 6A               	JMS CTOI_P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 11 - 2023/02/23 11:05:23


     601/     1ED : A3                  	LD R3
     602/     1EE : 50 BC               	JMS PM_SELECTBANK_ACC
     603/     1F0 : 50 B0               	JMS PM_WRITE_READROUTINE
     604/     1F2 : 56 53               	JMS PRINT_CRLF
     605/     1F4 :                     
     606/     1F4 : 40 13               	JUN CMD_LOOP		; return to command loop
     607/     1F6 :                     	
     608/     1F6 :                     ;;;---------------------------------------------------------------------------
     609/     1F6 :                     ;;; COMMAND_G
     610/     1F6 :                     ;;; Go to Top of Program memory PM_TOP(0x0F00)
     611/     1F6 :                     ;;;---------------------------------------------------------------------------
     612/     1F6 :                     COMMAND_G:
     613/     1F6 : 56 53               	JMS PRINT_CRLF
     614/     1F8 : 5F 00               	JMS PM_TOP
     615/     1FA : 40 13               	JUN CMD_LOOP		; return to command loop
     616/     1FC :                     
     617/     1FC :                     ;;;---------------------------------------------------------------------------
     618/     1FC :                     ;;; Program for the Calculator Mode
     619/     1FC :                     ;;;---------------------------------------------------------------------------
     620/     200 :                     	org 0200H
     621/     200 :                     ;;;---------------------------------------------------------------------------
     622/     200 :                     ;;; Memory Resisters used in the calculator mode
     623/     200 :                     ;;;---------------------------------------------------------------------------
     624/     200 :                     ;;; Bank0, Chip 0
     625/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_X
     626/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_Y
     627/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_Z
     628/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_T
     629/     200 :                     ;;;---------------------------------------------------------------------------
     630/     200 :                     ;;; Bank0, Chip 1
     631/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_M (working for multiplication/division)
     632/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_A (working for square root)
     633/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_B
     634/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_C
     635/     200 :                     ;;;---------------------------------------------------------------------------
     636/     200 :                     ;;; Bank1, Chip 0
     637/     200 :                     ;;;---------------------------------------------------------------------------
     638/     200 :                     ;;; Bank1, Chip 1
     639/     200 :                     ;;;---------------------------------------------------------------------------
     640/     200 :                     ;;;---------------------------------------------------------------------------
     641/     200 :                     ;;; CHIP#(=D7.D6), REG#(=D5.D4) of number registers 
     642/     200 :                     ;;;---------------------------------------------------------------------------
     643/     200 : =0H                  REG_X  	equ (CHIP_RAM0+(0<<4))	; CHIP#.00.0000
     644/     200 : =10H                 REG_Y	equ (CHIP_RAM0+(1<<4))	; CHIP#.01.0000
     645/     200 : =20H                 REG_Z  	equ (CHIP_RAM0+(2<<4))	; CHIP#.10.0000
     646/     200 : =30H                 REG_T	equ (CHIP_RAM0+(3<<4))	; CHIP#.11.0000
     647/     200 :                     
     648/     200 : =40H                 REG_M	equ (CHIP_RAM1+(0<<4))	; CHIP#.00.0000
     649/     200 : =50H                 REG_A	equ (CHIP_RAM1+(1<<4))	; CHIP#.01.0000
     650/     200 : =60H                 REG_B	equ (CHIP_RAM1+(2<<4))	; CHIP#.10.0000
     651/     200 : =70H                 REG_C	equ (CHIP_RAM1+(3<<4))	; CHIP#.11.0000
     652/     200 :                     
     653/     200 :                     ;;;---------------------------------------------------------------------------
     654/     200 :                     ;;; Number expression (simple floating point)
     655/     200 :                     ;;;       1 11111
     656/     200 :                     ;;; char# 5 432109876543210
     657/     200 :                     ;;;  (+/-)D.DDDDDDDDDDDDDDD*(10^E)
     658/     200 :                     ;;; D0-15: Fraction (D15=most significant digit, D0=least significant digit)
     659/     200 :                     ;;; D15 denotes an integer part, but it shuld be zero except
     660/     200 :                     ;;; while calculating addition or multiplication.
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 12 - 2023/02/23 11:05:23


     661/     200 :                     ;;; It is used for avoiding overflow.
     662/     200 :                     ;;; The number is normalized so that D15 is zero and minimize exponent
     663/     200 :                     ;;; S0: Exponent (0 to 14)
     664/     200 :                     ;;; S1: Sign of the fraction (0=positive, 15=negative)
     665/     200 :                     ;;; S2: Error (0:no_error, 1:overflow, 2:divide_by_zero)
     666/     200 :                     ;;;---------------------------------------------------------------------------
     667/     200 :                     
     668/     200 :                     ; Error flags
     669/     200 : =1H                  REG_ERROR_OVERFLOW  equ 1
     670/     200 : =2H                  REG_ERROR_DIVBYZERO equ 2
     671/     200 :                     	
     672/     200 :                     ;;;---------------------------------------------------------------------------
     673/     200 :                     ;;;COMMAND_C
     674/     200 :                     ;;; 	Calculator
     675/     200 :                     ;;; P0(R0, R1): working for PRINT
     676/     200 :                     ;;; P1(R2, R3): working for PRINT, GETCHAR, PUTCHAR
     677/     200 :                     ;;; P2(R4, R5):
     678/     200 :                     ;;; P3(R6, R7):   
     679/     200 :                     ;;; 		  R6.bit0 = automatic ENTER flag (0:desable , 1:enable)
     680/     200 :                     ;;;               R6.bit1 = input full flag (0:not full, 1:full)
     681/     200 :                     ;;; 	          R6.bit3 = digit point flag(0:no dp, 1:dp set)
     682/     200 :                     ;;; 	          R7=digit counter for key input
     683/     200 :                     ;;; 		  REG_X is automatically cleared if R7 is 0 (first digit input)
     684/     200 :                     ;;; P4(R8,  R9):  register address and character index(mainly REG_X)
     685/     200 :                     ;;; P5(R10, R11): register address and character index(mainly REG_Y)
     686/     200 :                     ;;; P6(R12, R13): working for register operation
     687/     200 :                     ;;; P7(R14, R15): working for register operation
     688/     200 :                     ;;;---------------------------------------------------------------------------
     689/     200 :                     COMMAND_C:
     690/     200 : 20 51               	FIM P0, lo(STR_CALC)
     691/     202 : 57 00               	JMS PRINT_P0
     692/     204 :                     
     693/     204 : 52 FB               	JMS CMDC_CLEAR		; clear registers
     694/     206 :                     
     695/     206 :                     CMDC_START:
     696/     206 : A6                  	LD R6
     697/     207 : F6                  	RAR
     698/     208 : D0                  	LDM 0
     699/     209 : F5                  	RAL
     700/     20A : B6                  	XCH R6			; reset flags except for automatic ENTER flag
     701/     20B : F0                  	CLB
     702/     20C : B7                  	XCH R7			; set digit counter = 0
     703/     20D : 20 00               	FIM P0, REG_X
     704/     20F : 55 92               	JMS PRINT_REGISTER_P0	; print REG_X
     705/     211 : 56 53               	JMS PRINT_CRLF
     706/     213 :                     	
     707/     213 :                     CMDC_LOOP:		; loop for input digits to REG_X
     708/     213 : 56 00               	JMS GETCHAR_P1
     709/     215 : 56 76                       JMS DISPLED_P1
     710/     217 : 20 0D               	FIM P0, '\r'
     711/     219 : 50 98               	JMS CMP_P0P1
     712/     21B : 14 13               	JCN Z, CMDC_LOOP	; skip CR
     713/     21D :                     
     714/     21D : 20 0A               	FIM P0, '\n'		; 'ENTER' key
     715/     21F : 50 98               	JMS CMP_P0P1
     716/     221 : 1C 29               	JCN ZN, CMDC_L1
     717/     223 : 56 53               	JMS PRINT_CRLF
     718/     225 : 53 0D               	JMS CMDC_ENTER
     719/     227 : 42 06               	JUN CMDC_START
     720/     229 :                     CMDC_L1:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 13 - 2023/02/23 11:05:23


     721/     229 : 20 71               	FIM P0, 'q'		; quit
     722/     22B : 50 98               	JMS CMP_P0P1
     723/     22D : 1C 33               	JCN ZN, CMDC_L2
     724/     22F : 56 53               	JMS PRINT_CRLF
     725/     231 : 40 13               	JUN CMD_LOOP		; return to command loop
     726/     233 :                     CMDC_L2:	
     727/     233 : 20 2B               	FIM P0, '+'		; '+' key
     728/     235 : 50 98               	JMS CMP_P0P1
     729/     237 : 1C 43               	JCN ZN, CMDC_L3
     730/     239 : 56 28               	JMS PUTCHAR_P1
     731/     23B : 56 53               	JMS PRINT_CRLF
     732/     23D : 53 41               	JMS CMDC_ADD
     733/     23F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     734/     241 : 42 06               	JUN CMDC_START
     735/     243 :                     CMDC_L3:
     736/     243 : 20 2D               	FIM P0, '-'		; '-' key
     737/     245 : 50 98               	JMS CMP_P0P1
     738/     247 : 1C 53               	JCN ZN, CMDC_L4
     739/     249 : 56 28               	JMS PUTCHAR_P1
     740/     24B : 56 53               	JMS PRINT_CRLF
     741/     24D : 54 6D               	JMS CMDC_SUB
     742/     24F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     743/     251 : 42 06               	JUN CMDC_START
     744/     253 :                     CMDC_L4:
     745/     253 : 20 2A               	FIM P0, '*'		; '*' key
     746/     255 : 50 98               	JMS CMP_P0P1
     747/     257 : 1C 63               	JCN ZN, CMDC_L5
     748/     259 : 56 28               	JMS PUTCHAR_P1
     749/     25B : 56 53               	JMS PRINT_CRLF
     750/     25D : 54 00               	JMS CMDC_MUL
     751/     25F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     752/     261 : 42 06               	JUN CMDC_START
     753/     263 :                     CMDC_L5:
     754/     263 : 20 2F               	FIM P0, '/'		; '/' key
     755/     265 : 50 98               	JMS CMP_P0P1
     756/     267 : 1C 73               	JCN ZN, CMDC_L6
     757/     269 : 56 28               	JMS PUTCHAR_P1
     758/     26B : 56 53               	JMS PRINT_CRLF
     759/     26D : 54 FD               	JMS CMDC_DIV
     760/     26F : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     761/     271 : 42 06               	JUN CMDC_START
     762/     273 :                     CMDC_L6:
     763/     273 : 20 63               	FIM P0, 'c'		; clear
     764/     275 : 50 98               	JMS CMP_P0P1
     765/     277 : 1C 7F               	JCN ZN, CMDC_L7
     766/     279 : 56 53               	JMS PRINT_CRLF
     767/     27B : 52 FB               	JMS CMDC_CLEAR
     768/     27D : 42 06               	JUN CMDC_START
     769/     27F :                     CMDC_L7:
     770/     27F : 20 73               	FIM P0, 's'		; sign change
     771/     281 : 50 98               	JMS CMP_P0P1
     772/     283 : 1C 8D               	JCN ZN, CMDC_L8
     773/     285 :                     
     774/     285 : 54 F6               	JMS CHANGE_SIGN_REG_X
     775/     287 : 56 53               	JMS PRINT_CRLF
     776/     289 : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     777/     28B : 42 06               	JUN CMDC_START
     778/     28D :                     CMDC_L8:
     779/     28D : 20 70               	FIM P0, 'p'		; print registers
     780/     28F : 50 98               	JMS CMP_P0P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 14 - 2023/02/23 11:05:23


     781/     291 : 1C 99               	JCN ZN, CMDC_L81
     782/     293 : 56 53               	JMS PRINT_CRLF
     783/     295 : 54 54               	JMS CMDC_PRINT
     784/     297 : 42 06               	JUN CMDC_START
     785/     299 :                     CMDC_L81:
     786/     299 : 20 72               	FIM P0, 'r'		; square root
     787/     29B : 50 98               	JMS CMP_P0P1
     788/     29D : 1C A9               	JCN ZN, CMDC_L9
     789/     29F : 20 AE               	FIM P0, lo(STR_CALC_SQRT)
     790/     2A1 : 57 00               	JMS PRINT_P0
     791/     2A3 : 40 C1               	JUN CMDC_SQUAREROOT	; because of the limit of the stack,
     792/     2A5 :                     				; it cannot be a subroutine
     793/     2A5 :                     CMDC_SQR_RETURN:	
     794/     2A5 : 52 DA               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     795/     2A7 : 42 06               	JUN CMDC_START
     796/     2A9 :                     CMDC_L9:
     797/     2A9 : A6                  	LD R6			; check number full flag (R6.bit1)
     798/     2AA : F6                  	RAR			; no more '0-9' or '.' input
     799/     2AB : F6                  	RAR
     800/     2AC : 12 CA               	JCN C, CMDC_L11
     801/     2AE :                     
     802/     2AE : 20 2E               	FIM P0, '.'		; '.' digit point
     803/     2B0 : 50 98               	JMS CMP_P0P1
     804/     2B2 : 1C C0               	JCN ZN, CMDC_L10
     805/     2B4 : A6                  	LD R6
     806/     2B5 : F5                  	RAL
     807/     2B6 : 12 CA               	JCN C, CMDC_L11	; skip if digit point flag (R6.bit3) is already set
     808/     2B8 : 56 28               	JMS PUTCHAR_P1		; echo input
     809/     2BA : 52 E6               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     810/     2BC : 52 F5               	JMS CMDC_DIGITPOINT
     811/     2BE : 42 13               	JUN CMDC_LOOP
     812/     2C0 :                     	
     813/     2C0 :                     CMDC_L10:
     814/     2C0 : 52 CC               	JMS ISNUM_P1
     815/     2C2 : 14 CA               	JCN Z, CMDC_L11         ; skip if not a number
     816/     2C4 : 56 28               	JMS PUTCHAR_P1		; echo input
     817/     2C6 : 52 E6               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     818/     2C8 : 53 21               	JMS CMDC_NUM
     819/     2CA :                     CMDC_L11:
     820/     2CA : 42 13               	JUN CMDC_LOOP
     821/     2CC :                     
     822/     2CC :                     ;;;---------------------------------------------------------------------------
     823/     2CC :                     ;;; ISNUM_P1
     824/     2CC :                     ;;; check P1 '0' to '9' as a ascii character
     825/     2CC :                     ;;; return: ACC=0 if P1 is not a number
     826/     2CC :                     ;;;         ACC=1 if P1 is a number
     827/     2CC :                     ;;; destroy: P0
     828/     2CC :                     ;;;---------------------------------------------------------------------------
     829/     2CC :                     ISNUM_P1:
     830/     2CC : 20 2F               	FIM P0, '0'-1
     831/     2CE : 50 98               	JMS CMP_P0P1
     832/     2D0 : 12 D9               	JCN C, ISNUM_FALSE	; '0'-1 >= P1
     833/     2D2 : 20 39               	FIM P0, '9'
     834/     2D4 : 50 98               	JMS CMP_P0P1
     835/     2D6 : 1A D9               	JCN CN, ISNUM_FALSE	; '9' < P1
     836/     2D8 : C1                  	BBL 1			; P1 is a number
     837/     2D9 :                     ISNUM_FALSE:
     838/     2D9 : C0                  	BBL 0			; P1 is not a number
     839/     2DA :                     	
     840/     2DA :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 15 - 2023/02/23 11:05:23


     841/     2DA :                     ;;; CMDC_SET_AUTOMATIC_ENTER_FLAG
     842/     2DA :                     ;;;  set automatic ENTER flag
     843/     2DA :                     ;;;---------------------------------------------------------------------------
     844/     2DA :                     CMDC_SET_AUTOMATIC_ENTER_FLAG:	
     845/     2DA : A6                  	LD R6
     846/     2DB : F6                  	RAR
     847/     2DC : FA                  	STC
     848/     2DD : F5                  	RAL
     849/     2DE : B6                  	XCH R6
     850/     2DF : C0                  	BBL 0
     851/     2E0 :                     
     852/     2E0 :                     ;;;---------------------------------------------------------------------------
     853/     2E0 :                     ;;; CMDC_CLEAR_AUTOMATIC_ENTER_FLAG
     854/     2E0 :                     ;;; clear automatic ENTER flag
     855/     2E0 :                     ;;;---------------------------------------------------------------------------
     856/     2E0 :                     CMDC_CLEAR_AUTOMATIC_ENTER_FLAG:
     857/     2E0 : A6                  	LD R6
     858/     2E1 : F6                  	RAR
     859/     2E2 : F1                  	CLC
     860/     2E3 : F5                  	RAL
     861/     2E4 : B6                  	XCH R6
     862/     2E5 : C0                  	BBL 0
     863/     2E6 :                     
     864/     2E6 :                     ;;;---------------------------------------------------------------------------
     865/     2E6 :                     ;;; CMDC_AUTOMATIC_PUSH_AND_CLEAR
     866/     2E6 :                     ;;;   push REG_X and clear for the first '0-9' or '.' after operation
     867/     2E6 :                     ;;;---------------------------------------------------------------------------
     868/     2E6 :                     CMDC_AUTOMATIC_PUSH_AND_CLEAR:
     869/     2E6 : A6                  	LD R6                   ; check automatic ENTER flag (R6.bit0)
     870/     2E7 : F6                  	RAR
     871/     2E8 : 1A EC               	JCN CN, CMDC_PUSH_L0
     872/     2EA : 53 0D               	JMS CMDC_ENTER		; push ENTER key
     873/     2EC :                     
     874/     2EC :                     CMDC_PUSH_L0:
     875/     2EC : A7                  	LD R7                   ; check digit count
     876/     2ED : 1C F4               	JCN ZN,CMDC_PUSH_EXIT	; if R7 = 0 then R7++ and clear REG_X
     877/     2EF : 67                  	INC R7
     878/     2F0 : 20 00               	FIM P0, REG_X
     879/     2F2 : 54 C8               	JMS CLEAR_REGISTER_P0	; clear X for the first keyin
     880/     2F4 :                     CMDC_PUSH_EXIT
     881/     2F4 : C0                  	BBL 0
     882/     2F5 :                     
     883/     2F5 :                     ;;;---------------------------------------------------------------------------
     884/     2F5 :                     ;;; CMDC_DIGITPOINT
     885/     2F5 :                     ;;; set a digit point
     886/     2F5 :                     ;;;---------------------------------------------------------------------------
     887/     2F5 :                     CMDC_DIGITPOINT:
     888/     2F5 : A6                  	LD R6
     889/     2F6 : F5                  	RAL
     890/     2F7 : FA                  	STC			; set digit point flag R6.bit3
     891/     2F8 : F6                  	RAR
     892/     2F9 : B6                  	XCH R6                  
     893/     2FA :                     CMDC_DP_EXIT:	
     894/     2FA : C0                  	BBL 0
     895/     2FB :                     
     896/     2FB :                     ;;;---------------------------------------------------------------------------
     897/     2FB :                     ;;; CMDC_CLEAR
     898/     2FB :                     ;;; clear all registers
     899/     2FB :                     ;;;---------------------------------------------------------------------------
     900/     2FB :                     CMDC_CLEAR:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 16 - 2023/02/23 11:05:23


     901/     2FB : 20 00               	FIM P0, REG_X
     902/     2FD : 54 C8               	JMS CLEAR_REGISTER_P0
     903/     2FF : 20 10               	FIM P0, REG_Y
     904/     301 : 54 C8               	JMS CLEAR_REGISTER_P0
     905/     303 : 20 20               	FIM P0, REG_Z
     906/     305 : 54 C8               	JMS CLEAR_REGISTER_P0
     907/     307 : 20 30               	FIM P0, REG_T
     908/     309 : 54 C8               	JMS CLEAR_REGISTER_P0
     909/     30B :                     
     910/     30B : 42 E0               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     911/     30D :                     	
     912/     30D :                     ;;;---------------------------------------------------------------------------
     913/     30D :                     ;;; CMDC_ENTER
     914/     30D :                     ;;; Push register stack
     915/     30D :                     ;;; 	X=>Y=>Z=>T
     916/     30D :                     ;;;---------------------------------------------------------------------------
     917/     30D :                     CMDC_ENTER:
     918/     30D : 2C 30               	FIM P6, REG_T
     919/     30F : 2E 20               	FIM P7, REG_Z
     920/     311 : 54 D4               	JMS LD_REGISTER_P6_P7	; T<=Z
     921/     313 : 2C 20               	FIM P6, REG_Z
     922/     315 : 2E 10               	FIM P7, REG_Y
     923/     317 : 54 D4               	JMS LD_REGISTER_P6_P7	; Z<=Y
     924/     319 : 2C 10               	FIM P6, REG_Y
     925/     31B : 2E 00               	FIM P7, REG_X
     926/     31D : 54 D4               	JMS LD_REGISTER_P6_P7	; Y<=X
     927/     31F :                     
     928/     31F : 42 E0               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     929/     321 :                     	
     930/     321 :                     ;;;---------------------------------------------------------------------------
     931/     321 :                     ;;; CMDC_NUM
     932/     321 :                     ;;; enter a number to X
     933/     321 :                     ;;; input: P1=('0', ...'9') ASCII character
     934/     321 :                     ;;;        R7=digit count
     935/     321 :                     ;;;---------------------------------------------------------------------------
     936/     321 :                     CMDC_NUM:
     937/     321 : 56 6A               	JMS CTOI_P1
     938/     323 : A3                  	LD R3
     939/     324 :                     	;; 	LD R6			; check digit point flag (R6.bit3)
     940/     324 :                     	;; 	RAL
     941/     324 :                     	;; 	JCN C,CMDC_NUM_L1	; digit point flag is ture
     942/     324 :                     	;; 	LD R3			; when digit point frag is false,
     943/     324 :                     	;; 	JCN NZ, CMDC_NUM_L1	; ignore key in '0' if digit counter is 1
     944/     324 :                     	;; 	LD R7		
     945/     324 :                     	;; 	DAC
     946/     324 :                     	;; 	JCN Z, CMDC_NUM_EXIT
     947/     324 :                     	;; CMDC_NUM_L1:
     948/     324 :                     	;; operation is for R7-th digit of X
     949/     324 : 2E 00               	FIM P7, REG_X
     950/     326 : DF                  	LDM 15
     951/     327 : F1                  	CLC
     952/     328 : 97                  	SUB R7			
     953/     329 : BF                  	XCH R15                 ; P7=(REG_X).(#char=15-R7)
     954/     32A : 2F                  	SRC P7
     955/     32B :                     
     956/     32B : A6                  	LD R6
     957/     32C : F5                  	RAL			; check R6.bit3 (dp flag)
     958/     32D : 12 31               	JCN C, CMDC_SETNUM	; if dp flag is true, exponent is not updated
     959/     32F :                     	;; set exponent of X
     960/     32F : A7                  	LD R7
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 17 - 2023/02/23 11:05:23


     961/     330 : E4                  	WR0
     962/     331 :                     CMDC_SETNUM:
     963/     331 : A3                  	LD R3
     964/     332 : E0                  	WRM
     965/     333 : 67                  	INC R7
     966/     334 : DF                  	LDM 15			; maximum number of digits is 14,
     967/     335 : F1                  	CLC			; so set digit full flag when R7 becomes 15
     968/     336 : 97                  	SUB R7
     969/     337 : 1C 40               	JCN ZN, CMDC_NUM_EXIT
     970/     339 :                     	;; set digit full flag R6.bit1
     971/     339 : A6                  	LD R6
     972/     33A : F6                  	RAR
     973/     33B : F6                  	RAR
     974/     33C : FA                  	STC
     975/     33D : F5                  	RAL
     976/     33E : F5                  	RAL
     977/     33F : B6                  	XCH R6
     978/     340 :                     CMDC_NUM_EXIT:
     979/     340 : C0                  	BBL 0
     980/     341 :                     
     981/     341 :                     ;;;---------------------------------------------------------------------------
     982/     341 :                     ;;; CMDC_ADD
     983/     341 :                     ;;; X = X + Y
     984/     341 :                     ;;;---------------------------------------------------------------------------
     985/     341 :                     CMDC_ADD:
     986/     341 : 54 A6               	JMS ALIGN_REGISTER_XY
     987/     343 :                     
     988/     343 : 2C 00               	FIM P6, REG_X
     989/     345 : 2E 10               	FIM P7, REG_Y
     990/     347 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
     991/     348 : ED                  	RD1
     992/     349 : B0                  	XCH R0			; R0 = sign of X
     993/     34A : 2F                  	SRC P7
     994/     34B : ED                  	RD1
     995/     34C : F1                  	CLC
     996/     34D : 90                  	SUB R0
     997/     34E : 14 70                	JCN Z, CMDC_ADD_SAMESIGN
     998/     350 :                     
     999/     350 : 53 B0               	JMS CMP_FRACTION_P6_P7
    1000/     352 : 14 78               	JCN Z, CMDC_ADD_ZERO_EXIT
    1001/     354 : 12 68               	JCN C, CMD_SUB_X_Y	; P6 > P7
    1002/     356 :                     CMD_SUB_Y_X:
    1003/     356 : 2C 40               	FIM P6, REG_M		; swap X and Y
    1004/     358 : 2E 00               	FIM P7, REG_X
    1005/     35A : 54 D4               	JMS LD_REGISTER_P6_P7	; M<=X
    1006/     35C : 2C 00               	FIM P6, REG_X
    1007/     35E : 2E 10               	FIM P7, REG_Y
    1008/     360 : 54 D4               	JMS LD_REGISTER_P6_P7	; X<=Y
    1009/     362 : 2C 10               	FIM P6, REG_Y
    1010/     364 : 2E 40               	FIM P7, REG_M
    1011/     366 : 54 D4               	JMS LD_REGISTER_P6_P7	; Y<=M
    1012/     368 :                     
    1013/     368 :                     CMD_SUB_X_Y:	
    1014/     368 : 2C 00               	FIM P6, REG_X
    1015/     36A : 2E 10               	FIM P7, REG_Y
    1016/     36C : 53 9E               	JMS SUB_FRACTION_P6_P7
    1017/     36E :                     
    1018/     36E : 43 76               	JUN CMDC_ADD_EXIT
    1019/     370 :                     
    1020/     370 :                     CMDC_ADD_SAMESIGN:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 18 - 2023/02/23 11:05:23


    1021/     370 : 2C 00               	FIM P6, REG_X
    1022/     372 : 2E 10               	FIM P7, REG_Y
    1023/     374 : 53 8F               	JMS ADD_FRACTION_P6_P7
    1024/     376 :                     	
    1025/     376 :                     CMDC_ADD_EXIT:
    1026/     376 : 43 7E               	JUN CMDC_NORMALIZE_AND_POP
    1027/     378 :                     
    1028/     378 :                     CMDC_ADD_ZERO_EXIT:
    1029/     378 : 20 00               	FIM P0, REG_X
    1030/     37A : 54 C8               	JMS CLEAR_REGISTER_P0
    1031/     37C : 43 76               	JUN CMDC_ADD_EXIT
    1032/     37E :                     
    1033/     37E :                     ;;;---------------------------------------------------------------------------
    1034/     37E :                     ;;; CMDC_NORMALIZE_AND_POP
    1035/     37E :                     ;;; Common routine for finish calculation
    1036/     37E :                     ;;; Normalize REG_X
    1037/     37E :                     ;;; Pop registers
    1038/     37E :                     ;;; REG_Y<= REG_Z<=REG_T
    1039/     37E :                     ;;;---------------------------------------------------------------------------
    1040/     37E :                     CMDC_NORMALIZE_AND_POP:
    1041/     37E : 20 00                	FIM P0, REG_X
    1042/     380 : 53 CA                	JMS NORMALIZE_REGISTER_P0
    1043/     382 :                     
    1044/     382 : 2C 10               	FIM P6, REG_Y
    1045/     384 : 2E 20               	FIM P7, REG_Z
    1046/     386 : 54 D4               	JMS LD_REGISTER_P6_P7 	; Y<=Z
    1047/     388 :                     
    1048/     388 : 2C 20               	FIM P6, REG_Z
    1049/     38A : 2E 30               	FIM P7, REG_T
    1050/     38C : 54 D4               	JMS LD_REGISTER_P6_P7 	; Z<=T
    1051/     38E :                     
    1052/     38E : C0                  	BBL 0
    1053/     38F :                     	
    1054/     38F :                     ;;;---------------------------------------------------------------------------
    1055/     38F :                     ;;; ADD_FRACTION_P6_P7
    1056/     38F :                     ;;; Add fraction of two registers
    1057/     38F :                     ;;; REG(P6) = REG(P6) + REG(P7)
    1058/     38F :                     ;;; register should be normalized so that D15 = 0
    1059/     38F :                     ;;; in order to avoid overflow
    1060/     38F :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
    1061/     38F :                     ;;;---------------------------------------------------------------------------
    1062/     38F :                     ADD_FRACTION_P6_P7:
    1063/     38F : F0                  	CLB
    1064/     390 : BD                  	XCH R13
    1065/     391 : F0                  	CLB
    1066/     392 : BF                  	XCH R15
    1067/     393 : F0                  	CLB
    1068/     394 :                     ADD_FRA_LOOP:
    1069/     394 : 2F                  	SRC P7
    1070/     395 : E9                  	RDM
    1071/     396 : 2D                  	SRC P6
    1072/     397 : EB                  	ADM
    1073/     398 : FB                  	DAA
    1074/     399 : E0                  	WRM
    1075/     39A : 6D                  	INC R13
    1076/     39B : 7F 94               	ISZ R15, ADD_FRA_LOOP
    1077/     39D :                     ADD_FRA_EXIT:	
    1078/     39D : C0                  	BBL 0
    1079/     39E :                     	
    1080/     39E :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 19 - 2023/02/23 11:05:23


    1081/     39E :                     ;;; SUB_FRACTION_P6_P7
    1082/     39E :                     ;;; subtract fraction
    1083/     39E :                     ;;; REG(P6) = REG(P6) - REG(P7)
    1084/     39E :                     ;;; REG(P6) should be equal or larger than REG(P7)
    1085/     39E :                     ;;; in order to avoid underflow
    1086/     39E :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
    1087/     39E :                     ;;;---------------------------------------------------------------------------
    1088/     39E :                     ;;; Reference
    1089/     39E :                     ;;; "Intel MCS-4 Assembly Language Programming Manual" Dec.1973,
    1090/     39E :                     ;;; 4.8 Decimal Subtraction, pp.4-20--23
    1091/     39E :                     ;;;---------------------------------------------------------------------------
    1092/     39E :                     SUB_FRACTION_P6_P7:
    1093/     39E : F0                  	CLB
    1094/     39F : BD                  	XCH R13
    1095/     3A0 : F0                  	CLB
    1096/     3A1 : BF                  	XCH R15
    1097/     3A2 : F0                  	CLB
    1098/     3A3 : FA                  	STC
    1099/     3A4 :                     SUB_FRA_LOOP:
    1100/     3A4 : F9                  	TCS
    1101/     3A5 : 2F                  	SRC P7
    1102/     3A6 : E8                  	SBM
    1103/     3A7 :                     
    1104/     3A7 : F1                  	CLC
    1105/     3A8 : 2D                  	SRC P6
    1106/     3A9 : EB                  	ADM
    1107/     3AA :                     
    1108/     3AA : FB                  	DAA
    1109/     3AB : E0                  	WRM
    1110/     3AC : 6D                  	INC R13
    1111/     3AD : 7F A4               	ISZ R15, SUB_FRA_LOOP
    1112/     3AF : C0                  	BBL 0
    1113/     3B0 :                     
    1114/     3B0 :                     ;;;---------------------------------------------------------------------------
    1115/     3B0 :                     ;;; CMP_FRACTION_P6_P7
    1116/     3B0 :                     ;;; compare fraction of REG(P6) and REG(P7)
    1117/     3B0 :                     ;;; output: ACC=1,CY=0 if REG(P6) < REG(P7)
    1118/     3B0 :                     ;;;         ACC=0,CY=1 if REG(P6)== REG(P7)
    1119/     3B0 :                     ;;;         ACC=1,CY=1 if REG(P6) > REG(P7)
    1120/     3B0 :                     ;;; REG(P6) - (P7) (the carry bit is a complement of the borrow)
    1121/     3B0 :                     ;;; working: R0, R1
    1122/     3B0 :                     ;;; destroy: P0, R13, R15, (R12 and R14 are not affected)
    1123/     3B0 :                     ;;;---------------------------------------------------------------------------
    1124/     3B0 :                     CMP_FRACTION_P6_P7:	
    1125/     3B0 : F0                  	CLB
    1126/     3B1 : B0                  	XCH R0			; R0 = 0
    1127/     3B2 :                     
    1128/     3B2 :                     CMP_FRACTION_LOOP:		; for i(R0)=0 to 15
    1129/     3B2 : A0                  	LD R0
    1130/     3B3 : F4                  	CMA
    1131/     3B4 : BD                  	XCH R13
    1132/     3B5 : 2D                  	SRC P6
    1133/     3B6 : E9                  	RDM
    1134/     3B7 : B1                  	XCH R1			; R1=REG(P6)[15-i]
    1135/     3B8 :                     
    1136/     3B8 : A0                  	LD R0
    1137/     3B9 : F4                  	CMA
    1138/     3BA : BF                  	XCH R15
    1139/     3BB : 2F                  	SRC P7
    1140/     3BC :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 20 - 2023/02/23 11:05:23


    1141/     3BC : A1                  	LD R1
    1142/     3BD : F1                  	CLC
    1143/     3BE : E8                  	SBM			; ACC=REG(P6)[15-i] - REG(P7)[15-i]
    1144/     3BF :                     
    1145/     3BF : 14 C5               	JCN Z, CMP_FRACTION_NEXT
    1146/     3C1 : 12 C9               	JCN C, CMP_FRACTION_EXIT11
    1147/     3C3 : 43 C8               	JUN CMP_FRACTION_EXIT10
    1148/     3C5 :                     
    1149/     3C5 :                     CMP_FRACTION_NEXT:
    1150/     3C5 : 70 B2               	ISZ R0, CMP_FRACTION_LOOP
    1151/     3C7 : C0                  	BBL 0			; REG(P6) == REG(P7)
    1152/     3C8 :                     
    1153/     3C8 :                     CMP_FRACTION_EXIT10:
    1154/     3C8 : C1                  	BBL 1			; REG(P6) < REG(P7)
    1155/     3C9 :                     
    1156/     3C9 :                     CMP_FRACTION_EXIT11:
    1157/     3C9 : C1                  	BBL 1			; REG(P6) > REG(P7)
    1158/     3CA :                     
    1159/     3CA :                     ;;;---------------------------------------------------------------------------
    1160/     3CA :                     ;;; NORMALIZE_REGISTER_P0
    1161/     3CA :                     ;;; minimize exponent
    1162/     3CA :                     ;;; example
    1163/     3CA :                     ;;; 0.0000001 E 9 ->shift L7->  1.0000000 E 2 -> shift R1 -> 0.10000000 E3
    1164/     3CA :                     ;;; 0.0000001 E 7 ->shift L7->  1.0000000 E 0 -> shift R1 -> 0.10000000 E1
    1165/     3CA :                     ;;; 0.0000001 E 5 ->shift L5->  0.0100000 E 0
    1166/     3CA :                     ;;; 
    1167/     3CA :                     ;;; working: P0, R2, R3
    1168/     3CA :                     ;;;---------------------------------------------------------------------------
    1169/     3CA :                     NORMALIZE_REGISTER_P0:	
    1170/     3CA : 21                  	SRC P0
    1171/     3CB : EC                  	RD0			; exponent of REG(P0)
    1172/     3CC : F4                  	CMA
    1173/     3CD : B3                  	XCH R3			; R3 = 15 - exponent
    1174/     3CE :                     	
    1175/     3CE : F0                  	CLB
    1176/     3CF : B2                  	XCH R2			; R2=0 (counter)
    1177/     3D0 : 43 DA               	JUN NM_LOOP_ENTRY
    1178/     3D2 :                     NM_LOOP:
    1179/     3D2 : A2                  	LD R2
    1180/     3D3 : F4                  	CMA
    1181/     3D4 : B1                  	XCH R1			; R1=15, 14,.., 0
    1182/     3D5 : 21                  	SRC P0
    1183/     3D6 : E9                  	RDM
    1184/     3D7 : 1C DC               	JCN ZN, NM_GO_SHIFT
    1185/     3D9 : 62                  	INC R2
    1186/     3DA :                     NM_LOOP_ENTRY:
    1187/     3DA : 73 D2               	ISZ R3, NM_LOOP
    1188/     3DC :                     NM_GO_SHIFT:
    1189/     3DC :                     	;  exponent = exponent - shift count
    1190/     3DC : EC                  	RD0
    1191/     3DD : F1                  	CLC
    1192/     3DE : 92                  	SUB R2
    1193/     3DF : E4                  	WR0
    1194/     3E0 : A2                  	LD R2			; ACC = shift count
    1195/     3E1 : 54 87               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1196/     3E3 :                     
    1197/     3E3 : DF                  	LDM 15			; check most significant digit
    1198/     3E4 : B1                  	XCH R1			; and shift to right if it is not zero
    1199/     3E5 : 21                  	SRC P0
    1200/     3E6 : E9                  	RDM
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 21 - 2023/02/23 11:05:23


    1201/     3E7 : 14 F1               	JCN Z, NM_EXIT
    1202/     3E9 : EC                  	RD0			; increment exponent
    1203/     3EA : F2                  	IAC
    1204/     3EB : E4                  	WR0
    1205/     3EC : 1A F0               	JCN CN, NM_NOERROR
    1206/     3EE : D1                  	LDM REG_ERROR_OVERFLOW
    1207/     3EF : E6                  	WR2	;; set overflow flag
    1208/     3F0 :                     NM_NOERROR:
    1209/     3F0 : D1                  	LDM 1
    1210/     3F1 :                     NM_EXIT:
    1211/     3F1 : 44 71               	JUN SHIFT_FRACTION_RIGHT_P0_ACC
    1212/     3F3 :                     
    1213/     400 :                     	org 0400H
    1214/     400 :                     ;;;---------------------------------------------------------------------------
    1215/     400 :                     ;;; CMDC_MUL
    1216/     400 :                     ;;; X = X * Y
    1217/     400 :                     ;;;---------------------------------------------------------------------------
    1218/     400 :                     CMDC_MUL:
    1219/     400 : 20 00               	FIM P0, REG_X
    1220/     402 : 54 EC               	JMS ISZERO_REGISTER_P0
    1221/     404 : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1222/     406 :                     
    1223/     406 : 20 10               	FIM P0, REG_Y
    1224/     408 : 54 EC               	JMS ISZERO_REGISTER_P0
    1225/     40A : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1226/     40C :                     	
    1227/     40C : 2C 00               	FIM P6, REG_X
    1228/     40E : 2E 10               	FIM P7, REG_Y
    1229/     410 :                     
    1230/     410 : 55 80               	JMS GET_SIGN_PRODUCT_P6_P7
    1231/     412 : 2D                  	SRC P6
    1232/     413 : E5                  	WR1
    1233/     414 :                     	
    1234/     414 :                     	;;  calculate exponent of the result
    1235/     414 : EC                  	RD0
    1236/     415 : B0                  	XCH R0
    1237/     416 : 2F                  	SRC P7
    1238/     417 : EC                  	RD0
    1239/     418 : F1                  	CLC
    1240/     419 : 80                  	ADD R0
    1241/     41A : 2D                  	SRC P6
    1242/     41B : E4                  	WR0			; set exp X (tentative)
    1243/     41C :                     				; it may be adjusted by the normalization
    1244/     41C : 1A 20               	JCN CN, CMDC_MUL_L0	; check overflow
    1245/     41E : D1                  	LDM REG_ERROR_OVERFLOW
    1246/     41F : E6                  	WR2			; set overflow flag
    1247/     420 :                     CMDC_MUL_L0:
    1248/     420 :                     	;; 	LDM 0
    1249/     420 :                     	;; 	SRC P7
    1250/     420 :                     	;; 	WR0			; exp Y = 0 (can be omitted)
    1251/     420 :                     
    1252/     420 :                     	; multiply fraction X = X * Y
    1253/     420 : 54 2A               	JMS MUL_FRACTION_XY
    1254/     422 :                     
    1255/     422 :                     CMDC_MUL_EXIT:
    1256/     422 : 43 7E               	JUN CMDC_NORMALIZE_AND_POP
    1257/     424 :                     CMDC_MUL_ZERO:
    1258/     424 : 20 00               	FIM P0, REG_X
    1259/     426 : 54 C8               	JMS CLEAR_REGISTER_P0
    1260/     428 : 44 22               	JUN CMDC_MUL_EXIT
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 22 - 2023/02/23 11:05:23


    1261/     42A :                     
    1262/     42A :                     ;;;---------------------------------------------------------------------------
    1263/     42A :                     ;;; MUL_FRACTION_XY
    1264/     42A :                     ;;; multiply fraction of REG_X and REG_Y
    1265/     42A :                     ;;; REG_X = REG_X* REG_Y
    1266/     42A :                     ;;; working: P6, P7, P5, P0(for shift), P1(for shift), P4(R8, R9)
    1267/     42A :                     ;;;---------------------------------------------------------------------------
    1268/     42A :                     ;;; D15=0 (number is normalized)
    1269/     42A :                     ;;; sum up folloings and store to FRA_X
    1270/     42A :                     ;;; FRA_Y
    1271/     42A :                     ;;; 0EDCBA9876543210 * 0 FRA_M(=FRA_X)
    1272/     42A :                     ;;;  0EDCBA987654321 * E
    1273/     42A :                     ;;;   0EDCBA98765432 * D
    1274/     42A :                     ;;;    0EDCBA9876543 * C
    1275/     42A :                     ;;;     0EDCBA987654 * B
    1276/     42A :                     ;;;      0EDCBA98765 * A
    1277/     42A :                     ;;;       0EDCBA9876 * 9
    1278/     42A :                     ;;;        0EDCBA987 * 8
    1279/     42A :                     ;;;         0EDCBA98 * 7
    1280/     42A :                     ;;;          0EDCBA9 * 6
    1281/     42A :                     ;;;           0EDCBA * 5
    1282/     42A :                     ;;;            0EDCB * 4
    1283/     42A :                     ;;;             0EDC * 3
    1284/     42A :                     ;;;              0ED * 2
    1285/     42A :                     ;;;               0E * 1
    1286/     42A :                     ;;;                0 * 0
    1287/     42A :                     ;;;---------------------------------------------------------------------------
    1288/     42A :                     MUL_FRACTION_XY:
    1289/     42A : 2C 40               	FIM P6, REG_M
    1290/     42C : 2E 00               	FIM P7, REG_X
    1291/     42E : 54 E4               	JMS LD_FRACTION_P6_P7	; FRA_M <= FRA_X
    1292/     430 :                     
    1293/     430 : 20 00               	FIM P0, REG_X
    1294/     432 : 54 CE               	JMS CLEAR_FRACTION_P0	; FRA_X = 0, status(sign, exp) is reserved
    1295/     434 :                     	
    1296/     434 : 2A 40               	FIM P5, REG_M		; for mult loop (copy of X)
    1297/     436 : 2C 00               	FIM P6, REG_X		; for ADD (total)
    1298/     438 : 2E 10               	FIM P7, REG_Y		; for ADD
    1299/     43A : 20 10               	FIM P0, REG_Y		; for SHIFT (working reg. P1)
    1300/     43C :                     
    1301/     43C : F0                  	CLB
    1302/     43D : B8                  	XCH R8
    1303/     43E :                     MUL_LOOP:			; for i(R8)=0 to 15
    1304/     43E : A8                  	LD R8
    1305/     43F : F4                  	CMA
    1306/     440 : BB                  	XCH R11			; R11 = 15, 14, ..., 0
    1307/     441 : 2B                  	SRC P5
    1308/     442 : E9                  	RDM
    1309/     443 : 14 4C               	JCN Z, MUL_LOOP_NEXT	; next if (REG_Y)[15-i] == 0
    1310/     445 : F4                  	CMA
    1311/     446 : F2                  	IAC
    1312/     447 : B9                  	XCH R9			; R9 = 16-(REG_Y)[15-i]
    1313/     448 :                     MUL_ADD_LOOP:			; add FRA_M to FRA_X '(REG_Y)[15-i] times'
    1314/     448 : 53 8F               	JMS ADD_FRACTION_P6_P7
    1315/     44A : 79 48               	ISZ R9, MUL_ADD_LOOP
    1316/     44C :                     MUL_LOOP_NEXT:
    1317/     44C : D1                  	LDM 1
    1318/     44D : 20 10               	FIM P0, REG_Y
    1319/     44F : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift FRA_Y 1 digit right
    1320/     451 : 78 3E               	ISZ R8, MUL_LOOP
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 23 - 2023/02/23 11:05:23


    1321/     453 :                     
    1322/     453 : C0                  	BBL 0
    1323/     454 :                     	
    1324/     454 :                     ;;;---------------------------------------------------------------------------
    1325/     454 :                     ;;; CMDC_PRINT
    1326/     454 :                     ;;; Print X and Y
    1327/     454 :                     ;;;---------------------------------------------------------------------------
    1328/     454 :                     CMDC_PRINT:
    1329/     454 : 20 00               	FIM P0, REG_X
    1330/     456 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1331/     458 : 56 53               	JMS PRINT_CRLF
    1332/     45A : 20 10               	FIM P0, REG_Y
    1333/     45C : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1334/     45E : 56 53               	JMS PRINT_CRLF
    1335/     460 : 20 20               	FIM P0, REG_Z
    1336/     462 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1337/     464 : 56 53               	JMS PRINT_CRLF
    1338/     466 : 20 30               	FIM P0, REG_T
    1339/     468 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1340/     46A : 56 53               	JMS PRINT_CRLF
    1341/     46C : C0                  	BBL 0
    1342/     46D :                     
    1343/     46D :                     ;;;---------------------------------------------------------------------------
    1344/     46D :                     ;;; CMDC_SUB
    1345/     46D :                     ;;; X = Y - X
    1346/     46D :                     ;;;---------------------------------------------------------------------------
    1347/     46D :                     CMDC_SUB:
    1348/     46D : 54 F6               	JMS CHANGE_SIGN_REG_X
    1349/     46F : 43 41               	JUN CMDC_ADD
    1350/     471 :                     	
    1351/     471 :                     ;;;---------------------------------------------------------------------------
    1352/     471 :                     ;;; SHIFT_FRACTION_RIGHT_P0_ACC
    1353/     471 :                     ;;; shift fraction of the register to right with filling 0
    1354/     471 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1355/     471 :                     ;;; 	   ACC=shift count
    1356/     471 :                     ;;; working: P0(R0, R1), P1(R2, R3)
    1357/     471 :                     ;;; destroy P1(R2, R3), R1 becomes 0 but R0 is not affected
    1358/     471 :                     ;;;---------------------------------------------------------------------------
    1359/     471 :                     SHIFT_FRACTION_RIGHT_P0_ACC:
    1360/     471 : 14 86               	JCN Z, SHIFTR_EXIT	; exit if ACC==0
    1361/     473 : B3                  	XCH R3			; R3 = ACC = shift
    1362/     474 : A0                  	LD R0
    1363/     475 : B2                  	XCH R2			; R2 = R0
    1364/     476 :                     
    1365/     476 : F0                  	CLB			; clear ACC and CY
    1366/     477 : B1                  	XCH R1			; R1=0
    1367/     478 :                     SHIFTR_LOOP:			; for(i=0 to 15) P0(REG(i))=P1(REG(i+shift))
    1368/     478 : D0                  	LDM 0
    1369/     479 : 12 7D               	JCN C, SHIFTR_WRITE
    1370/     47B :                     SHIFTR_READ:	
    1371/     47B : 23                  	SRC P1
    1372/     47C : E9                  	RDM
    1373/     47D :                     SHIFTR_WRITE:
    1374/     47D : 21                  	SRC P0
    1375/     47E : E0                  	WRM
    1376/     47F : 63                  	INC R3
    1377/     480 : A3                  	LD R3
    1378/     481 : 1C 84               	JCN ZN, SHIFTR_NEXT      ; check if shift completed
    1379/     483 : FA                  	STC			; set flag to fill remaining bits with 0 
    1380/     484 :                     SHIFTR_NEXT:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 24 - 2023/02/23 11:05:23


    1381/     484 : 71 78               	ISZ R1, SHIFTR_LOOP
    1382/     486 :                     SHIFTR_EXIT:
    1383/     486 : C0                  	BBL 0
    1384/     487 :                     
    1385/     487 :                     ;;;---------------------------------------------------------------------------
    1386/     487 :                     ;;; SHIFT_FRACTION_LEFT_P0_ACC
    1387/     487 :                     ;;; shift fraction of the register to left with filling 0
    1388/     487 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1389/     487 :                     ;;; 	   ACC=shift count
    1390/     487 :                     ;;; working: P0(R0, R1), P1(R2, R3), P2(R4, R5), R15
    1391/     487 :                     ;;; destroy P1(R2, R3), P2, R15, R1 becomes 0 but R0 is not affected
    1392/     487 :                     ;;;---------------------------------------------------------------------------
    1393/     487 :                     SHIFT_FRACTION_LEFT_P0_ACC:
    1394/     487 : 14 A5               	JCN Z, SHIFTL_EXIT	; exit if ACC==0
    1395/     489 : B5                  	XCH R5			; R5 = ACC = shift
    1396/     48A : A0                  	LD R0
    1397/     48B : B2                  	XCH R2			; R2 = R0
    1398/     48C :                     
    1399/     48C : F0                  	CLB			; clear ACC and CY
    1400/     48D : B4                  	XCH R4			; R4=0 (R4=i, R5=i+shift)
    1401/     48E :                     SHIFTL_LOOP:			; for(i=0 to 15) P0(REG(~i))=P1(REG(~(i+shift))
    1402/     48E : D0                  	LDM 0
    1403/     48F : BF                  	XCH R15
    1404/     490 : 12 98               	JCN C, SHIFTL_WRITE
    1405/     492 :                     SHIFTL_READ:	
    1406/     492 : A5                  	LD R5
    1407/     493 : F4                  	CMA
    1408/     494 : B3                  	XCH R3			; R3 = ~R5 =~(i+shift)
    1409/     495 : 23                  	SRC P1
    1410/     496 : E9                  	RDM
    1411/     497 : BF                  	XCH R15
    1412/     498 :                     SHIFTL_WRITE:
    1413/     498 : A4                  	LD R4
    1414/     499 : F4                  	CMA
    1415/     49A : B1                  	XCH R1			; R1 = ~R4 =~i
    1416/     49B : 21                  	SRC P0
    1417/     49C : BF                  	XCH R15
    1418/     49D : E0                  	WRM
    1419/     49E : 65                  	INC R5
    1420/     49F : A5                  	LD R5
    1421/     4A0 : 1C A3               	JCN ZN, SHIFTL_NEXT	; check if shift completed
    1422/     4A2 : FA                  	STC			; set flag to fill remaining bits with 0 
    1423/     4A3 :                     SHIFTL_NEXT:
    1424/     4A3 : 74 8E               	ISZ R4, SHIFTL_LOOP
    1425/     4A5 :                     SHIFTL_EXIT:
    1426/     4A5 : C0                  	BBL 0
    1427/     4A6 :                     	
    1428/     4A6 :                     ;;;---------------------------------------------------------------------------
    1429/     4A6 :                     ;;; ALIGN_REGISTER_XY
    1430/     4A6 :                     ;;; align digit point to larger register
    1431/     4A6 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1432/     4A6 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1433/     4A6 :                     ;;; working: R10, R11
    1434/     4A6 :                     ;;;---------------------------------------------------------------------------
    1435/     4A6 :                     ALIGN_REGISTER_XY:
    1436/     4A6 : 2C 00               	FIM P6, REG_X
    1437/     4A8 : 2E 10               	FIM P7, REG_Y
    1438/     4AA : 2D                  	SRC P6
    1439/     4AB : EC                  	RD0
    1440/     4AC : BA                  	XCH R10			; R10 = expoenent of REG_P6
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 25 - 2023/02/23 11:05:23


    1441/     4AD : 2F                  	SRC P7
    1442/     4AE : EC                  	RD0 
    1443/     4AF : BB                  	XCH R11			; R11 = expoenent of REG_P7
    1444/     4B0 :                     
    1445/     4B0 : AB                  	LD R11
    1446/     4B1 : F1                  	CLC
    1447/     4B2 : 9A                  	SUB R10
    1448/     4B3 : 12 C0               	JCN C, EY_GE_EX		; R11 >= R10
    1449/     4B5 :                     	;; R11 < R10
    1450/     4B5 : F4                  	CMA
    1451/     4B6 : F2                  	IAC
    1452/     4B7 : 20 10               	FIM P0, REG_Y
    1453/     4B9 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1454/     4BB : AA                  	LD R10
    1455/     4BC : 2F                  	SRC P7
    1456/     4BD : E4                  	WR0
    1457/     4BE : 44 C7               	JUN ALIGN_EXIT
    1458/     4C0 :                     EY_GE_EX:
    1459/     4C0 : 20 00               	FIM P0, REG_X
    1460/     4C2 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1461/     4C4 : AB                  	LD R11
    1462/     4C5 : 2D                  	SRC P6
    1463/     4C6 : E4                  	WR0
    1464/     4C7 :                     ALIGN_EXIT:
    1465/     4C7 : C0                  	BBL 0
    1466/     4C8 :                     	
    1467/     4C8 :                     ;;;---------------------------------------------------------------------------
    1468/     4C8 :                     ;;; CLEAR_REGISTER_P0
    1469/     4C8 :                     ;;; Clear register
    1470/     4C8 :                     ;;; input: P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1471/     4C8 :                     ;;; output: ACC=0, R1=0, (R0 is not affected)
    1472/     4C8 :                     ;;;---------------------------------------------------------------------------
    1473/     4C8 :                     CLEAR_REGISTER_P0:
    1474/     4C8 : F0                  	CLB
    1475/     4C9 : 21                  	SRC P0
    1476/     4CA : E4                  	WR0
    1477/     4CB : E5                  	WR1
    1478/     4CC : E6                  	WR2
    1479/     4CD : E7                  	WR3
    1480/     4CE :                     ;;;---------------------------------------------------------------------------
    1481/     4CE :                     ;;; CLEAR_FRACTION_P0
    1482/     4CE :                     ;;;---------------------------------------------------------------------------
    1483/     4CE :                     CLEAR_FRACTION_P0:
    1484/     4CE : F0                  	CLB
    1485/     4CF :                     CLEAR_REGISTER_L0:
    1486/     4CF : 21                  	SRC P0
    1487/     4D0 : E0                  	WRM
    1488/     4D1 : 71 CF               	ISZ R1, CLEAR_REGISTER_L0
    1489/     4D3 : C0                  	BBL 0
    1490/     4D4 :                     
    1491/     4D4 :                     ;;;---------------------------------------------------------------------------
    1492/     4D4 :                     ;;; LD_REGISTER_P6_P7
    1493/     4D4 :                     ;;; load register REG(P7) to REG(P6) (REG_P6 <= REG_P7)
    1494/     4D4 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)) 
    1495/     4D4 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1496/     4D4 :                     ;;; output: ACC=0, R13=0, R15=0
    1497/     4D4 :                     ;;; destroy R13, R15 (R12 and R14 are not affected)
    1498/     4D4 :                     ;;;---------------------------------------------------------------------------
    1499/     4D4 :                     LD_REGISTER_P6_P7:
    1500/     4D4 :                     	;; copy status characters
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 26 - 2023/02/23 11:05:23


    1501/     4D4 : 2F                  	SRC P7
    1502/     4D5 : EC                  	RD0
    1503/     4D6 : 2D                  	SRC P6
    1504/     4D7 : E4                  	WR0
    1505/     4D8 :                     
    1506/     4D8 : 2F                  	SRC P7
    1507/     4D9 : ED                  	RD1
    1508/     4DA : 2D                  	SRC P6
    1509/     4DB : E5                  	WR1
    1510/     4DC :                     
    1511/     4DC : 2F                  	SRC P7
    1512/     4DD : EE                  	RD2
    1513/     4DE : 2D                  	SRC P6
    1514/     4DF : E6                  	WR2
    1515/     4E0 :                     
    1516/     4E0 : 2F                  	SRC P7
    1517/     4E1 : EF                  	RD3
    1518/     4E2 : 2D                  	SRC P6
    1519/     4E3 : E7                  	WR3
    1520/     4E4 :                     ;;;---------------------------------------------------------------------------
    1521/     4E4 :                     ;;; LD_FRACTION_P6_P7
    1522/     4E4 :                     ;;;---------------------------------------------------------------------------
    1523/     4E4 :                     LD_FRACTION_P6_P7
    1524/     4E4 :                     	; CLB
    1525/     4E4 :                     	; XCH R13			; clear R13
    1526/     4E4 :                     	; CLB
    1527/     4E4 :                     	; XCH R15			; clear R15
    1528/     4E4 :                     LD_FRACTION_L0:
    1529/     4E4 : 2F                  	SRC P7
    1530/     4E5 : E9                  	RDM			; read a digit from the source register
    1531/     4E6 : 2D                  	SRC P6
    1532/     4E7 : E0                  	WRM			; write the digit to memory
    1533/     4E8 : 6D                  	INC R13
    1534/     4E9 : 7F E4               	ISZ R15, LD_FRACTION_L0
    1535/     4EB :                     
    1536/     4EB : C0                  	BBL 0
    1537/     4EC :                     
    1538/     4EC :                     ;;;---------------------------------------------------------------------------
    1539/     4EC :                     ;;; ISZERO_REGISTER_P0
    1540/     4EC :                     ;;; check if REG(P0) == 0 or not
    1541/     4EC :                     ;;; return: ACC = (REG==0) ? 1 : 0;
    1542/     4EC :                     ;;; destroy: R1 (R0 is not affected)
    1543/     4EC :                     ;;;---------------------------------------------------------------------------
    1544/     4EC :                     ISZERO_REGISTER_P0:
    1545/     4EC : F0                  	CLB
    1546/     4ED : B1                  	XCH R1
    1547/     4EE :                     ISZERO_LOOP:
    1548/     4EE : 21                  	SRC P0
    1549/     4EF : E9                  	RDM
    1550/     4F0 : 1C F5               	JCN ZN, ISZERO_EXIT0
    1551/     4F2 : 71 EE               	ISZ R1, ISZERO_LOOP
    1552/     4F4 :                     
    1553/     4F4 : C1                  	BBL 1
    1554/     4F5 :                     ISZERO_EXIT0:
    1555/     4F5 : C0                  	BBL 0
    1556/     4F6 :                     	
    1557/     4F6 :                     ;;;---------------------------------------------------------------------------
    1558/     4F6 :                     ;;; CHANGE_SIGN_REG_X
    1559/     4F6 :                     ;;; X = -X
    1560/     4F6 :                     ;;; destroy: P7
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 27 - 2023/02/23 11:05:23


    1561/     4F6 :                     ;;;---------------------------------------------------------------------------
    1562/     4F6 :                     CHANGE_SIGN_REG_X:
    1563/     4F6 : 2E 00               	FIM P7, REG_X
    1564/     4F8 : 2F                  	SRC P7
    1565/     4F9 : ED                  	RD1
    1566/     4FA : F4                  	CMA
    1567/     4FB : E5                  	WR1
    1568/     4FC : C0                  	BBL 0
    1569/     4FD :                     
    1570/     4FD :                     ;;;---------------------------------------------------------------------------
    1571/     4FD :                     ;;; CMDC_DIV
    1572/     4FD :                     ;;; X = Y / X
    1573/     4FD :                     ;;;---------------------------------------------------------------------------
    1574/     4FD :                     CMDC_DIV:
    1575/     4FD : 20 00               	FIM P0, REG_X
    1576/     4FF : 53 CA               	JMS NORMALIZE_REGISTER_P0
    1577/     501 : 54 EC               	JMS ISZERO_REGISTER_P0
    1578/     503 : 1C 41               	JCN ZN, CMDC_DIV_BY_ZERO
    1579/     505 :                     
    1580/     505 : 20 10               	FIM P0, REG_Y
    1581/     507 : 54 EC               	JMS ISZERO_REGISTER_P0
    1582/     509 : 1C 47               	JCN ZN, CMDC_DIVIDEND_ZERO
    1583/     50B :                     	
    1584/     50B : 2C 00               	FIM P6, REG_X
    1585/     50D : 2E 10               	FIM P7, REG_Y
    1586/     50F :                     
    1587/     50F : 55 80               	JMS GET_SIGN_PRODUCT_P6_P7
    1588/     511 : 2F                  	SRC P7
    1589/     512 : E5                  	WR1			; save sign to Y
    1590/     513 :                     	
    1591/     513 :                     	;; if devisor(REG_X) is less than 0.1,
    1592/     513 :                     	;; shift it left until it become equal or larger than 0.1
    1593/     513 :                     	;; and increment the exponent of devidend
    1594/     513 :                     	;; example
    1595/     513 :                     	;; X=0.0001 -> X=0.1000, exponent of Y += 3
    1596/     513 : 2D                  	SRC P6
    1597/     514 : EC                  	RD0			; check exponent of REG_X(devisor)
    1598/     515 : 1C 2A               	JCN ZN, DIV_FRAC_ADJ_EXP
    1599/     517 :                     DIV_LOOP_D14:
    1600/     517 :                     	;; increment exponent of Y
    1601/     517 : 2F                  	SRC P7			; Y
    1602/     518 : EC                  	RD0
    1603/     519 : F2                  	IAC
    1604/     51A : E4                  	WR0			; EXP(Y)++
    1605/     51B : 1A 1F               	JCN NC, DIV_LOOP_L0
    1606/     51D : D1                  	LDM REG_ERROR_OVERFLOW
    1607/     51E : E6                  	WR2			; set overflow flag, but continue calculation
    1608/     51F :                     DIV_LOOP_L0:
    1609/     51F : DE                  	LDM 14
    1610/     520 : BD                  	XCH R13
    1611/     521 : 2D                  	SRC P6			; X
    1612/     522 : E9                  	RDM			; ACC = D14 of X
    1613/     523 : 1C 3D               	JCN ZN, DIV_FRAC        ; exit loop and continue calculation
    1614/     525 : D1                  	LDM 1
    1615/     526 : 54 87               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1616/     528 : 45 17               	JUN DIV_LOOP_D14
    1617/     52A :                     
    1618/     52A :                     	; adjust exponent of Y
    1619/     52A :                     DIV_FRAC_ADJ_EXP:
    1620/     52A : 2D                  	SRC P6			; X
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 28 - 2023/02/23 11:05:23


    1621/     52B : EC                  	RD0
    1622/     52C : F8                   	DAC
    1623/     52D : B0                  	XCH R0			; R0 = (exponent of X)-1
    1624/     52E : 2F                  	SRC P7
    1625/     52F : EC                  	RD0
    1626/     530 : F1                  	CLC
    1627/     531 : 90                  	SUB R0			; exp(Y) - exp(X)
    1628/     532 : E4                  	WR0
    1629/     533 : 12 3D               	JCN C, DIV_FRAC		; no borrow
    1630/     535 : F4                  	CMA
    1631/     536 : F2                  	IAC
    1632/     537 : 20 10               	FIM P0, REG_Y
    1633/     539 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift frac(Y) and set exp(Y)=0
    1634/     53B : F0                  	CLB
    1635/     53C : E4                  	WR0
    1636/     53D :                     DIV_FRAC:
    1637/     53D : 55 4C               	JMS DIV_FRACTION_XY
    1638/     53F :                     	;; 	JUN DIV_FRACTION_XY
    1639/     53F :                     	;; RETURN_DIV_FRACTION_XY:	
    1640/     53F :                     	; normalize REG_X and clear REG_Y
    1641/     53F : 43 7E               	JUN CMDC_NORMALIZE_AND_POP
    1642/     541 :                     	
    1643/     541 :                     CMDC_DIV_BY_ZERO:
    1644/     541 : 20 00               	FIM P0, REG_X
    1645/     543 : 21                  	SRC P0
    1646/     544 : D2                  	LDM REG_ERROR_DIVBYZERO
    1647/     545 : E6                  	WR2			; set error flag
    1648/     546 : C0                  	BBL 0
    1649/     547 :                     CMDC_DIVIDEND_ZERO:
    1650/     547 : 20 00               	FIM P0, REG_X
    1651/     549 : 54 C8               	JMS CLEAR_REGISTER_P0
    1652/     54B : C0                  	BBL 0
    1653/     54C :                     	
    1654/     54C :                     ;;;---------------------------------------------------------------------------
    1655/     54C :                     ;;; DIV_FRACTION_XY
    1656/     54C :                     ;;; FRAC(X) = FRAC(Y) / FRAC(X)
    1657/     54C :                     ;;; working: P6, P7, P5, P0(for shift), P1 (for shift), P4(R8, R9)
    1658/     54C :                     ;;;---------------------------------------------------------------------------
    1659/     54C :                     ;;;  compare and subtract and count, and shift
    1660/     54C :                     ;;; 
    1661/     54C :                     ;;;  0EDCBA9876543210
    1662/     54C :                     ;;;  0edcba9876543210 -> E
    1663/     54C :                     ;;;
    1664/     54C :                     ;;;  0EDCBA9876543210
    1665/     54C :                     ;;;   0edcba987654321 -> D
    1666/     54C :                     ;;; 
    1667/     54C :                     ;;;  0EDCBA9876543210
    1668/     54C :                     ;;;    0edcba98765432 -> C
    1669/     54C :                     ;;; ...
    1670/     54C :                     ;;;  0EDCBA9876543210 -> 0
    1671/     54C :                     ;;;                0e
    1672/     54C :                     ;;;
    1673/     54C :                     ;;; e!=0
    1674/     54C :                     ;;;---------------------------------------------------------------------------
    1675/     54C :                     	
    1676/     54C :                     DIV_FRACTION_XY:
    1677/     54C : 2C 10               	FIM P6, REG_Y
    1678/     54E : 2E 00               	FIM P7, REG_X
    1679/     550 : 2A 40               	FIM P5, REG_M
    1680/     552 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 29 - 2023/02/23 11:05:23


    1681/     552 : 20 40               	FIM P0, REG_M
    1682/     554 : 54 CE               	JMS CLEAR_FRACTION_P0
    1683/     556 :                     
    1684/     556 : D1                  	LDM 1
    1685/     557 : B8                  	XCH R8			; for i(R8)= 1 to 15;
    1686/     558 :                     DIV_LOOP:	
    1687/     558 : F0                  	CLB
    1688/     559 : B9                  	XCH R9			; counter R9 = 0
    1689/     55A :                     DIV_SUB_COUNT:
    1690/     55A : 53 B0               	JMS CMP_FRACTION_P6_P7	   ; Compare Y with X
    1691/     55C : 1A 68               	JCN CN, DIV_SUB_COUNT_EXIT ; jump if REG_Y < REG_X
    1692/     55E :                     
    1693/     55E :                     	;; check R9 is already 9
    1694/     55E :                     	;; it occurs when shifted divisor is truncated
    1695/     55E :                     	;; (ex. previous loop 100/109 -> this loop 100/10)
    1696/     55E : D9                  	LDM 9
    1697/     55F : F1                  	CLC
    1698/     560 : 99                  	SUB R9
    1699/     561 : 14 68               	JCN Z, DIV_SUB_COUNT_EXIT
    1700/     563 :                     	
    1701/     563 : 53 9E               	JMS SUB_FRACTION_P6_P7	   ; Y = Y - X
    1702/     565 : 69                  	INC R9
    1703/     566 : 45 5A               	JUN DIV_SUB_COUNT
    1704/     568 :                     DIV_SUB_COUNT_EXIT:	
    1705/     568 : A8                  	LD R8
    1706/     569 : F4                  	CMA
    1707/     56A : BB                  	XCH R11			; R11 = 14, 13, ..., 0
    1708/     56B : 2B                  	SRC P5			; REG_M
    1709/     56C : A9                  	LD R9
    1710/     56D : E0                  	WRM			; REG_M(R11) = R9
    1711/     56E : D1                  	LDM 1
    1712/     56F : 20 00               	FIM P0, REG_X
    1713/     571 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; X=X/10
    1714/     573 :                     
    1715/     573 : 78 58               	ISZ R8, DIV_LOOP
    1716/     575 :                     
    1717/     575 : 2C 00               	FIM P6, REG_X
    1718/     577 : 2E 10               	FIM P7, REG_Y
    1719/     579 : 54 D4               	JMS LD_REGISTER_P6_P7	; copy exponent of Y to X
    1720/     57B : 2E 40               	FIM P7, REG_M
    1721/     57D : 54 E4               	JMS LD_FRACTION_P6_P7	; copy fraction of M to X
    1722/     57F :                     				; X need to be normalized
    1723/     57F : C0                  	BBL 0
    1724/     580 :                     	;; 	JUN RETURN_DIV_FRACTION_XY
    1725/     580 :                     
    1726/     580 :                     ;;;---------------------------------------------------------------------------
    1727/     580 :                     ;;; GET_SIGN_PRODUCT_P6_P7
    1728/     580 :                     ;;; calculate sign of the result for multiplication and division
    1729/     580 :                     ;;; result: ACC=0 (+) if REG(P6) and REG(P7) have the same sign (++or--)
    1730/     580 :                     ;;;            =15(-) if REG(P6) and REG(P7) have the different signs (+-or-+)
    1731/     580 :                     ;;; destroy: R0
    1732/     580 :                     ;;;---------------------------------------------------------------------------
    1733/     580 :                     GET_SIGN_PRODUCT_P6_P7:	
    1734/     580 :                     	;;  calculate sign of the result for multiplication and division
    1735/     580 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
    1736/     581 : ED                  	RD1
    1737/     582 : B0                  	XCH R0			; R0 = sign of X
    1738/     583 : 2F                  	SRC P7
    1739/     584 : ED                  	RD1			; sign of Y
    1740/     585 : F1                  	CLC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 30 - 2023/02/23 11:05:23


    1741/     586 : 90                  	SUB R0
    1742/     587 : 14 8A                	JCN Z, GET_SIGN_EXIT
    1743/     589 : CF                  	BBL 15			; negative sign
    1744/     58A :                     GET_SIGN_EXIT:
    1745/     58A : C0                  	BBL 0
    1746/     58B :                     
    1747/     58B :                     ;;;---------------------------------------------------------------------------
    1748/     58B :                     ;;; PRINT_REGISTER_WITH_NAME_P0
    1749/     58B :                     ;;; Print the contents of the number register
    1750/     58B :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1751/     58B :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1752/     58B :                     ;;; output: ACC=0
    1753/     58B :                     ;;;---------------------------------------------------------------------------
    1754/     58B :                     PRINT_REGISTER_WITH_NAME_P0:
    1755/     58B : 22 58               	FIM P1, 'X'
    1756/     58D : 56 28               	JMS PUTCHAR_P1
    1757/     58F : A0                  	LD R0
    1758/     590 : 56 48               	JMS PRINT_ACC
    1759/     592 :                     ;;;---------------------------------------------------------------------------
    1760/     592 :                     ;;; PRINT_REGISTER_P0
    1761/     592 :                     ;;; Print the contents of the number register
    1762/     592 :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1763/     592 :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1764/     592 :                     ;;; output: ACC=0
    1765/     592 :                     ;;;---------------------------------------------------------------------------
    1766/     592 :                     	;;
    1767/     592 :                     PRINT_REGISTER_P0:
    1768/     592 : 22 3D               	FIM P1, '='
    1769/     594 : 21                  	SRC P0
    1770/     595 : EE                  	RD2
    1771/     596 : 14 9A               	JCN Z, PRINT_REGISTER_EQU_ERR
    1772/     598 : 22 45               	FIM P1, 'E'
    1773/     59A :                     PRINT_REGISTER_EQU_ERR
    1774/     59A : 56 28               	JMS PUTCHAR_P1
    1775/     59C :                     
    1776/     59C : 22 2B               	FIM P1, '+'
    1777/     59E : 21                  	SRC P0
    1778/     59F : ED                  	RD1
    1779/     5A0 : 14 A4               	JCN Z, PRINT_REGISTER_SGN
    1780/     5A2 : 22 2D               	FIM P1, '-'
    1781/     5A4 :                     PRINT_REGISTER_SGN:
    1782/     5A4 : 56 28               	JMS PUTCHAR_P1
    1783/     5A6 :                     	
    1784/     5A6 : 21                  	SRC P0
    1785/     5A7 : EC                  	RD0			
    1786/     5A8 : BA                  	XCH R10                 ; load R10=exponent
    1787/     5A9 :                     
    1788/     5A9 :                     	;; print first digit(D15) if it is not zero
    1789/     5A9 :                     	;; (it should be '0' if the number is normalized) 
    1790/     5A9 : DF                  	LDM 15
    1791/     5AA : B1                  	XCH R1
    1792/     5AB : 21                  	SRC P0
    1793/     5AC : E9                  	RDM
    1794/     5AD : 14 B1               	JCN Z, PRINT_CHECK_EXP
    1795/     5AF : 56 48               	JMS PRINT_ACC
    1796/     5B1 :                     
    1797/     5B1 :                     PRINT_CHECK_EXP:		; print digit point if exponent is 0
    1798/     5B1 : AA                  	LD R10
    1799/     5B2 : 1C B8               	JCN ZN, PRINT_REGISTER_LOOP_SETUP
    1800/     5B4 : 22 2E               	FIM P1, '.'
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 31 - 2023/02/23 11:05:23


    1801/     5B6 : 56 28               	JMS PUTCHAR_P1
    1802/     5B8 :                     
    1803/     5B8 :                     PRINT_REGISTER_LOOP_SETUP:
    1804/     5B8 : F0                  	CLB
    1805/     5B9 : D1                  	LDM 1
    1806/     5BA : BB                  	XCH R11			; R11 is loop counter start from 1
    1807/     5BB :                     PRINT_REGISTER_LOOP:
    1808/     5BB : DF                  	LDM 15
    1809/     5BC : F1                  	CLC
    1810/     5BD : 9B                  	SUB R11			; (R11 =  1, 2,...,15) 
    1811/     5BE : 14 D0               	JCN Z, PRINT_EXIT	; skip last digit
    1812/     5C0 : B1                  	XCH R1			; ( R1 = 14,13,..., 1)
    1813/     5C1 : 21                  	SRC P0
    1814/     5C2 : E9                  	RDM
    1815/     5C3 : 56 48               	JMS PRINT_ACC
    1816/     5C5 :                     
    1817/     5C5 : F0                  	CLB			; print digit point
    1818/     5C6 : AA                  	LD R10
    1819/     5C7 : 9B                  	SUB R11
    1820/     5C8 : 1C CE               	JCN ZN, PRINT_REGISTER_L1
    1821/     5CA : 22 2E               	FIM P1, '.'
    1822/     5CC : 56 28               	JMS PUTCHAR_P1
    1823/     5CE :                     PRINT_REGISTER_L1:
    1824/     5CE : 7B BB               	ISZ R11, PRINT_REGISTER_LOOP
    1825/     5D0 :                     PRINT_EXIT:	
    1826/     5D0 : C0                  	BBL 0
    1827/     5D1 :                     
    1828/     5D1 :                     ;;;----------------------------------------------------------------------------
    1829/     5D1 :                     ;;; I/O routines located in Page 0600H
    1830/     5D1 :                     ;;;----------------------------------------------------------------------------
    1831/     600 :                     	org 0600H
    1832/     600 :                     ;;;---------------------------------------------------------------------------
    1833/     600 :                     ;;; Software UART Routine
    1834/     600 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    1835/     600 :                     ;;; defined in separated file
    1836/     600 :                     ;;;---------------------------------------------------------------------------
    1837/     600 :                     ;;; supported baudrates are 4800bps or 9600bps
    1838/     600 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    1839/     600 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    1840/     600 :                     
    1841/     600 : =2580H               	switch BAUDRATE
    1842/     600 : =>FALSE              	case 4800
    1843/     600 :                     	include "4800bps.inc"
    1844/     600 : =>TRUE               	case 9600
    1845/     600 :                     	include "9600bps.inc"
(1)    1/     600 :                     ;;;---------------------------------------------------------------------------
(1)    2/     600 :                     ;;; getchar and putchar functions
(1)    3/     600 :                     ;;; baud rate = 9600bps
(1)    4/     600 :                     ;;; 8bit, no parity, stop 1
(1)    5/     600 :                     ;;;---------------------------------------------------------------------------
(1)    6/     600 :                     
(1)    7/     600 :                     ;;;---------------------------------------------------------------------------
(1)    8/     600 :                     ;;; GETCHAR_P1
(1)    9/     600 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     600 :                     ;;;
(1)   11/     600 :                     ;;; Input: none
(1)   12/     600 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     600 :                     ;;; Working: P6, P7
(1)   14/     600 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     600 :                     ;;; 
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 32 - 2023/02/23 11:05:23


(1)   16/     600 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     600 :                     ;;; 
(1)   18/     600 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     600 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     600 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     600 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     600 :                     ;;;               |->phase delay
(1)   23/     600 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     600 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     600 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     600 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     600 :                     ;;;---------------------------------------------------------------------------
(1)   28/     600 :                     
(1)   29/     600 :                     GETCHAR_P1:
(1)   30/     600 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     602 :                                                     ; 
(1)   32/     602 : 19 02                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     604 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     606 : 7F 06               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     608 :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     608 :                     GETCHAR_L1:
(1)   37/     608 : 19 0D               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     60A : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     60B : 46 10                       JUN GETCHAR_L3          ;<2>
(1)   40/     60D :                     GETCHAR_L2:
(1)   41/     60D : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     60E : 00                          NOP                     ;[1]
(1)   43/     60F : 00                          NOP                     ;[1]
(1)   44/     610 :                     GETCHAR_L3:
(1)   45/     610 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     611 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     612 : 7D 08                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     614 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     614 : B3                  	XCH R3                  ;(1)
(1)   50/     615 : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     617 :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     617 :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     617 :                     GETCHAR_L4:
(1)   54/     617 : 19 1C               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     619 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     61A : 46 1F                       JUN GETCHAR_L6          ;<2>
(1)   57/     61C :                     GETCHAR_L5:
(1)   58/     61C : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     61D : 00                          NOP                     ;[1]
(1)   60/     61E : 00                          NOP                     ;[1]
(1)   61/     61F :                     GETCHAR_L6:
(1)   62/     61F : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     620 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     621 : 7D 17                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     623 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     623 : B2                  	XCH R2                  ;(1)
(1)   67/     624 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     624 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     624 :                     	;; check stop bit
(1)   70/     624 : 19 27                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     626 : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     627 :                     GETCHAR_OK:
(1)   73/     627 : C0                  	BBL 0
(1)   74/     628 :                                     
(1)   75/     628 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 33 - 2023/02/23 11:05:23


(1)   76/     628 :                     ;;; PUTCHAR_P1
(1)   77/     628 :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     628 :                     ;;; 
(1)   79/     628 :                     ;;; Input: P1(R2,R3)
(1)   80/     628 :                     ;;; Output: ACC=0
(1)   81/     628 :                     ;;; Working: P6(R12R13), P7
(1)   82/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   83/     628 :                     ;;; P1 is not affected
(1)   84/     628 :                     ;;; 
(1)   85/     628 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     628 :                     ;;; 
(1)   87/     628 :                     ;;; Input: P1(R2,R3)
(1)   88/     628 :                     ;;; Output: ACC=0
(1)   89/     628 :                     ;;; Working: P6(R12R13), P7
(1)   90/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   91/     628 :                     ;;;---------------------------------------------------------------------------
(1)   92/     628 :                     ;;; 
(1)   93/     628 :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     628 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     628 :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     628 :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     628 :                     ;;;---------------------------------------------------------------------------
(1)   98/     628 :                     
(1)   99/     628 :                     PUTCHAR_P1:
(1)  100/     628 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     628 :                     	LDM BANK_SERIAL     ; bank of output port
(1)  102/     628 :                             DCL                 ; set port bank
(1)  103/     628 : [100]                	endif
(1)  104/     628 :                     
(1)  105/     628 : 2E 00                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     62A : 2F                  	SRC P7              ; set port address
(1)  107/     62B :                     
(1)  108/     62B : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     62D : A3                          LD R3
(1)  110/     62E : F1                          CLC                 ; start bit is 0
(1)  111/     62F : F5                          RAL
(1)  112/     630 :                                     
(1)  113/     630 :                     PUTCHAR_L1:
(1)  114/     630 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     631 : 00                          NOP                 ;(1)
(1)  116/     632 : 00                          NOP                 ;(1)
(1)  117/     633 : 00                          NOP                 ;(1)
(1)  118/     634 : 00                          NOP                 ;(1)
(1)  119/     635 : E1                          WMP                 ;(1)
(1)  120/     636 : F6                          RAR                 ;(1)
(1)  121/     637 : 7D 30                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     639 :                     	
(1)  123/     639 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     63B : A2                          LD R2               ;(1)
(1)  125/     63C : FA                          STC                 ;(1) stop bit is 1
(1)  126/     63D : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     63E : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     63F :                     PUTCHAR_L2:
(1)  129/     63F : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     640 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     642 : 7F 42                       ISZ R15, $          ;(4)
(1)  132/     644 : F6                          RAR                 ;(1)
(1)  133/     645 : 7D 3F                       ISZ R13, PUTCHAR_L2  ;(2)
(1)  134/     647 :                     	
(1)  135/     647 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 34 - 2023/02/23 11:05:23


(1)  136/     647 :                     	LDM BANK_DEFAULT    
(1)  137/     647 :                             DCL                 ; restore bank to default
(1)  138/     647 : [135]                	endif
(1)  139/     647 : C0                          BBL 0
(1)  140/     648 :                     
(1)  141/     648 :                     
    1846/     648 : [1841]               	endcase
    1847/     648 :                     
    1848/     648 :                     ;;;---------------------------------------------------------------------------
    1849/     648 :                     ;;; PRINT_ACC
    1850/     648 :                     ;;; print contents of ACC('0'...'F') as a character
    1851/     648 :                     ;;; destroy: P1, P6, P7, ACC
    1852/     648 :                     ;;;---------------------------------------------------------------------------
    1853/     648 :                     
    1854/     648 :                     PRINT_ACC:
    1855/     648 : 22 30               	FIM R2R3, 30H		;'0'
    1856/     64A : F1                  	CLC			; clear carry
    1857/     64B : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    1858/     64C : 1A 50               	JCN CN, PRINTACC_L1
    1859/     64E : 62                  	INC R2
    1860/     64F : F2                  	IAC
    1861/     650 :                     PRINTACC_L1:	
    1862/     650 : B3                  	XCH R3			; R3<-ACC
    1863/     651 : 46 28               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    1864/     653 :                     
    1865/     653 :                     ;;;---------------------------------------------------------------------------
    1866/     653 :                     ;;; PRINT_CRLF
    1867/     653 :                     ;;; print "\r\n"
    1868/     653 :                     ;;; destroy: P1, ACC
    1869/     653 :                     ;;; this routine consumes 2 PC stack
    1870/     653 :                     ;;;---------------------------------------------------------------------------
    1871/     653 :                     PRINT_CRLF:
    1872/     653 : 22 0D               	FIM P1, '\r'
    1873/     655 : 56 28               	JMS PUTCHAR_P1
    1874/     657 : 22 0A               	FIM P1, '\n'
    1875/     659 : 56 28               	JMS PUTCHAR_P1
    1876/     65B : C0                  	BBL 0
    1877/     65C :                     
    1878/     65C :                     ;;;---------------------------------------------------------------------------
    1879/     65C :                     ;;; PRINT_CR
    1880/     65C :                     ;;; print "\r"
    1881/     65C :                     ;;; destroy: P1, ACC
    1882/     65C :                     ;;; this routine consumes 1 PC stack
    1883/     65C :                     ;;;---------------------------------------------------------------------------
    1884/     65C :                     PRINT_CR:
    1885/     65C : 22 0D               	FIM P1, '\r'
    1886/     65E : 46 28               	JUN PUTCHAR_P1
    1887/     660 :                     
    1888/     660 :                     ;;;---------------------------------------------------------------------------
    1889/     660 :                     ;;; PRINT_LF
    1890/     660 :                     ;;; print "\n"
    1891/     660 :                     ;;; destroy: P1, ACC
    1892/     660 :                     ;;; this routine consumes 1 PC stack
    1893/     660 :                     ;;;---------------------------------------------------------------------------
    1894/     660 :                     PRINT_LF:
    1895/     660 : 22 0A               	FIM P1, '\n'
    1896/     662 : 46 28               	JUN PUTCHAR_P1
    1897/     664 :                     
    1898/     664 :                     ;;;---------------------------------------------------------------------------
    1899/     664 :                     ;;; INIT_SERIAL
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 35 - 2023/02/23 11:05:23


    1900/     664 :                     ;;; Initialize serial port
    1901/     664 :                     ;;;---------------------------------------------------------------------------
    1902/     664 :                     
    1903/     664 :                     INIT_SERIAL:
    1904/     664 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    1905/     664 :                     	LDM BANK_SERIAL     ; bank of output port
    1906/     664 :                             DCL                 ; set port bank
    1907/     664 : [1904]               	endif
    1908/     664 :                     	
    1909/     664 : 2E 00                       FIM P7, CHIP_SERIAL ; chip# of output port
    1910/     666 : 2F                  	SRC P7              ; set port address
    1911/     667 : D1                  	LDM 1
    1912/     668 : E1                          WMP                 ; set serial port to 1 (TTL->H)
    1913/     669 :                     
    1914/     669 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    1915/     669 :                     	LDM BANK_DEFAULT    
    1916/     669 :                             DCL                 ; restore bank to default
    1917/     669 : [1914]               	endif
    1918/     669 :                     
    1919/     669 : C0                          BBL 0
    1920/     66A :                     
    1921/     66A :                     ;;;---------------------------------------------------------------------------
    1922/     66A :                     ;;; CTOI_P1
    1923/     66A :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    1924/     66A :                     ;;; input: P1(R2R3)
    1925/     66A :                     ;;; output: R3, (R2=0)
    1926/     66A :                     ;;;---------------------------------------------------------------------------
    1927/     66A :                     CTOI_P1:
    1928/     66A : F0                  	CLB
    1929/     66B : D3                  	LDM 3
    1930/     66C : 92                  	SUB R2
    1931/     66D : 14 73               	JCN Z, CTOI_09		; check upper 4bit
    1932/     66F : F0                  	CLB
    1933/     670 : D9                  	LDM 9
    1934/     671 : 83                  	ADD R3
    1935/     672 : B3                  	XCH R3			; R3 = R3 + 9 for 'a-fA-F'
    1936/     673 :                     CTOI_09:
    1937/     673 : F0                  	CLB
    1938/     674 : B2                  	XCH R2			; R2 = 0
    1939/     675 : C0                  	BBL 0
    1940/     676 :                     	
    1941/     676 :                     ;;;----------------------------------------------------------------------------
    1942/     676 :                     ;;; DISPLED_P1
    1943/     676 :                     ;;;   DISPLAY the contents of P1 on Port 2 and 3
    1944/     676 :                     ;;; Input: P1(R2R3)
    1945/     676 :                     ;;; Output:  ACC=0
    1946/     676 :                     ;;; Working: P7
    1947/     676 :                     ;;; Destroy: P7
    1948/     676 :                     ;;;----------------------------------------------------------------------------
    1949/     676 :                     
    1950/     676 :                     DISPLED_P1:
    1951/     676 : D1                  	LDM BANK_RAM2
    1952/     677 : FD                          DCL
    1953/     678 : 2E 00                       FIM P7, CHIP_RAM2
    1954/     67A : 2F                          SRC P7
    1955/     67B : A3                          LD R3
    1956/     67C : E1                          WMP
    1957/     67D :                     	
    1958/     67D : D1                          LDM BANK_RAM3
    1959/     67E : FD                          DCL
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 36 - 2023/02/23 11:05:23


    1960/     67F : 2E 40                       FIM P7, CHIP_RAM3
    1961/     681 : 2F                          SRC P7
    1962/     682 : A2                          LD R2
    1963/     683 : E1                          WMP
    1964/     684 :                     
    1965/     684 : D0                          LDM BANK_DEFAULT	; restore BANK to default
    1966/     685 : FD                  	DCL
    1967/     686 :                     	
    1968/     686 : C0                          BBL 0
    1969/     687 :                     
    1970/     687 :                     ;;;----------------------------------------------------------------------------
    1971/     687 :                     ;;; BLINK_LED
    1972/     687 :                     ;;;   Blink LED N times (N=ACC, N=16 if ACC==0)
    1973/     687 :                     ;;; Input: ACC
    1974/     687 :                     ;;; Output: ACC=0
    1975/     687 :                     ;;; Working: R11
    1976/     687 :                     ;;; Destroy: R11, P6, P7
    1977/     687 :                     ;;;----------------------------------------------------------------------------
    1978/     687 :                     
    1979/     687 :                     BLINK_LED:
    1980/     687 : F4                  	CMA
    1981/     688 : F2                  	IAC
    1982/     689 : BB                  	XCH R11         ; set counter=16-ACC
    1983/     68A :                     BLINK_L0	
    1984/     68A : D0                          LDM BANK_RAM1
    1985/     68B : 2E 40                       FIM P7, CHIP_RAM1
    1986/     68D : 56 9E                       JMS BLINK_SUB
    1987/     68F :                     
    1988/     68F : D1                          LDM BANK_RAM2
    1989/     690 : 2E 00                       FIM P7, CHIP_RAM2
    1990/     692 : 56 9E                       JMS BLINK_SUB
    1991/     694 :                     
    1992/     694 : D1                          LDM BANK_RAM3
    1993/     695 : 2E 40                       FIM P7, CHIP_RAM3
    1994/     697 : 56 9E                       JMS BLINK_SUB
    1995/     699 :                     	
    1996/     699 : 7B 8A                       ISZ R11, BLINK_L0
    1997/     69B :                     
    1998/     69B : D0                  	LDM BANK_DEFAULT
    1999/     69C : FD                  	DCL
    2000/     69D :                     
    2001/     69D : C0                  	BBL 0
    2002/     69E :                     
    2003/     69E :                     BLINK_SUB:	
    2004/     69E : FD                          DCL
    2005/     69F : 2F                          SRC P7
    2006/     6A0 : D8                          LDM 8
    2007/     6A1 : E1                          WMP             ; LED(MSB) on
    2008/     6A2 : D8                          LDM 8
    2009/     6A3 : 56 A8                       JMS WAIT10MS    ; wait 80ms
    2010/     6A5 : D0                          LDM 0
    2011/     6A6 : E1                          WMP             ; LED off
    2012/     6A7 : C0                          BBL 0
    2013/     6A8 :                     
    2014/     6A8 :                     ;;;----------------------------------------------------------------------------
    2015/     6A8 :                     ;;; Wait Subroutines WAIT10MS and WAIT100MS
    2016/     6A8 :                     ;;;
    2017/     6A8 :                     ;;; Constants '45EF'(10ms) and '11FE'(100ms) are calculated
    2018/     6A8 :                     ;;; by Jim's 4004 Delay Loop Calculator
    2019/     6A8 :                     ;;; https://github.com/jim11662418/4004-delay-calculator
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 37 - 2023/02/23 11:05:23


    2020/     6A8 :                     ;;;
    2021/     6A8 :                     ;;; 10.8003857uS/cycle (@5.185MHz clock)
    2022/     6A8 :                     ;;;----------------------------------------------------------------------------
    2023/     6A8 :                     ;;;----------------------------------------------------------------------------
    2024/     6A8 :                     ;;; WAIT10MS
    2025/     6A8 :                     ;;; Input: ACC
    2026/     6A8 :                     ;;; Output: return with ACC=0
    2027/     6A8 :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    2028/     6A8 :                     ;;;   wait for 10 * N ms (N=ACC, N=16 if ACC==0)
    2029/     6A8 :                     ;;;----------------------------------------------------------------------------
    2030/     6A8 :                                     
    2031/     6A8 :                     WAIT10MS:
    2032/     6A8 : 2C 45               	FIM R12R13, 045H  ; 9947us delay(921 cycles)
    2033/     6AA : 2E EF                       FIM R14R15, 0EFH  ; 
    2034/     6AC :                     W10_L1:
    2035/     6AC : 7C AC                	ISZ R12, W10_L1
    2036/     6AE : 7D AC                       ISZ R13, W10_L1
    2037/     6B0 : 7E AC                       ISZ R14, W10_L1
    2038/     6B2 : 7F AC                       ISZ R15, W10_L1
    2039/     6B4 : F8                          DAC
    2040/     6B5 : 1C A8                       JCN ZN, WAIT10MS  ; 9979us delay(924 cycles)/loop
    2041/     6B7 :                     W10_EXIT:
    2042/     6B7 : C0                  	BBL 0
    2043/     6B8 :                     
    2044/     6B8 :                     ;;;----------------------------------------------------------------------------
    2045/     6B8 :                     ;;; WAIT100MS
    2046/     6B8 :                     ;;; Input: ACC
    2047/     6B8 :                     ;;; Output: return with ACC=0
    2048/     6B8 :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    2049/     6B8 :                     ;;;   wait for 100 * N ms (N=ACC, N=16 if ACC==0)
    2050/     6B8 :                     ;;;----------------------------------------------------------------------------
    2051/     6B8 :                                     
    2052/     6B8 :                     WAIT100MS:
    2053/     6B8 : 2C 11               	FIM R12R13, 011H  ; 99958us delay(9255 cycles)
    2054/     6BA : 2E FE                       FIM R14R15, 0FEH  ; 
    2055/     6BC :                     W100_L1:
    2056/     6BC : 7C BC                       ISZ R12, W100_L1
    2057/     6BE : 7D BC                       ISZ R13, W100_L1
    2058/     6C0 : 7E BC                       ISZ R14, W100_L1
    2059/     6C2 : 7F BC                       ISZ R15, W100_L1
    2060/     6C4 : F8                          DAC
    2061/     6C5 : 1C B8                       JCN ZN, WAIT100MS  ; 99990us delay(9258 cycles)/loop
    2062/     6C7 :                     W100_EXIT:
    2063/     6C7 : C0                  	BBL 0
    2064/     6C8 :                                     
    2065/     6C8 :                     ;;;----------------------------------------------------------------------------
    2066/     6C8 :                     ;;; Print subroutine and string data located in Page 7 (0700H-07FFH)
    2067/     6C8 :                     ;;; 
    2068/     6C8 :                     ;;; The string data sould be located in the same page as the print routine.
    2069/     6C8 :                     ;;;----------------------------------------------------------------------------
    2070/     700 :                             org 0700H
    2071/     700 :                     ;;;----------------------------------------------------------------------------
    2072/     700 :                     ;;; PRINT_P0
    2073/     700 :                     ;;; Input: P0 (top of the string is 0700H+P0)
    2074/     700 :                     ;;; Working: P1(R2, R3)
    2075/     700 :                     ;;; Destroy: P1, P6, P7 (by PUTCHAR_P1), 
    2076/     700 :                     ;;;----------------------------------------------------------------------------
    2077/     700 :                     
    2078/     700 :                     PRINT_P0:
    2079/     700 : 32                          FIN P1			; P1=(P0)
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 38 - 2023/02/23 11:05:23


    2080/     701 : A2                          LD R2
    2081/     702 : 14 0B                       JCN Z, P7_UPPER0	; R2==0
    2082/     704 :                     P7_PUT:
    2083/     704 : 56 28                       JMS PUTCHAR_P1             ; putchar(P1)
    2084/     706 : 71 00                       ISZ R1, PRINT_P0           ; P0=P0+1
    2085/     708 : 60                          INC R0
    2086/     709 : 47 00                       JUN PRINT_P0               ; print remaining string
    2087/     70B :                     P7_UPPER0:
    2088/     70B : A3                  	LD R3
    2089/     70C : 1C 04                       JCN ZN, P7_PUT     	; R3 != 0
    2090/     70E :                     P7_EXIT:
    2091/     70E : C0                          BBL 0                   ; exit if P1(R2,R3) == 0
    2092/     70F :                                     
    2093/     70F :                     ;;;----------------------------------------------------------------------------
    2094/     70F :                     ;;; String data
    2095/     70F :                     ;;;----------------------------------------------------------------------------
    2096/     70F :                     
    2097/     70F :                     STR_OMSG:
    2098/     70F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004)\r\nTiny Monitor\r\n", 0
              715 : 20 4D 43 53 2D 34 
              71B : 20 28 34 30 30 34 
              721 : 29 0D 0A 54 69 6E 
              727 : 79 20 4D 6F 6E 69 
              72D : 74 6F 72 0D 0A 00 
    2099/     733 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    2100/     733 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    2101/     738 :                     STR_BANK:
    2102/     738 : 20 42 41 4E 4B 3D   	data " BANK=", 0
              73E : 00                
    2103/     73F :                     STR_CHIP:
    2104/     73F : 20 43 48 49 50 3D   	data " CHIP=", 0
              745 : 00                
    2105/     746 :                     STR_ADD:
    2106/     746 : 20 41 44 44 28 46   	data " ADD(Fx0)=", 0
              74C : 78 30 29 3D 00    
    2107/     751 :                     STR_CALC:
    2108/     751 : 0D 0A 43 61 6C 63   	data "\r\nCalculator Mode\r\n", 0
              757 : 75 6C 61 74 6F 72 
              75D : 20 4D 6F 64 65 0D 
              763 : 0A 00             
    2109/     765 :                     STR_CMDERR:
    2110/     765 : 0D 0A 64 3A 64 75   	data "\r\nd:dump RAM, w:write RAM, W:Write PM, D:Dump PM\r\nC:Clear, c:Calc mode\r\n", 0 ;
              76B : 6D 70 20 52 41 4D 
              771 : 2C 20 77 3A 77 72 
              777 : 69 74 65 20 52 41 
              77D : 4D 2C 20 57 3A 57 
              783 : 72 69 74 65 20 50 
              789 : 4D 2C 20 44 3A 44 
              78F : 75 6D 70 20 50 4D 
              795 : 0D 0A 43 3A 43 6C 
              79B : 65 61 72 2C 20 63 
              7A1 : 3A 43 61 6C 63 20 
              7A7 : 6D 6F 64 65 0D 0A 
              7AD : 00                
    2111/     7AE :                     STR_CALC_SQRT:
    2112/     7AE : 20 53 51 52 0D 0A   	data " SQR\r\n",0
              7B4 : 00                
    2113/     7B5 :                     
    2114/     7B5 :                     ;;;----------------------------------------------------------------------------
    2115/     7B5 :                     ;;; String data
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 39 - 2023/02/23 11:05:23


    2116/     7B5 :                     ;;;----------------------------------------------------------------------------
    2117/     7B5 :                     	
    2118/     7B5 :                     ;;;---------------------------------------------------------------------------
    2119/     7B5 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    2120/     7B5 :                     ;;;---------------------------------------------------------------------------
    2121/     7B5 :                     ;;; READPM_P0
    2122/     7B5 :                     ;;; P1 = (P0)
    2123/     7B5 :                     ;;; input: P0
    2124/     7B5 :                     ;;; output: P1
    2125/     7B5 :                     ;;;---------------------------------------------------------------------------
    2126/     7B5 :                     ;;; 	org 0FF0H
    2127/     7B5 :                     ;;; PM_READ_P0_P1:
    2128/     7B5 : 32                  	FIN P1
    2129/     7B6 : C0                  	BBL 0
    2130/     7B7 :                     
    2131/     7B7 :                     	end
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 40 - 2023/02/23 11:05:23


  Symbol Table (* = unused):
  --------------------------

 ADD_FRACTION_P6_P7 :           38F C | *ADD_FRA_EXIT :                 39D C |
 ADD_FRA_LOOP :                 394 C |  ALIGN_EXIT :                   4C7 C |
 ALIGN_REGISTER_XY :            4A6 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - |  BANK_PMSELECT :                  0 - |
 BANK_RAM0 :                      0 - |  BANK_RAM1 :                      0 - |
 BANK_RAM2 :                      1 - |  BANK_RAM3 :                      1 - |
 BANK_SERIAL :                    0 - |  BAUDRATE :                    2580 - |
 BLINK_L0 :                     68A C |  BLINK_LED :                    687 C |
 BLINK_SUB :                    69E C | *CASESENSITIVE :                  0 - |
 CHANGE_SIGN_REG_X :            4F6 C |  CHIP_PMSELECT :                 40 - |
 CHIP_RAM0 :                      0 - |  CHIP_RAM1 :                     40 - |
 CHIP_RAM2 :                      0 - |  CHIP_RAM3 :                     40 - |
 CHIP_SERIAL :                    0 - |  CLEAR_FRACTION_P0 :            4CE C |
 CLEAR_REGISTER_L0 :            4CF C |  CLEAR_REGISTER_P0 :            4C8 C |
 CMDCL_L1 :                     1DB C |  CMDC_ADD :                     341 C |
 CMDC_ADD_EXIT :                376 C |  CMDC_ADD_SAMESIGN :            370 C |
 CMDC_ADD_ZERO_EXIT :           378 C |
 CMDC_AUTOMATIC_PUSH_AND_CLEAR :                                        2E6 C |
 CMDC_CLEAR :                   2FB C |
 CMDC_CLEAR_AUTOMATIC_ENTER_FLAG :                                      2E0 C |
 CMDC_DIGITPOINT :              2F5 C |  CMDC_DIV :                     4FD C |
 CMDC_DIVIDEND_ZERO :           547 C |  CMDC_DIV_BY_ZERO :             541 C |
*CMDC_DP_EXIT :                 2FA C |  CMDC_ENTER :                   30D C |
 CMDC_L1 :                      229 C |  CMDC_L10 :                     2C0 C |
 CMDC_L11 :                     2CA C |  CMDC_L2 :                      233 C |
 CMDC_L3 :                      243 C |  CMDC_L4 :                      253 C |
 CMDC_L5 :                      263 C |  CMDC_L6 :                      273 C |
 CMDC_L7 :                      27F C |  CMDC_L8 :                      28D C |
 CMDC_L81 :                     299 C |  CMDC_L9 :                      2A9 C |
 CMDC_LOOP :                    213 C |  CMDC_MUL :                     400 C |
 CMDC_MUL_EXIT :                422 C |  CMDC_MUL_L0 :                  420 C |
 CMDC_MUL_ZERO :                424 C |  CMDC_NORMALIZE_AND_POP :       37E C |
 CMDC_NUM :                     321 C |  CMDC_NUM_EXIT :                340 C |
 CMDC_PRINT :                   454 C |  CMDC_PUSH_EXIT :               2F4 C |
 CMDC_PUSH_L0 :                 2EC C |  CMDC_SETNUM :                  331 C |
 CMDC_SET_AUTOMATIC_ENTER_FLAG :                                        2DA C |
 CMDC_SQR_EXIT :                0FA C |  CMDC_SQR_LOOP :                0D2 C |
 CMDC_SQR_RETURN :              2A5 C |  CMDC_SQUAREROOT :              0C1 C |
 CMDC_START :                   206 C |  CMDC_SUB :                     46D C |
 CMDDP_L0 :                     1B0 C |  CMDDP_L1 :                     1BF C |
 CMDD_L1 :                      102 C |  CMDD_L2 :                      104 C |
 CMDWP_L1 :                     18E C |  CMDW_L1 :                      12C C |
 CMDW_L2 :                      12E C |  CMD_LOOP :                      13 C |
 CMD_SUB_X_Y :                  368 C | *CMD_SUB_Y_X :                  356 C |
 CMP_EXIT01 :                   0A8 C |  CMP_EXIT11 :                   0A9 C |
 CMP_FRACTION_EXIT10 :          3C8 C |  CMP_FRACTION_EXIT11 :          3C9 C |
 CMP_FRACTION_LOOP :            3B2 C |  CMP_FRACTION_NEXT :            3C5 C |
 CMP_FRACTION_P6_P7 :           3B0 C |  CMP_L1 :                       0A0 C |
 CMP_P0P1 :                      98 C |  COMMAND_BP :                   1E3 C |
 COMMAND_C :                    200 C |  COMMAND_CP :                   1D5 C |
 COMMAND_D :                    100 C |  COMMAND_DP :                   1AA C |
 COMMAND_G :                    1F6 C |  COMMAND_W :                    12A C |
 COMMAND_WP :                   16D C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CTOI_09 :                      673 C |
 CTOI_P1 :                      66A C | *DATE :                "2023/02/23" - |
 DISPLED_P1 :                   676 C |  DIV_FRAC :                     53D C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 41 - 2023/02/23 11:05:23


 DIV_FRACTION_XY :              54C C |  DIV_FRAC_ADJ_EXP :             52A C |
 DIV_LOOP :                     558 C |  DIV_LOOP_D14 :                 517 C |
 DIV_LOOP_L0 :                  51F C |  DIV_SUB_COUNT :                55A C |
 DIV_SUB_COUNT_EXIT :           568 C |  EY_GE_EX :                     4C0 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR_L1 :                   608 C |  GETCHAR_L2 :                   60D C |
 GETCHAR_L3 :                   610 C |  GETCHAR_L4 :                   617 C |
 GETCHAR_L5 :                   61C C |  GETCHAR_L6 :                   61F C |
 GETCHAR_OK :                   627 C |  GETCHAR_P1 :                   600 C |
 GET_SIGN_EXIT :                58A C |  GET_SIGN_PRODUCT_P6_P7 :       580 C |
*HAS64 :                          1 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  INIT_SERIAL :                  664 C |
*INSUPMODE :                      0 - |  ISNUM_FALSE :                  2D9 C |
 ISNUM_P1 :                     2CC C |  ISZERO_EXIT0 :                 4F5 C |
 ISZERO_LOOP :                  4EE C |  ISZERO_REGISTER_P0 :           4EC C |
 L0 :                            2F C |  L1 :                            39 C |
 L2 :                            43 C |  L3 :                            4B C |
 L4 :                            53 C |  L41 :                           5B C |
 L5 :                            63 C |  L6 :                            6B C |
 L9 :                            73 C |  LD_FRACTION_L0 :               4E4 C |
 LD_FRACTION_P6_P7 :            4E4 C |  LD_REGISTER_P6_P7 :            4D4 C |
*LISTON :                         1 - |  L_CR :                          17 C |
*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL_ADD_LOOP :                 448 C |  MUL_FRACTION_XY :              42A C |
 MUL_LOOP :                     43E C |  MUL_LOOP_NEXT :                44C C |
*NESTMAX :                      100 - |  NM_EXIT :                      3F1 C |
 NM_GO_SHIFT :                  3DC C |  NM_LOOP :                      3D2 C |
 NM_LOOP_ENTRY :                3DA C |  NM_NOERROR :                   3F0 C |
 NORMALIZE_REGISTER_P0 :        3CA C | *P7_EXIT :                      70E C |
 P7_PUT :                       704 C |  P7_UPPER0 :                    70B C |
*PADDING :                        1 - |  PM_READ_P0_P1 :               0FFE - |
 PM_SELECTBANK_ACC :            0BC C |  PM_TOP :                      0F00 - |
 PM_WRITE_P0_P1 :               0AA C |  PM_WRITE_READROUTINE :         0B0 C |
 PRINTACC_L1 :                  650 C |  PRINT_ACC :                    648 C |
 PRINT_CHECK_EXP :              5B1 C |  PRINT_CR :                     65C C |
 PRINT_CRLF :                   653 C |  PRINT_EXIT :                   5D0 C |
*PRINT_LF :                     660 C |  PRINT_P0 :                     700 C |
 PRINT_REGISTER_EQU_ERR :       59A C |  PRINT_REGISTER_L1 :            5CE C |
 PRINT_REGISTER_LOOP :          5BB C |  PRINT_REGISTER_LOOP_SETUP :    5B8 C |
 PRINT_REGISTER_P0 :            592 C |  PRINT_REGISTER_SGN :           5A4 C |
 PRINT_REGISTER_WITH_NAME_P0 :  58B C |  PUTCHAR_L1 :                   630 C |
 PUTCHAR_L2 :                   63F C |  PUTCHAR_P1 :                   628 C |
 REG_A :                         50 - |  REG_B :                         60 - |
*REG_C :                         70 - |  REG_ERROR_DIVBYZERO :            2 - |
 REG_ERROR_OVERFLOW :             1 - |  REG_M :                         40 - |
 REG_T :                         30 - |  REG_X :                          0 - |
 REG_Y :                         10 - |  REG_Z :                         20 - |
*RELAXED :                        0 - |  SETBANKCHIP_P5 :                79 C |
 SHIFTL_EXIT :                  4A5 C |  SHIFTL_LOOP :                  48E C |
 SHIFTL_NEXT :                  4A3 C | *SHIFTL_READ :                  492 C |
 SHIFTL_WRITE :                 498 C |  SHIFTR_EXIT :                  486 C |
 SHIFTR_LOOP :                  478 C |  SHIFTR_NEXT :                  484 C |
*SHIFTR_READ :                  47B C |  SHIFTR_WRITE :                 47D C |
 SHIFT_FRACTION_LEFT_P0_ACC :   487 C |  SHIFT_FRACTION_RIGHT_P0_ACC :  471 C |
 STR_ADD :                      746 C |  STR_BANK :                     738 C |
 STR_CALC :                     751 C |  STR_CALC_SQRT :                7AE C |
 STR_CHIP :                     73F C |  STR_CMDERR :                   765 C |
 STR_OMSG :                     70F C |  STR_VFD_INIT :                 733 C |
 SUB_FRACTION_P6_P7 :           39E C |  SUB_FRA_LOOP :                 3A4 C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 42 - 2023/02/23 11:05:23


*TIME :                  "11:05:23" - | *TRUE :                           1 - |
*VERSION :                     142F - | *W100_EXIT :                    6C7 C |
 W100_L1 :                      6BC C | *W10_EXIT :                     6B7 C |
 W10_L1 :                       6AC C |  WAIT100MS :                    6B8 C |
 WAIT10MS :                     6A8 C |

    236 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 43 - 2023/02/23 11:05:23


  Register Definitions (* = unused):
  ----------------------------------

 P0 --> R0P                           |  P1 --> R1P                          
*P2 --> R2P                           |  P3 --> R3P                          
*P4 --> R4P                           |  P5 --> R5P                          
 P6 --> R6P                           |  P7 --> R7P                          
*R10 --> R10                          | *R10R11 --> R5P                      
*R11 --> R11                          | *R12 --> R12                         
*R12R13 --> R6P                       | *R13 --> R13                         
*R14 --> R14                          | *R14R15 --> R7P                      
*R15 --> R15                         

     17 definitions

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 44 - 2023/02/23 11:05:23


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
LO                                    |

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 45 - 2023/02/23 11:05:23


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   2273 lines source file
      2 passes
      0 errors
      0 warnings
