 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 1 - 2023/02/17 14:46:32


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with calculator program for 4004 evaluation board
       3/       0 :                     ;;; by Ryo Mukai
       4/       0 :                     ;;; 2023/02/16
       5/       0 :                     ;;;---------------------------------------------------------------------------
       6/       0 :                     
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     ;;; This source can be assembled with the Macroassembler AS
       9/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      10/       0 :                     ;;;---------------------------------------------------------------------------
      11/       0 :                     ;;; Conditional jumps syntax for Macroassembler AS:
      12/       0 :                     ;;; JCN T     jump if TEST = 0 - most positive voltage or +5V
      13/       0 :                     ;;; JCN TN    jump if TEST = 1 - most negative voltage or -10V
      14/       0 :                     ;;; JCN C     jump if carry = 1
      15/       0 :                     ;;; JCN CN    jump if carry = 0
      16/       0 :                     ;;; JCN Z     jump if accumulator = 0
      17/       0 :                     ;;; JCN ZN    jump if accumulator != 0
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     
      20/       0 :                     	cpu 4004        ; AS's command to specify CPU
      21/       0 :                     
      22/       0 :                     ;;;---------------------------------------------------------------------------
      23/       0 :                     ;;; function for label to address for FIM&FIN
      24/       0 :                     ;;;---------------------------------------------------------------------------
      25/       0 :                     
      26/       0 :                     lo     	function x, ((x)&255)
      27/       0 :                     
      28/       0 :                     ;;;---------------------------------------------------------------------------
      29/       0 :                     ;;; functuon for setting counter for ISZ loop
      30/       0 :                     ;;;---------------------------------------------------------------------------
      31/       0 :                     
      32/       0 :                     loop 	function x, (16-(x))
      33/       0 :                     loops   function x,y, ((16-(x))<<4 + (16-(y)))
      34/       0 :                     
      35/       0 :                     ;;;---------------------------------------------------------------------------
      36/       0 :                     ;;; Alias for Registers and Register Pairs
      37/       0 :                     ;;;---------------------------------------------------------------------------
      38/       0 :                     
      39/       0 :                     ;;; Registers
      40/       0 : =R10                 R10	reg RA
      41/       0 : =R11                 R11     reg RB
      42/       0 : =R12                 R12     reg RC
      43/       0 : =R13                 R13 	reg RD
      44/       0 : =R14                 R14     reg RE
      45/       0 : =R15                 R15     reg RF
      46/       0 :                     
      47/       0 :                     ;;; Register Pairs
      48/       0 : =R0P                 P0      reg R0R1
      49/       0 : =R1P                 P1      reg R2R3
      50/       0 : =R2P                 P2      reg R4R5
      51/       0 : =R3P                 P3      reg R6R7
      52/       0 : =R4P                 P4      reg R8R9
      53/       0 : =R5P                 P5      reg RARB
      54/       0 : =R6P                 P6      reg RCRD
      55/       0 : =R7P                 P7      reg RERF
      56/       0 : =R5P                 R10R11  reg RARB
      57/       0 : =R6P                 R12R13  reg RCRD
      58/       0 : =R7P                 R14R15  reg RERF
      59/       0 :                     
      60/       0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 2 - 2023/02/17 14:46:32


      61/       0 :                     ;;; Hardware Configuration
      62/       0 :                     ;;;---------------------------------------------------------------------------
      63/       0 :                     
      64/       0 :                     ;;; BANK# for DCL
      65/       0 : =0H                  BANK_RAM0	equ 0
      66/       0 : =0H                  BANK_RAM1      	equ 0
      67/       0 : =1H                  BANK_RAM2      	equ 1
      68/       0 : =1H                  BANK_RAM3      	equ 1
      69/       0 :                     
      70/       0 :                     ;;; CHIP#=(D7.D6.000000)
      71/       0 : =0H                  CHIP_RAM0      	equ 00H
      72/       0 : =40H                 CHIP_RAM1      	equ 40H
      73/       0 : =0H                  CHIP_RAM2      	equ 00H
      74/       0 : =40H                 CHIP_RAM3      	equ 40H
      75/       0 :                     
      76/       0 :                     ;;; Serial Port (BANK# and CHIP#)
      77/       0 : =0H                  BANK_SERIAL     equ BANK_RAM0
      78/       0 : =0H                  CHIP_SERIAL     equ CHIP_RAM0
      79/       0 :                     
      80/       0 :                     ;;; Program Memory
      81/       0 : =0F00H               PM_TOP          equ 0F00H
      82/       0 : =0FFEH               PM_READ_P0_P2   equ 0FFEH
      83/       0 :                     
      84/       0 :                     ;;; Default Bank
      85/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      86/       0 :                     		
      87/       0 :                     ;;;---------------------------------------------------------------------------
      88/       0 :                     ;;; Program Start
      89/       0 :                     ;;;---------------------------------------------------------------------------
      90/       0 :                     	org 0000H		; beginning of Program Memory
      91/       0 :                     
      92/       0 :                     MAIN:
      93/       0 : F0                          CLB
      94/       1 :                     
      95/       1 : =>FALSE              	if (BANK_DEFAULT != 0)
      96/       1 :                     	;; initialize DL to bank 0
      97/       1 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
      98/       1 :                     	;; except when in use for another banks.
      99/       1 :                     	LDM BANK_DEFAULT
     100/       1 :                     	DCL
     101/       1 : [95]                 	endif
     102/       1 :                     	
     103/       1 : 56 64               	JMS INIT_SERIAL ; Initialize Serial Port
     104/       3 : 50 A6               	JMS PM_WRITE_READROUTINE ; write PM_READ code on program memory
     105/       5 :                     
     106/       5 :                     ;       JCN TN, $		wait for TEST="0" (button pressed)
     107/       5 : D2                          LDM 2
     108/       6 : 56 8E                       JMS BLINK_LED   ; blink LED 2 times
     109/       8 : 20 33               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     110/       A : 57 00                       JMS PRINT_P0;
     111/       C : 20 0F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     112/       E : 57 00                       JMS PRINT_P0;
     113/      10 :                     
     114/      10 :                     CMD_LOOP:
     115/      10 : 22 5D                       FIM P1, ']'		; prompt
     116/      12 : 56 28                       JMS PUTCHAR_P1
     117/      14 :                     
     118/      14 :                     L_CR:
     119/      14 : 56 00               	JMS GETCHAR_P1
     120/      16 : 56 87                       JMS DISPLED_ACC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 3 - 2023/02/17 14:46:32


     121/      18 : 56 76                       JMS DISPLED_P1
     122/      1A : 20 0D               	FIM P0, '\r'
     123/      1C : 50 8E               	JMS CMP_P0P1
     124/      1E : 14 14               	JCN Z, L_CR		; skip CR
     125/      20 :                     
     126/      20 : 56 28               	JMS PUTCHAR_P1		; echo input
     127/      22 :                     
     128/      22 : 20 0A               	FIM P0, '\n'
     129/      24 : 50 8E               	JMS CMP_P0P1
     130/      26 : 1C 2E               	JCN ZN, L0
     131/      28 : 22 0D               	FIM P1, '\r'
     132/      2A : 56 28               	JMS PUTCHAR_P1		; put CR
     133/      2C : 40 10               	JUN CMD_LOOP
     134/      2E :                     
     135/      2E :                     L0:
     136/      2E : 20 64               	FIM P0, 'd'		; dump data memory
     137/      30 : 50 8E               	JMS CMP_P0P1
     138/      32 : 1C 38               	JCN ZN, L1
     139/      34 : 50 70               	JMS SETBANKCHIP_P5
     140/      36 : 41 00               	JUN COMMAND_D
     141/      38 :                     L1:
     142/      38 : 20 77               	FIM P0, 'w'		; write to data memory
     143/      3A : 50 8E               	JMS CMP_P0P1
     144/      3C : 1C 42               	JCN ZN, L2
     145/      3E : 50 70               	JMS SETBANKCHIP_P5
     146/      40 : 41 2A               	JUN COMMAND_W
     147/      42 :                     L2:
     148/      42 : 20 44               	FIM P0, 'D'		; Dump program memory
     149/      44 : 50 8E               	JMS CMP_P0P1
     150/      46 : 1C 4A               	JCN ZN, L3
     151/      48 : 41 AA               	JUN COMMAND_DP
     152/      4A :                     L3:
     153/      4A : 20 57               	FIM P0, 'W'		; Write Program memory
     154/      4C : 50 8E               	JMS CMP_P0P1
     155/      4E : 1C 52               	JCN ZN, L4
     156/      50 : 41 6D               	JUN COMMAND_WP
     157/      52 :                     L4:
     158/      52 : 20 43               	FIM P0, 'C'		; Clear program memory
     159/      54 : 50 8E               	JMS CMP_P0P1
     160/      56 : 1C 5A               	JCN ZN, L5
     161/      58 : 41 D3               	JUN COMMAND_CL
     162/      5A :                     L5:
     163/      5A : 20 67               	FIM P0, 'g'		; Go to PM_TOP (0F00H)
     164/      5C : 50 8E               	JMS CMP_P0P1
     165/      5E : 1C 62               	JCN ZN, L6
     166/      60 : 41 E1               	JUN COMMAND_G
     167/      62 :                     L6:
     168/      62 : 20 63               	FIM P0, 'c'		; Calculator
     169/      64 : 50 8E               	JMS CMP_P0P1
     170/      66 : 1C 6A               	JCN ZN, L9
     171/      68 : 42 00               	JUN COMMAND_C
     172/      6A :                     L9:
     173/      6A : 20 65               	FIM P0, lo(STR_CMDERR)
     174/      6C : 57 00               	JMS PRINT_P0
     175/      6E : 40 10               	JUN CMD_LOOP
     176/      70 :                     
     177/      70 :                     ;;;---------------------------------------------------------------------------
     178/      70 :                     ;;; SETBANKCHIP_P5
     179/      70 :                     ;;; Set #bank and #chip to R10 and R11
     180/      70 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 4 - 2023/02/17 14:46:32


     181/      70 :                     SETBANKCHIP_P5:
     182/      70 : 20 38               	FIM P0, lo(STR_BANK)	; print " BANK="
     183/      72 : 57 00               	JMS PRINT_P0
     184/      74 : 56 00               	JMS GETCHAR_P1
     185/      76 : 56 28               	JMS PUTCHAR_P1
     186/      78 : 56 6A               	JMS CTOI_P1_R5
     187/      7A : A5                  	LD R5
     188/      7B : BA                  	XCH R10			; save BANK to R10
     189/      7C :                     
     190/      7C : 20 3F               	FIM P0, lo(STR_CHIP)	; print " CHIP="
     191/      7E : 57 00               	JMS PRINT_P0
     192/      80 : 56 00               	JMS GETCHAR_P1
     193/      82 : 56 28               	JMS PUTCHAR_P1
     194/      84 : 56 6A               	JMS CTOI_P1_R5
     195/      86 : 56 53               	JMS PRINT_CRLF
     196/      88 : F0                  	CLB
     197/      89 : A5                  	LD R5		; R5 is #chip(0.0.D3.D2)
     198/      8A : F5                  	RAL
     199/      8B : F5                  	RAL
     200/      8C : BB                  	XCH R11 	;set D3D2.00@X2 to R11 (0000 or 0100 or 1000 or 1100)
     201/      8D : C0                  	BBL 0
     202/      8E :                     	
     203/      8E :                     ;;;---------------------------------------------------------------------------
     204/      8E :                     ;;; CMP_P0P1
     205/      8E :                     ;;; compare P0(R0R1) and P1(R2R3)
     206/      8E :                     ;;; input: P0, P1
     207/      8E :                     ;;; output: ACC=1,CY=0 if P0<P1
     208/      8E :                     ;;;         ACC=0,CY=1 if P0==P1 
     209/      8E :                     ;;;         ACC=1,CY=1 if P0>P1
     210/      8E :                     ;;; P0 - P1 (the carry bit is a complement of the borrow)
     211/      8E :                     ;;;---------------------------------------------------------------------------
     212/      8E :                     CMP_P0P1:
     213/      8E : F0                  	CLB
     214/      8F : A0                  	LD R0			
     215/      90 : 92                  	SUB R2			;R0-R2
     216/      91 : 14 96               	JCN Z, CMP_L1
     217/      93 : 12 9F               	JCN C, CMP_EXIT11
     218/      95 : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     219/      96 :                     CMP_L1:	
     220/      96 : F0                  	CLB
     221/      97 : A1                  	LD R1
     222/      98 : 93                  	SUB R3			;R1-R3
     223/      99 : 14 9E               	JCN Z, CMP_EXIT01
     224/      9B : 12 9F               	JCN C, CMP_EXIT11
     225/      9D : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     226/      9E :                     CMP_EXIT01:
     227/      9E : C0                  	BBL 0			;P0==P1, ACC=0, CY=1
     228/      9F :                     CMP_EXIT11
     229/      9F : C1                  	BBL 1			;P0>P1,  ACC=1, CY=1
     230/      A0 :                     	
     231/      A0 :                     ;;;---------------------------------------------------------------------------
     232/      A0 :                     ;;; PM_WRITE_P0_P1
     233/      A0 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
     234/      A0 :                     ;;; (0F00H+P0) = P1
     235/      A0 :                     ;;; input: P0, P1
     236/      A0 :                     ;;; output: none
     237/      A0 :                     ;;;---------------------------------------------------------------------------
     238/      A0 :                     	
     239/      A0 :                     PM_WRITE_P0_P1:
     240/      A0 : 21                  	SRC P0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 5 - 2023/02/17 14:46:32


     241/      A1 : A3                  	LD R3
     242/      A2 : E3                  	WPM			; write lower 4bit
     243/      A3 : A2                  	LD R2
     244/      A4 : E3                  	WPM			; write higher 4bit
     245/      A5 : C0                  	BBL 0
     246/      A6 :                     
     247/      A6 :                     ;;;---------------------------------------------------------------------------
     248/      A6 :                     ;;; PM_WRITE_READROUTINE
     249/      A6 :                     ;;; preparation for reading program memory
     250/      A6 :                     ;;;---------------------------------------------------------------------------
     251/      A6 :                     PM_WRITE_READROUTINE:	
     252/      A6 : 20 FE               	FIM P0, lo(PM_READ_P0_P2)
     253/      A8 : 22 34               	FIM P1, 34H		; FIN P2
     254/      AA : 50 A0               	JMS PM_WRITE_P0_P1
     255/      AC : 61                  	INC R1
     256/      AD : 22 C0               	FIM P1, 0C0H		; BBL 0
     257/      AF : 50 A0               	JMS PM_WRITE_P0_P1
     258/      B1 : C0                  	BBL 0
     259/      B2 :                     
     260/      B2 :                     ;;;---------------------------------------------------------------------------
     261/      B2 :                     ;;; CMDC_SQUAREROOT:
     262/      B2 :                     ;;; X = sqrt(X)
     263/      B2 :                     ;;; registers Y, Z, T are destroyed
     264/      B2 :                     ;;; this routine cannot be a subroutine because of the limitation of stack
     265/      B2 :                     ;;;---------------------------------------------------------------------------
     266/      B2 :                     CMDC_SQUAREROOT:
     267/      B2 : 20 30               	FIM P0, REG_T
     268/      B4 : 54 C8               	JMS CLEAR_REGISTER_P0
     269/      B6 : DE                  	LDM 14
     270/      B7 : B1                  	XCH R1
     271/      B8 : 21                  	SRC P0
     272/      B9 : D5                  	LDM 5
     273/      BA : E0                  	WRM			; REG_T=0.5
     274/      BB :                     	
     275/      BB : 2C 50               	FIM P6, REG_A		; A = X
     276/      BD : 2E 00               	FIM P7, REG_X
     277/      BF : 54 D4               	JMS LD_REGISTER_P6_P7
     278/      C1 :                     
     279/      C1 : 26 C0               	FIM P3, loops(4, 16)
     280/      C3 :                     ; loop of "0.5 ENTER X ENTER A ENTER X / + *"
     281/      C3 :                     ; REG_T keeps 0.5 
     282/      C3 :                     CMDC_SQR_LOOP:	
     283/      C3 : 2C 20               	FIM P6, REG_Z		; Z = X
     284/      C5 : 2E 00               	FIM P7, REG_X
     285/      C7 : 54 D4               	JMS LD_REGISTER_P6_P7
     286/      C9 :                     
     287/      C9 : 2C 60               	FIM P6, REG_B		; B = X
     288/      CB : 54 D4               	JMS LD_REGISTER_P6_P7
     289/      CD :                     
     290/      CD : 2C 10               	FIM P6, REG_Y		; Y = A
     291/      CF : 2E 50               	FIM P7, REG_A
     292/      D1 : 54 D4               	JMS LD_REGISTER_P6_P7
     293/      D3 :                     
     294/      D3 : 54 FD               	JMS CMDC_DIV
     295/      D5 : 53 42               	JMS CMDC_ADD
     296/      D7 : 54 00               	JMS CMDC_MUL
     297/      D9 :                     
     298/      D9 : 20 00               	FIM P0, REG_X
     299/      DB : 55 92               	JMS PRINT_REGISTER_P0
     300/      DD : 56 5C               	JMS PRINT_CR
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 6 - 2023/02/17 14:46:32


     301/      DF :                     
     302/      DF : 2C 60               	FIM P6, REG_B
     303/      E1 : 2E 00               	FIM P7, REG_X
     304/      E3 : 53 B1               	JMS CMP_FRACTION_P6_P7
     305/      E5 : 14 EB               	JCN Z, CMDC_SQR_EXIT
     306/      E7 :                     	
     307/      E7 : 77 C3               	ISZ R7, CMDC_SQR_LOOP
     308/      E9 : 76 C3               	ISZ R6, CMDC_SQR_LOOP
     309/      EB :                     	
     310/      EB :                     CMDC_SQR_EXIT:
     311/      EB : 42 A7               	JUN CMDC_SQR_RETURN
     312/      ED :                     
     313/      ED :                     ;;;---------------------------------------------------------------------------
     314/      ED :                     ;;; Monitor commands located in page 0100H
     315/      ED :                     ;;;---------------------------------------------------------------------------
     316/     100 :                     	org 0100H
     317/     100 :                     ;;;---------------------------------------------------------------------------
     318/     100 :                     ;;; COMMAND_D
     319/     100 :                     ;;; Dump Data RAM
     320/     100 :                     ;;; input:
     321/     100 :                     ;;; 	R10: #bank
     322/     100 :                     ;;; 	R11: #chip (D3.D2.0.0)
     323/     100 :                     ;;; working memory:
     324/     100 :                     ;;;     P0(R0R1): working for PRINT_P0
     325/     100 :                     ;;;     P1(R2R3): working for PUTCHAR_P1, PRINT_ACC
     326/     100 :                     ;;;     R4: loop counter for #REG (0.0.D1.D0)
     327/     100 :                     ;;;     R5: working for input
     328/     100 :                     ;;;     R6: working for SCR (R6=R11+R4)
     329/     100 :                     ;;;     R7: working for SCR #CHARACTER (D3.D2.D1.D0)@X3 (loop counter)
     330/     100 :                     ;;;         SCR R6R7
     331/     100 :                     ;;; 	R11: #CHIP (D3.D2.0.0)@X2
     332/     100 :                     ;;;     P6(R12R13): working for uart
     333/     100 :                     ;;;     P7(R14R15): working for uart
     334/     100 :                     ;;;---------------------------------------------------------------------------
     335/     100 :                     COMMAND_D:
     336/     100 :                     	;; PRINT 4 registers
     337/     100 : DC                  	LDM loop(4)		; 4 regs
     338/     101 : B4                  	XCH R4			; R4=loop(4)
     339/     102 :                     
     340/     102 :                     	;; PRINT 16 characters
     341/     102 :                     CMDD_L1:
     342/     102 : D0                  	LDM loop(16)		; 16 characters
     343/     103 : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     344/     104 :                     CMDD_L2:
     345/     104 : F0                  	CLB
     346/     105 : D4                  	LDM 4
     347/     106 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     348/     107 : F1                  	CLC
     349/     108 : 8B                  	ADD R11
     350/     109 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     351/     10A :                     	
     352/     10A : 27                  	SRC R6R7	; set address
     353/     10B : E9                  	RDM		; read data memory
     354/     10C : 56 48               	JMS PRINT_ACC
     355/     10E : 77 04               	ISZ R7,CMDD_L2
     356/     110 :                     
     357/     110 :                     	;; PRINT STATUS 
     358/     110 : 22 3A               	FIM P1, ':'
     359/     112 : 56 28               	JMS PUTCHAR_P1
     360/     114 : 27                  	SRC R6R7	; set address
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 7 - 2023/02/17 14:46:32


     361/     115 : EC                  	RD0
     362/     116 : 56 48               	JMS PRINT_ACC
     363/     118 : 27                  	SRC R6R7	; set address
     364/     119 : ED                  	RD1
     365/     11A : 56 48               	JMS PRINT_ACC
     366/     11C : 27                  	SRC R6R7	; set address
     367/     11D : EE                  	RD2
     368/     11E : 56 48               	JMS PRINT_ACC
     369/     120 : 27                  	SRC R6R7	; set address
     370/     121 : EF                  	RD3
     371/     122 : 56 48               	JMS PRINT_ACC
     372/     124 : 56 53               	JMS PRINT_CRLF
     373/     126 :                     
     374/     126 : 74 02               	ISZ R4,CMDD_L1
     375/     128 : 40 10               	JUN CMD_LOOP		; return to command loop
     376/     12A :                     	
     377/     12A :                     ;;;---------------------------------------------------------------------------
     378/     12A :                     ;;; COMMAND_W:
     379/     12A :                     ;;; Write Data RAM
     380/     12A :                     ;;; input:
     381/     12A :                     ;;; 	R10: #bank
     382/     12A :                     ;;; 	R11: #chip (D3.D2.0.0)
     383/     12A :                     ;;;---------------------------------------------------------------------------
     384/     12A :                     COMMAND_W:
     385/     12A :                     	;; PRINT 4 registers
     386/     12A : DC                  	LDM loop(4)		; 4 regs
     387/     12B : B4                  	XCH R4			; R4=loop(4)
     388/     12C :                     
     389/     12C :                     	;; PRINT 16 characters
     390/     12C :                     CMDW_L1:
     391/     12C : D0                  	LDM loop(16)		; 16 characters
     392/     12D : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     393/     12E :                     CMDW_L2:
     394/     12E : F0                  	CLB
     395/     12F : D4                  	LDM 4
     396/     130 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     397/     131 : F1                  	CLC
     398/     132 : 8B                  	ADD R11
     399/     133 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     400/     134 :                     
     401/     134 : 56 00               	JMS GETCHAR_P1
     402/     136 : 56 6A               	JMS CTOI_P1_R5
     403/     138 :                     
     404/     138 : 27                  	SRC R6R7	; set address
     405/     139 : A5                  	LD R5
     406/     13A : E0                  	WRM			; write to memory
     407/     13B : 56 48               	JMS PRINT_ACC
     408/     13D : 77 2E               	ISZ R7,CMDW_L2
     409/     13F :                     
     410/     13F :                     	;; PRINT STATUS 
     411/     13F : 22 3A               	FIM P1, ':'
     412/     141 : 56 28               	JMS PUTCHAR_P1
     413/     143 :                     
     414/     143 : 56 00               	JMS GETCHAR_P1
     415/     145 : 56 6A               	JMS CTOI_P1_R5
     416/     147 :                     
     417/     147 : 27                  	SRC R6R7	; set address
     418/     148 : A5                  	LD R5
     419/     149 : E4                  	WR0
     420/     14A : 56 48               	JMS PRINT_ACC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 8 - 2023/02/17 14:46:32


     421/     14C :                     
     422/     14C : 56 00               	JMS GETCHAR_P1
     423/     14E : 56 6A               	JMS CTOI_P1_R5
     424/     150 :                     
     425/     150 : 27                  	SRC R6R7	; set address
     426/     151 : A5                  	LD R5
     427/     152 : E5                  	WR1
     428/     153 : 56 48               	JMS PRINT_ACC
     429/     155 :                     
     430/     155 : 56 00               	JMS GETCHAR_P1
     431/     157 : 56 6A               	JMS CTOI_P1_R5
     432/     159 :                     
     433/     159 : 27                  	SRC R6R7	; set address
     434/     15A : A5                  	LD R5
     435/     15B : E6                  	WR2
     436/     15C : 56 48               	JMS PRINT_ACC
     437/     15E :                     
     438/     15E : 56 00               	JMS GETCHAR_P1
     439/     160 : 56 6A               	JMS CTOI_P1_R5
     440/     162 :                     
     441/     162 : 27                  	SRC R6R7	; set address
     442/     163 : A5                  	LD R5
     443/     164 : E7                  	WR3
     444/     165 : 56 48               	JMS PRINT_ACC
     445/     167 : 56 53               	JMS PRINT_CRLF
     446/     169 :                     
     447/     169 : 74 2C               	ISZ R4,CMDW_L1
     448/     16B :                     	
     449/     16B : 40 10               	JUN CMD_LOOP		; return to command loop
     450/     16D :                     
     451/     16D :                     ;;;---------------------------------------------------------------------------
     452/     16D :                     ;;; COMMAND_WP
     453/     16D :                     ;;; Write Program Memory
     454/     16D :                     ;;;---------------------------------------------------------------------------
     455/     16D :                     COMMAND_WP:
     456/     16D : 20 46               	FIM P0, lo(STR_ADD)	; print " ADD="
     457/     16F : 57 00               	JMS PRINT_P0
     458/     171 : 56 00               	JMS GETCHAR_P1
     459/     173 : 56 28               	JMS PUTCHAR_P1
     460/     175 : 56 6A               	JMS CTOI_P1_R5
     461/     177 : 56 53               	JMS PRINT_CRLF
     462/     179 :                     
     463/     179 : 22 46               	FIM P1,'F'
     464/     17B : 56 28               	JMS PUTCHAR_P1
     465/     17D : A5                  	LD R5
     466/     17E : 56 48               	JMS PRINT_ACC
     467/     180 : 22 30               	FIM P1,'0'
     468/     182 : 56 28               	JMS PUTCHAR_P1
     469/     184 : 22 3A               	FIM P1,':'
     470/     186 : 56 28               	JMS PUTCHAR_P1
     471/     188 :                     	
     472/     188 : A5                  	LD R5
     473/     189 : B0                  	XCH R0
     474/     18A :                     
     475/     18A : D0                  	LDM 0
     476/     18B : B1                  	XCH R1
     477/     18C :                     CMDWP_L1:
     478/     18C : 22 20               	FIM P1, ' '
     479/     18E : 56 28               	JMS PUTCHAR_P1
     480/     190 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 9 - 2023/02/17 14:46:32


     481/     190 : 56 00               	JMS GETCHAR_P1
     482/     192 : 56 28               	JMS PUTCHAR_P1
     483/     194 : 56 6A               	JMS CTOI_P1_R5
     484/     196 : A5                  	LD R5
     485/     197 : B4                  	XCH R4
     486/     198 :                     
     487/     198 : 56 00               	JMS GETCHAR_P1
     488/     19A : 56 28               	JMS PUTCHAR_P1
     489/     19C : 56 6A               	JMS CTOI_P1_R5
     490/     19E : A5                  	LD R5
     491/     19F : B3                  	XCH R3
     492/     1A0 :                     
     493/     1A0 : A4                  	LD R4
     494/     1A1 : B2                  	XCH R2
     495/     1A2 :                     
     496/     1A2 : 50 A0               	JMS PM_WRITE_P0_P1
     497/     1A4 : 71 8C               	ISZ R1, CMDWP_L1
     498/     1A6 :                     
     499/     1A6 : 56 53               	JMS PRINT_CRLF
     500/     1A8 :                     
     501/     1A8 : 40 10               	JUN CMD_LOOP		; return to command loop
     502/     1AA :                     
     503/     1AA :                     ;;;---------------------------------------------------------------------------
     504/     1AA :                     ;;; COMMAND_DP
     505/     1AA :                     ;;; Dump Program Memory
     506/     1AA :                     ;;;---------------------------------------------------------------------------
     507/     1AA :                     COMMAND_DP:
     508/     1AA : 56 53               	JMS PRINT_CRLF
     509/     1AC :                     
     510/     1AC : 50 A6               	JMS PM_WRITE_READROUTINE
     511/     1AE :                     
     512/     1AE : 20 00               	FIM P0, 00H
     513/     1B0 :                     CMDDP_L0:
     514/     1B0 : 22 46               	FIM P1,'F'
     515/     1B2 : 56 28               	JMS PUTCHAR_P1
     516/     1B4 : A0                  	LD R0
     517/     1B5 : 56 48               	JMS PRINT_ACC
     518/     1B7 : 22 30               	FIM P1,'0'
     519/     1B9 : 56 28               	JMS PUTCHAR_P1
     520/     1BB : 22 3A               	FIM P1,':'
     521/     1BD : 56 28               	JMS PUTCHAR_P1
     522/     1BF :                     CMDDP_L1:	
     523/     1BF : 22 20               	FIM P1, ' '
     524/     1C1 : 56 28               	JMS PUTCHAR_P1
     525/     1C3 :                     
     526/     1C3 : 5F FE               	JMS PM_READ_P0_P2	; Read program memory
     527/     1C5 : A4                  	LD R4
     528/     1C6 : 56 48               	JMS PRINT_ACC
     529/     1C8 : A5                  	LD R5
     530/     1C9 : 56 48               	JMS PRINT_ACC
     531/     1CB :                     
     532/     1CB : 71 BF               	ISZ R1, CMDDP_L1
     533/     1CD : 56 53               	JMS PRINT_CRLF
     534/     1CF : 70 B0                       ISZ R0, CMDDP_L0
     535/     1D1 :                     	
     536/     1D1 : 40 10               	JUN CMD_LOOP		; return to command loop
     537/     1D3 :                     
     538/     1D3 :                     ;;;---------------------------------------------------------------------------
     539/     1D3 :                     ;;; COMMAND_CL
     540/     1D3 :                     ;;; Clear Program Memory
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 10 - 2023/02/17 14:46:32


     541/     1D3 :                     ;;;---------------------------------------------------------------------------
     542/     1D3 :                     COMMAND_CL:
     543/     1D3 : 56 53               	JMS PRINT_CRLF
     544/     1D5 :                     
     545/     1D5 : 20 00               	FIM P0, 00H
     546/     1D7 : 22 00               	FIM P1, 00H
     547/     1D9 :                     CMDCL_L1:
     548/     1D9 : 50 A0               	JMS PM_WRITE_P0_P1
     549/     1DB : 71 D9               	ISZ R1, CMDCL_L1
     550/     1DD : 70 D9               	ISZ R0, CMDCL_L1
     551/     1DF :                     	
     552/     1DF : 40 10               	JUN CMD_LOOP		; return to command loop
     553/     1E1 :                     
     554/     1E1 :                     ;;;---------------------------------------------------------------------------
     555/     1E1 :                     ;;; COMMAND_G
     556/     1E1 :                     ;;; Go to Top of Program memory PM_TOP(0x0F00)
     557/     1E1 :                     ;;;---------------------------------------------------------------------------
     558/     1E1 :                     COMMAND_G:
     559/     1E1 : 56 53               	JMS PRINT_CRLF
     560/     1E3 : 5F 00               	JMS PM_TOP
     561/     1E5 : 40 10               	JUN CMD_LOOP		; return to command loop
     562/     1E7 :                     
     563/     1E7 :                     ;;;---------------------------------------------------------------------------
     564/     1E7 :                     ;;; Program for the Calculator Mode
     565/     1E7 :                     ;;;---------------------------------------------------------------------------
     566/     200 :                     	org 0200H
     567/     200 :                     ;;;---------------------------------------------------------------------------
     568/     200 :                     ;;; Memory Resisters used in the calculator mode
     569/     200 :                     ;;;---------------------------------------------------------------------------
     570/     200 :                     ;;; Bank0, Chip 0
     571/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_X
     572/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_Y
     573/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_Z
     574/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_T
     575/     200 :                     ;;;---------------------------------------------------------------------------
     576/     200 :                     ;;; Bank0, Chip 1
     577/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_M (working for multiplication/division)
     578/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_A (working for square root)
     579/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_B
     580/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_C
     581/     200 :                     ;;;---------------------------------------------------------------------------
     582/     200 :                     ;;; Bank1, Chip 0
     583/     200 :                     ;;;---------------------------------------------------------------------------
     584/     200 :                     ;;; Bank1, Chip 1
     585/     200 :                     ;;;---------------------------------------------------------------------------
     586/     200 :                     ;;;---------------------------------------------------------------------------
     587/     200 :                     ;;; CHIP#(=D7.D6), REG#(=D5.D4) of number registers 
     588/     200 :                     ;;;---------------------------------------------------------------------------
     589/     200 : =0H                  REG_X  	equ (CHIP_RAM0+(0<<4))	; CHIP#.00.0000
     590/     200 : =10H                 REG_Y	equ (CHIP_RAM0+(1<<4))	; CHIP#.01.0000
     591/     200 : =20H                 REG_Z  	equ (CHIP_RAM0+(2<<4))	; CHIP#.10.0000
     592/     200 : =30H                 REG_T	equ (CHIP_RAM0+(3<<4))	; CHIP#.11.0000
     593/     200 :                     
     594/     200 : =40H                 REG_M	equ (CHIP_RAM1+(0<<4))	; CHIP#.00.0000
     595/     200 : =50H                 REG_A	equ (CHIP_RAM1+(1<<4))	; CHIP#.01.0000
     596/     200 : =60H                 REG_B	equ (CHIP_RAM1+(2<<4))	; CHIP#.10.0000
     597/     200 : =70H                 REG_C	equ (CHIP_RAM1+(3<<4))	; CHIP#.11.0000
     598/     200 :                     
     599/     200 :                     ;;;---------------------------------------------------------------------------
     600/     200 :                     ;;; Number expression (simple floating point)
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 11 - 2023/02/17 14:46:32


     601/     200 :                     ;;;       1 11111
     602/     200 :                     ;;; char# 5 432109876543210
     603/     200 :                     ;;;  (+/-)D.DDDDDDDDDDDDDDD*(10^E)
     604/     200 :                     ;;; D0-15: Fraction (D15=most significant digit, D0=least significant digit)
     605/     200 :                     ;;; D15 denotes an integer part, but it shuld be zero except
     606/     200 :                     ;;; while calculating addition or multiplication.
     607/     200 :                     ;;; It is used for avoiding overflow.
     608/     200 :                     ;;; The number is normalized so that D15 is zero and minimize exponent
     609/     200 :                     ;;; S0: Exponent (0 to 14)
     610/     200 :                     ;;; S1: Sign of the fraction (0=positive, 15=negative)
     611/     200 :                     ;;; S2: Error (0:no_error, 1:overflow, 2:divide_by_zero)
     612/     200 :                     ;;;---------------------------------------------------------------------------
     613/     200 :                     
     614/     200 :                     ; Error flags
     615/     200 : =1H                  REG_ERROR_OVERFLOW  equ 1
     616/     200 : =2H                  REG_ERROR_DIVBYZERO equ 2
     617/     200 :                     	
     618/     200 :                     ;;;---------------------------------------------------------------------------
     619/     200 :                     ;;;COMMAND_C
     620/     200 :                     ;;; 	Calculator
     621/     200 :                     ;;; P0(R0, R1): working for PRINT
     622/     200 :                     ;;; P1(R2, R3): working for PRINT, GETCHAR, PUTCHAR
     623/     200 :                     ;;; P2(R4, R5): working for CTOI
     624/     200 :                     ;;; P3(R6, R7):   
     625/     200 :                     ;;; 		  R6.bit0 = automatic ENTER flag (0:desable , 1:enable)
     626/     200 :                     ;;;               R6.bit1 = input full flag (0:not full, 1:full)
     627/     200 :                     ;;; 	          R6.bit3 = digit point flag(0:no dp, 1:dp set)
     628/     200 :                     ;;; 	          R7=digit counter for key input
     629/     200 :                     ;;; 		  REG_X is automatically cleared if R7 is 0 (first digit input)
     630/     200 :                     ;;; P4(R8,  R9):  register address and character index(mainly REG_X)
     631/     200 :                     ;;; P5(R10, R11): register address and character index(mainly REG_Y)
     632/     200 :                     ;;; P6(R12, R13): working for register operation
     633/     200 :                     ;;; P7(R14, R15): working for register operation
     634/     200 :                     ;;;---------------------------------------------------------------------------
     635/     200 :                     COMMAND_C:
     636/     200 : 20 51               	FIM P0, lo(STR_CALC)
     637/     202 : 57 00               	JMS PRINT_P0
     638/     204 :                     
     639/     204 : 52 FD               	JMS CMDC_CLEAR		; clear registers
     640/     206 :                     
     641/     206 :                     CMDC_START:
     642/     206 : A6                  	LD R6
     643/     207 : F6                  	RAR
     644/     208 : D0                  	LDM 0
     645/     209 : F5                  	RAL
     646/     20A : B6                  	XCH R6			; reset flags except for automatic ENTER flag
     647/     20B : F0                  	CLB
     648/     20C : B7                  	XCH R7			; set digit counter = 0
     649/     20D : 20 00               	FIM P0, REG_X
     650/     20F : 55 92               	JMS PRINT_REGISTER_P0	; print REG_X
     651/     211 : 56 53               	JMS PRINT_CRLF
     652/     213 :                     	
     653/     213 :                     CMDC_LOOP:		; loop for input digits to REG_X
     654/     213 : 56 00               	JMS GETCHAR_P1
     655/     215 : 56 87                       JMS DISPLED_ACC
     656/     217 : 56 76                       JMS DISPLED_P1
     657/     219 : 20 0D               	FIM P0, '\r'
     658/     21B : 50 8E               	JMS CMP_P0P1
     659/     21D : 14 13               	JCN Z, CMDC_LOOP	; skip CR
     660/     21F :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 12 - 2023/02/17 14:46:32


     661/     21F : 20 0A               	FIM P0, '\n'		; 'ENTER' key
     662/     221 : 50 8E               	JMS CMP_P0P1
     663/     223 : 1C 2B               	JCN ZN, CMDC_L1
     664/     225 : 56 53               	JMS PRINT_CRLF
     665/     227 : 53 0F               	JMS CMDC_ENTER
     666/     229 : 42 06               	JUN CMDC_START
     667/     22B :                     CMDC_L1:
     668/     22B : 20 71               	FIM P0, 'q'		; quit
     669/     22D : 50 8E               	JMS CMP_P0P1
     670/     22F : 1C 35               	JCN ZN, CMDC_L2
     671/     231 : 56 53               	JMS PRINT_CRLF
     672/     233 : 40 10               	JUN CMD_LOOP		; return to command loop
     673/     235 :                     CMDC_L2:	
     674/     235 : 20 2B               	FIM P0, '+'		; '+' key
     675/     237 : 50 8E               	JMS CMP_P0P1
     676/     239 : 1C 45               	JCN ZN, CMDC_L3
     677/     23B : 56 28               	JMS PUTCHAR_P1
     678/     23D : 56 53               	JMS PRINT_CRLF
     679/     23F : 53 42               	JMS CMDC_ADD
     680/     241 : 52 DC               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     681/     243 : 42 06               	JUN CMDC_START
     682/     245 :                     CMDC_L3:
     683/     245 : 20 2D               	FIM P0, '-'		; '-' key
     684/     247 : 50 8E               	JMS CMP_P0P1
     685/     249 : 1C 55               	JCN ZN, CMDC_L4
     686/     24B : 56 28               	JMS PUTCHAR_P1
     687/     24D : 56 53               	JMS PRINT_CRLF
     688/     24F : 54 6D               	JMS CMDC_SUB
     689/     251 : 52 DC               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     690/     253 : 42 06               	JUN CMDC_START
     691/     255 :                     CMDC_L4:
     692/     255 : 20 2A               	FIM P0, '*'		; '*' key
     693/     257 : 50 8E               	JMS CMP_P0P1
     694/     259 : 1C 65               	JCN ZN, CMDC_L5
     695/     25B : 56 28               	JMS PUTCHAR_P1
     696/     25D : 56 53               	JMS PRINT_CRLF
     697/     25F : 54 00               	JMS CMDC_MUL
     698/     261 : 52 DC               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     699/     263 : 42 06               	JUN CMDC_START
     700/     265 :                     CMDC_L5:
     701/     265 : 20 2F               	FIM P0, '/'		; '/' key
     702/     267 : 50 8E               	JMS CMP_P0P1
     703/     269 : 1C 75               	JCN ZN, CMDC_L6
     704/     26B : 56 28               	JMS PUTCHAR_P1
     705/     26D : 56 53               	JMS PRINT_CRLF
     706/     26F : 54 FD               	JMS CMDC_DIV
     707/     271 : 52 DC               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     708/     273 : 42 06               	JUN CMDC_START
     709/     275 :                     CMDC_L6:
     710/     275 : 20 63               	FIM P0, 'c'		; clear
     711/     277 : 50 8E               	JMS CMP_P0P1
     712/     279 : 1C 81               	JCN ZN, CMDC_L7
     713/     27B : 56 53               	JMS PRINT_CRLF
     714/     27D : 52 FD               	JMS CMDC_CLEAR
     715/     27F : 42 06               	JUN CMDC_START
     716/     281 :                     CMDC_L7:
     717/     281 : 20 73               	FIM P0, 's'		; sign change
     718/     283 : 50 8E               	JMS CMP_P0P1
     719/     285 : 1C 8F               	JCN ZN, CMDC_L8
     720/     287 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 13 - 2023/02/17 14:46:32


     721/     287 : 54 F6               	JMS CHANGE_SIGN_REG_X
     722/     289 : 56 53               	JMS PRINT_CRLF
     723/     28B : 52 DC               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     724/     28D : 42 06               	JUN CMDC_START
     725/     28F :                     CMDC_L8:
     726/     28F : 20 70               	FIM P0, 'p'		; print registers
     727/     291 : 50 8E               	JMS CMP_P0P1
     728/     293 : 1C 9B               	JCN ZN, CMDC_L81
     729/     295 : 56 53               	JMS PRINT_CRLF
     730/     297 : 54 54               	JMS CMDC_PRINT
     731/     299 : 42 06               	JUN CMDC_START
     732/     29B :                     CMDC_L81:
     733/     29B : 20 72               	FIM P0, 'r'		; square root
     734/     29D : 50 8E               	JMS CMP_P0P1
     735/     29F : 1C AB               	JCN ZN, CMDC_L9
     736/     2A1 : 20 AE               	FIM P0, lo(STR_CALC_SQRT)
     737/     2A3 : 57 00               	JMS PRINT_P0
     738/     2A5 : 40 B2               	JUN CMDC_SQUAREROOT	; because of the limit of the stack,
     739/     2A7 :                     				; it cannot be a subroutine
     740/     2A7 :                     CMDC_SQR_RETURN:	
     741/     2A7 : 52 DC               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     742/     2A9 : 42 06               	JUN CMDC_START
     743/     2AB :                     CMDC_L9:
     744/     2AB : A6                  	LD R6			; check number full flag (R6.bit1)
     745/     2AC : F6                  	RAR			; no more '0-9' or '.' input
     746/     2AD : F6                  	RAR
     747/     2AE : 12 CC               	JCN C, CMDC_L11
     748/     2B0 :                     
     749/     2B0 : 20 2E               	FIM P0, '.'		; '.' digit point
     750/     2B2 : 50 8E               	JMS CMP_P0P1
     751/     2B4 : 1C C2               	JCN ZN, CMDC_L10
     752/     2B6 : A6                  	LD R6
     753/     2B7 : F5                  	RAL
     754/     2B8 : 12 CC               	JCN C, CMDC_L11	; skip if digit point flag (R6.bit3) is already set
     755/     2BA : 56 28               	JMS PUTCHAR_P1		; echo input
     756/     2BC : 52 E8               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     757/     2BE : 52 F7               	JMS CMDC_DIGITPOINT
     758/     2C0 : 42 13               	JUN CMDC_LOOP
     759/     2C2 :                     	
     760/     2C2 :                     CMDC_L10:
     761/     2C2 : 52 CE               	JMS ISNUM_P1
     762/     2C4 : 14 CC               	JCN Z, CMDC_L11         ; skip if not a number
     763/     2C6 : 56 28               	JMS PUTCHAR_P1		; echo input
     764/     2C8 : 52 E8               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     765/     2CA : 53 23               	JMS CMDC_NUM
     766/     2CC :                     CMDC_L11:
     767/     2CC : 42 13               	JUN CMDC_LOOP
     768/     2CE :                     
     769/     2CE :                     ;;;---------------------------------------------------------------------------
     770/     2CE :                     ;;; ISNUM_P1
     771/     2CE :                     ;;; check P1 '0' to '9' as a ascii character
     772/     2CE :                     ;;; return: ACC=0 if P1 is not a number
     773/     2CE :                     ;;;         ACC=1 if P1 is a number
     774/     2CE :                     ;;; destroy: P0
     775/     2CE :                     ;;;---------------------------------------------------------------------------
     776/     2CE :                     ISNUM_P1:
     777/     2CE : 20 2F               	FIM P0, '0'-1
     778/     2D0 : 50 8E               	JMS CMP_P0P1
     779/     2D2 : 12 DB               	JCN C, ISNUM_FALSE	; '0'-1 >= P1
     780/     2D4 : 20 39               	FIM P0, '9'
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 14 - 2023/02/17 14:46:32


     781/     2D6 : 50 8E               	JMS CMP_P0P1
     782/     2D8 : 1A DB               	JCN CN, ISNUM_FALSE	; '9' < P1
     783/     2DA : C1                  	BBL 1			; P1 is a number
     784/     2DB :                     ISNUM_FALSE:
     785/     2DB : C0                  	BBL 0			; P1 is not a number
     786/     2DC :                     	
     787/     2DC :                     ;;;---------------------------------------------------------------------------
     788/     2DC :                     ;;; CMDC_SET_AUTOMATIC_ENTER_FLAG
     789/     2DC :                     ;;;  set automatic ENTER flag
     790/     2DC :                     ;;;---------------------------------------------------------------------------
     791/     2DC :                     CMDC_SET_AUTOMATIC_ENTER_FLAG:	
     792/     2DC : A6                  	LD R6
     793/     2DD : F6                  	RAR
     794/     2DE : FA                  	STC
     795/     2DF : F5                  	RAL
     796/     2E0 : B6                  	XCH R6
     797/     2E1 : C0                  	BBL 0
     798/     2E2 :                     
     799/     2E2 :                     ;;;---------------------------------------------------------------------------
     800/     2E2 :                     ;;; CMDC_CLEAR_AUTOMATIC_ENTER_FLAG
     801/     2E2 :                     ;;; clear automatic ENTER flag
     802/     2E2 :                     ;;;---------------------------------------------------------------------------
     803/     2E2 :                     CMDC_CLEAR_AUTOMATIC_ENTER_FLAG:
     804/     2E2 : A6                  	LD R6
     805/     2E3 : F6                  	RAR
     806/     2E4 : F1                  	CLC
     807/     2E5 : F5                  	RAL
     808/     2E6 : B6                  	XCH R6
     809/     2E7 : C0                  	BBL 0
     810/     2E8 :                     
     811/     2E8 :                     ;;;---------------------------------------------------------------------------
     812/     2E8 :                     ;;; CMDC_AUTOMATIC_PUSH_AND_CLEAR
     813/     2E8 :                     ;;;   push REG_X and clear for the first '0-9' or '.' after operation
     814/     2E8 :                     ;;;---------------------------------------------------------------------------
     815/     2E8 :                     CMDC_AUTOMATIC_PUSH_AND_CLEAR:
     816/     2E8 : A6                  	LD R6                   ; check automatic ENTER flag (R6.bit0)
     817/     2E9 : F6                  	RAR
     818/     2EA : 1A EE               	JCN CN, CMDC_PUSH_L0
     819/     2EC : 53 0F               	JMS CMDC_ENTER		; push ENTER key
     820/     2EE :                     
     821/     2EE :                     CMDC_PUSH_L0:
     822/     2EE : A7                  	LD R7                   ; check digit count
     823/     2EF : 1C F6               	JCN ZN,CMDC_PUSH_EXIT	; if R7 = 0 then R7++ and clear REG_X
     824/     2F1 : 67                  	INC R7
     825/     2F2 : 20 00               	FIM P0, REG_X
     826/     2F4 : 54 C8               	JMS CLEAR_REGISTER_P0	; clear X for the first keyin
     827/     2F6 :                     CMDC_PUSH_EXIT
     828/     2F6 : C0                  	BBL 0
     829/     2F7 :                     
     830/     2F7 :                     ;;;---------------------------------------------------------------------------
     831/     2F7 :                     ;;; CMDC_DIGITPOINT
     832/     2F7 :                     ;;; set a digit point
     833/     2F7 :                     ;;;---------------------------------------------------------------------------
     834/     2F7 :                     CMDC_DIGITPOINT:
     835/     2F7 : A6                  	LD R6
     836/     2F8 : F5                  	RAL
     837/     2F9 : FA                  	STC			; set digit point flag R6.bit3
     838/     2FA : F6                  	RAR
     839/     2FB : B6                  	XCH R6                  
     840/     2FC :                     CMDC_DP_EXIT:	
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 15 - 2023/02/17 14:46:32


     841/     2FC : C0                  	BBL 0
     842/     2FD :                     
     843/     2FD :                     ;;;---------------------------------------------------------------------------
     844/     2FD :                     ;;; CMDC_CLEAR
     845/     2FD :                     ;;; clear all registers
     846/     2FD :                     ;;;---------------------------------------------------------------------------
     847/     2FD :                     CMDC_CLEAR:
     848/     2FD : 20 00               	FIM P0, REG_X
     849/     2FF : 54 C8               	JMS CLEAR_REGISTER_P0
     850/     301 : 20 10               	FIM P0, REG_Y
     851/     303 : 54 C8               	JMS CLEAR_REGISTER_P0
     852/     305 : 20 20               	FIM P0, REG_Z
     853/     307 : 54 C8               	JMS CLEAR_REGISTER_P0
     854/     309 : 20 30               	FIM P0, REG_T
     855/     30B : 54 C8               	JMS CLEAR_REGISTER_P0
     856/     30D :                     
     857/     30D : 42 E2               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     858/     30F :                     	
     859/     30F :                     ;;;---------------------------------------------------------------------------
     860/     30F :                     ;;; CMDC_ENTER
     861/     30F :                     ;;; Push register stack
     862/     30F :                     ;;; 	X=>Y=>Z=>T
     863/     30F :                     ;;;---------------------------------------------------------------------------
     864/     30F :                     CMDC_ENTER:
     865/     30F : 2C 30               	FIM P6, REG_T
     866/     311 : 2E 20               	FIM P7, REG_Z
     867/     313 : 54 D4               	JMS LD_REGISTER_P6_P7	; T<=Z
     868/     315 : 2C 20               	FIM P6, REG_Z
     869/     317 : 2E 10               	FIM P7, REG_Y
     870/     319 : 54 D4               	JMS LD_REGISTER_P6_P7	; Z<=Y
     871/     31B : 2C 10               	FIM P6, REG_Y
     872/     31D : 2E 00               	FIM P7, REG_X
     873/     31F : 54 D4               	JMS LD_REGISTER_P6_P7	; Y<=X
     874/     321 :                     
     875/     321 : 42 E2               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     876/     323 :                     	
     877/     323 :                     ;;;---------------------------------------------------------------------------
     878/     323 :                     ;;; CMDC_NUM
     879/     323 :                     ;;; enter a number to X
     880/     323 :                     ;;; input: P1=('0', ...'9') ASCII character
     881/     323 :                     ;;;        R7=digit count
     882/     323 :                     ;;;---------------------------------------------------------------------------
     883/     323 :                     CMDC_NUM:
     884/     323 : 56 6A               	JMS CTOI_P1_R5
     885/     325 :                     	;; 	LD R6			; check digit point flag (R6.bit3)
     886/     325 :                     	;; 	RAL
     887/     325 :                     	;; 	JCN C,CMDC_NUM_L1	; digit point flag is ture
     888/     325 :                     	;; 	LD R5			; when digit point frag is false,
     889/     325 :                     	;; 	JCN NZ, CMDC_NUM_L1	; ignore key in '0' if digit counter is 1
     890/     325 :                     	;; 	LD R7		
     891/     325 :                     	;; 	DAC
     892/     325 :                     	;; 	JCN Z, CMDC_NUM_EXIT
     893/     325 :                     	;; CMDC_NUM_L1:
     894/     325 :                     	;; operation is for R7-th digit of X
     895/     325 : 2E 00               	FIM P7, REG_X
     896/     327 : DF                  	LDM 15
     897/     328 : F1                  	CLC
     898/     329 : 97                  	SUB R7			
     899/     32A : BF                  	XCH R15                 ; P7=(REG_X).(#char=15-R7)
     900/     32B : 2F                  	SRC P7
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 16 - 2023/02/17 14:46:32


     901/     32C :                     
     902/     32C : A6                  	LD R6
     903/     32D : F5                  	RAL			; check R6.bit3 (dp flag)
     904/     32E : 12 32               	JCN C, CMDC_SETNUM	; if dp flag is true, exponent is not updated
     905/     330 :                     	;; set exponent of X
     906/     330 : A7                  	LD R7
     907/     331 : E4                  	WR0
     908/     332 :                     CMDC_SETNUM:
     909/     332 : A5                  	LD R5
     910/     333 : E0                  	WRM
     911/     334 : 67                  	INC R7
     912/     335 : DF                  	LDM 15			; maximum number of digits is 14,
     913/     336 : F1                  	CLC			; so set digit full flag when R7 becomes 15
     914/     337 : 97                  	SUB R7
     915/     338 : 1C 41               	JCN ZN, CMDC_NUM_EXIT
     916/     33A :                     	;; set digit full flag R6.bit1
     917/     33A : A6                  	LD R6
     918/     33B : F6                  	RAR
     919/     33C : F6                  	RAR
     920/     33D : FA                  	STC
     921/     33E : F5                  	RAL
     922/     33F : F5                  	RAL
     923/     340 : B6                  	XCH R6
     924/     341 :                     CMDC_NUM_EXIT:
     925/     341 : C0                  	BBL 0
     926/     342 :                     
     927/     342 :                     ;;;---------------------------------------------------------------------------
     928/     342 :                     ;;; CMDC_ADD
     929/     342 :                     ;;; X = X + Y
     930/     342 :                     ;;;---------------------------------------------------------------------------
     931/     342 :                     CMDC_ADD:
     932/     342 : 54 A6               	JMS ALIGN_REGISTER_XY
     933/     344 :                     
     934/     344 : 2C 00               	FIM P6, REG_X
     935/     346 : 2E 10               	FIM P7, REG_Y
     936/     348 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
     937/     349 : ED                  	RD1
     938/     34A : B0                  	XCH R0			; R0 = sign of X
     939/     34B : 2F                  	SRC P7
     940/     34C : ED                  	RD1
     941/     34D : F1                  	CLC
     942/     34E : 90                  	SUB R0
     943/     34F : 14 71                	JCN Z, CMDC_ADD_SAMESIGN
     944/     351 :                     
     945/     351 : 53 B1               	JMS CMP_FRACTION_P6_P7
     946/     353 : 14 79               	JCN Z, CMDC_ADD_ZERO_EXIT
     947/     355 : 12 69               	JCN C, CMD_SUB_X_Y	; P6 > P7
     948/     357 :                     CMD_SUB_Y_X:
     949/     357 : 2C 40               	FIM P6, REG_M		; swap X and Y
     950/     359 : 2E 00               	FIM P7, REG_X
     951/     35B : 54 D4               	JMS LD_REGISTER_P6_P7	; M<=X
     952/     35D : 2C 00               	FIM P6, REG_X
     953/     35F : 2E 10               	FIM P7, REG_Y
     954/     361 : 54 D4               	JMS LD_REGISTER_P6_P7	; X<=Y
     955/     363 : 2C 10               	FIM P6, REG_Y
     956/     365 : 2E 40               	FIM P7, REG_M
     957/     367 : 54 D4               	JMS LD_REGISTER_P6_P7	; Y<=M
     958/     369 :                     
     959/     369 :                     CMD_SUB_X_Y:	
     960/     369 : 2C 00               	FIM P6, REG_X
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 17 - 2023/02/17 14:46:32


     961/     36B : 2E 10               	FIM P7, REG_Y
     962/     36D : 53 9F               	JMS SUB_FRACTION_P6_P7
     963/     36F :                     
     964/     36F : 43 77               	JUN CMDC_ADD_EXIT
     965/     371 :                     
     966/     371 :                     CMDC_ADD_SAMESIGN:
     967/     371 : 2C 00               	FIM P6, REG_X
     968/     373 : 2E 10               	FIM P7, REG_Y
     969/     375 : 53 90               	JMS ADD_FRACTION_P6_P7
     970/     377 :                     	
     971/     377 :                     CMDC_ADD_EXIT:
     972/     377 : 43 7F               	JUN CMDC_NORMALIZE_AND_POP
     973/     379 :                     
     974/     379 :                     CMDC_ADD_ZERO_EXIT:
     975/     379 : 20 00               	FIM P0, REG_X
     976/     37B : 54 C8               	JMS CLEAR_REGISTER_P0
     977/     37D : 43 77               	JUN CMDC_ADD_EXIT
     978/     37F :                     
     979/     37F :                     ;;;---------------------------------------------------------------------------
     980/     37F :                     ;;; CMDC_NORMALIZE_AND_POP
     981/     37F :                     ;;; Common routine for finish calculation
     982/     37F :                     ;;; Normalize REG_X
     983/     37F :                     ;;; Pop registers
     984/     37F :                     ;;; REG_Y<= REG_Z<=REG_T
     985/     37F :                     ;;;---------------------------------------------------------------------------
     986/     37F :                     CMDC_NORMALIZE_AND_POP:
     987/     37F : 20 00                	FIM P0, REG_X
     988/     381 : 53 CB                	JMS NORMALIZE_REGISTER_P0
     989/     383 :                     
     990/     383 : 2C 10               	FIM P6, REG_Y
     991/     385 : 2E 20               	FIM P7, REG_Z
     992/     387 : 54 D4               	JMS LD_REGISTER_P6_P7 	; Y<=Z
     993/     389 :                     
     994/     389 : 2C 20               	FIM P6, REG_Z
     995/     38B : 2E 30               	FIM P7, REG_T
     996/     38D : 54 D4               	JMS LD_REGISTER_P6_P7 	; Z<=T
     997/     38F :                     
     998/     38F : C0                  	BBL 0
     999/     390 :                     	
    1000/     390 :                     ;;;---------------------------------------------------------------------------
    1001/     390 :                     ;;; ADD_FRACTION_P6_P7
    1002/     390 :                     ;;; Add fraction of two registers
    1003/     390 :                     ;;; REG(P6) = REG(P6) + REG(P7)
    1004/     390 :                     ;;; register should be normalized so that D15 = 0
    1005/     390 :                     ;;; in order to avoid overflow
    1006/     390 :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
    1007/     390 :                     ;;;---------------------------------------------------------------------------
    1008/     390 :                     ADD_FRACTION_P6_P7:
    1009/     390 : F0                  	CLB
    1010/     391 : BD                  	XCH R13
    1011/     392 : F0                  	CLB
    1012/     393 : BF                  	XCH R15
    1013/     394 : F0                  	CLB
    1014/     395 :                     ADD_FRA_LOOP:
    1015/     395 : 2F                  	SRC P7
    1016/     396 : E9                  	RDM
    1017/     397 : 2D                  	SRC P6
    1018/     398 : EB                  	ADM
    1019/     399 : FB                  	DAA
    1020/     39A : E0                  	WRM
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 18 - 2023/02/17 14:46:32


    1021/     39B : 6D                  	INC R13
    1022/     39C : 7F 95               	ISZ R15, ADD_FRA_LOOP
    1023/     39E :                     ADD_FRA_EXIT:	
    1024/     39E : C0                  	BBL 0
    1025/     39F :                     	
    1026/     39F :                     ;;;---------------------------------------------------------------------------
    1027/     39F :                     ;;; SUB_FRACTION_P6_P7
    1028/     39F :                     ;;; subtract fraction
    1029/     39F :                     ;;; REG(P6) = REG(P6) - REG(P7)
    1030/     39F :                     ;;; REG(P6) should be equal or larger than REG(P7)
    1031/     39F :                     ;;; in order to avoid underflow
    1032/     39F :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
    1033/     39F :                     ;;;---------------------------------------------------------------------------
    1034/     39F :                     ;;; Reference
    1035/     39F :                     ;;; "Intel MCS-4 Assembly Language Programming Manual" Dec.1973,
    1036/     39F :                     ;;; 4.8 Decimal Subtraction, pp.4-20--23
    1037/     39F :                     ;;;---------------------------------------------------------------------------
    1038/     39F :                     SUB_FRACTION_P6_P7:
    1039/     39F : F0                  	CLB
    1040/     3A0 : BD                  	XCH R13
    1041/     3A1 : F0                  	CLB
    1042/     3A2 : BF                  	XCH R15
    1043/     3A3 : F0                  	CLB
    1044/     3A4 : FA                  	STC
    1045/     3A5 :                     SUB_FRA_LOOP:
    1046/     3A5 : F9                  	TCS
    1047/     3A6 : 2F                  	SRC P7
    1048/     3A7 : E8                  	SBM
    1049/     3A8 :                     
    1050/     3A8 : F1                  	CLC
    1051/     3A9 : 2D                  	SRC P6
    1052/     3AA : EB                  	ADM
    1053/     3AB :                     
    1054/     3AB : FB                  	DAA
    1055/     3AC : E0                  	WRM
    1056/     3AD : 6D                  	INC R13
    1057/     3AE : 7F A5               	ISZ R15, SUB_FRA_LOOP
    1058/     3B0 : C0                  	BBL 0
    1059/     3B1 :                     
    1060/     3B1 :                     ;;;---------------------------------------------------------------------------
    1061/     3B1 :                     ;;; CMP_FRACTION_P6_P7
    1062/     3B1 :                     ;;; compare fraction of REG(P6) and REG(P7)
    1063/     3B1 :                     ;;; output: ACC=1,CY=0 if REG(P6) < REG(P7)
    1064/     3B1 :                     ;;;         ACC=0,CY=1 if REG(P6)== REG(P7)
    1065/     3B1 :                     ;;;         ACC=1,CY=1 if REG(P6) > REG(P7)
    1066/     3B1 :                     ;;; REG(P6) - (P7) (the carry bit is a complement of the borrow)
    1067/     3B1 :                     ;;; working: R0, R1
    1068/     3B1 :                     ;;; destroy: P0, R13, R15, (R12 and R14 are not affected)
    1069/     3B1 :                     ;;;---------------------------------------------------------------------------
    1070/     3B1 :                     CMP_FRACTION_P6_P7:	
    1071/     3B1 : F0                  	CLB
    1072/     3B2 : B0                  	XCH R0			; R0 = 0
    1073/     3B3 :                     
    1074/     3B3 :                     CMP_FRACTION_LOOP:		; for i(R0)=0 to 15
    1075/     3B3 : A0                  	LD R0
    1076/     3B4 : F4                  	CMA
    1077/     3B5 : BD                  	XCH R13
    1078/     3B6 : 2D                  	SRC P6
    1079/     3B7 : E9                  	RDM
    1080/     3B8 : B1                  	XCH R1			; R1=REG(P6)[15-i]
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 19 - 2023/02/17 14:46:32


    1081/     3B9 :                     
    1082/     3B9 : A0                  	LD R0
    1083/     3BA : F4                  	CMA
    1084/     3BB : BF                  	XCH R15
    1085/     3BC : 2F                  	SRC P7
    1086/     3BD :                     
    1087/     3BD : A1                  	LD R1
    1088/     3BE : F1                  	CLC
    1089/     3BF : E8                  	SBM			; ACC=REG(P6)[15-i] - REG(P7)[15-i]
    1090/     3C0 :                     
    1091/     3C0 : 14 C6               	JCN Z, CMP_FRACTION_NEXT
    1092/     3C2 : 12 CA               	JCN C, CMP_FRACTION_EXIT11
    1093/     3C4 : 43 C9               	JUN CMP_FRACTION_EXIT10
    1094/     3C6 :                     
    1095/     3C6 :                     CMP_FRACTION_NEXT:
    1096/     3C6 : 70 B3               	ISZ R0, CMP_FRACTION_LOOP
    1097/     3C8 : C0                  	BBL 0			; REG(P6) == REG(P7)
    1098/     3C9 :                     
    1099/     3C9 :                     CMP_FRACTION_EXIT10:
    1100/     3C9 : C1                  	BBL 1			; REG(P6) < REG(P7)
    1101/     3CA :                     
    1102/     3CA :                     CMP_FRACTION_EXIT11:
    1103/     3CA : C1                  	BBL 1			; REG(P6) > REG(P7)
    1104/     3CB :                     
    1105/     3CB :                     ;;;---------------------------------------------------------------------------
    1106/     3CB :                     ;;; NORMALIZE_REGISTER_P0
    1107/     3CB :                     ;;; minimize exponent
    1108/     3CB :                     ;;; example
    1109/     3CB :                     ;;; 0.0000001 E 9 ->shift L7->  1.0000000 E 2 -> shift R1 -> 0.10000000 E3
    1110/     3CB :                     ;;; 0.0000001 E 7 ->shift L7->  1.0000000 E 0 -> shift R1 -> 0.10000000 E1
    1111/     3CB :                     ;;; 0.0000001 E 5 ->shift L5->  0.0100000 E 0
    1112/     3CB :                     ;;; 
    1113/     3CB :                     ;;; working: P0, R2, R3
    1114/     3CB :                     ;;;---------------------------------------------------------------------------
    1115/     3CB :                     NORMALIZE_REGISTER_P0:	
    1116/     3CB : 21                  	SRC P0
    1117/     3CC : EC                  	RD0			; exponent of REG(P0)
    1118/     3CD : F4                  	CMA
    1119/     3CE : B3                  	XCH R3			; R3 = 15 - exponent
    1120/     3CF :                     	
    1121/     3CF : F0                  	CLB
    1122/     3D0 : B2                  	XCH R2			; R2=0 (counter)
    1123/     3D1 : 43 DB               	JUN NM_LOOP_ENTRY
    1124/     3D3 :                     NM_LOOP:
    1125/     3D3 : A2                  	LD R2
    1126/     3D4 : F4                  	CMA
    1127/     3D5 : B1                  	XCH R1			; R1=15, 14,.., 0
    1128/     3D6 : 21                  	SRC P0
    1129/     3D7 : E9                  	RDM
    1130/     3D8 : 1C DD               	JCN ZN, NM_GO_SHIFT
    1131/     3DA : 62                  	INC R2
    1132/     3DB :                     NM_LOOP_ENTRY:
    1133/     3DB : 73 D3               	ISZ R3, NM_LOOP
    1134/     3DD :                     NM_GO_SHIFT:
    1135/     3DD :                     	;  exponent = exponent - shift count
    1136/     3DD : EC                  	RD0
    1137/     3DE : F1                  	CLC
    1138/     3DF : 92                  	SUB R2
    1139/     3E0 : E4                  	WR0
    1140/     3E1 : A2                  	LD R2			; ACC = shift count
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 20 - 2023/02/17 14:46:32


    1141/     3E2 : 54 87               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1142/     3E4 :                     
    1143/     3E4 : DF                  	LDM 15			; check most significant digit
    1144/     3E5 : B1                  	XCH R1			; and shift to right if it is not zero
    1145/     3E6 : 21                  	SRC P0
    1146/     3E7 : E9                  	RDM
    1147/     3E8 : 14 F2               	JCN Z, NM_EXIT
    1148/     3EA : EC                  	RD0			; increment exponent
    1149/     3EB : F2                  	IAC
    1150/     3EC : E4                  	WR0
    1151/     3ED : 1A F1               	JCN CN, NM_NOERROR
    1152/     3EF : D1                  	LDM REG_ERROR_OVERFLOW
    1153/     3F0 : E6                  	WR2	;; set overflow flag
    1154/     3F1 :                     NM_NOERROR:
    1155/     3F1 : D1                  	LDM 1
    1156/     3F2 :                     NM_EXIT:
    1157/     3F2 : 44 71               	JUN SHIFT_FRACTION_RIGHT_P0_ACC
    1158/     3F4 :                     
    1159/     400 :                     	org 0400H
    1160/     400 :                     ;;;---------------------------------------------------------------------------
    1161/     400 :                     ;;; CMDC_MUL
    1162/     400 :                     ;;; X = X * Y
    1163/     400 :                     ;;;---------------------------------------------------------------------------
    1164/     400 :                     CMDC_MUL:
    1165/     400 : 20 00               	FIM P0, REG_X
    1166/     402 : 54 EC               	JMS ISZERO_REGISTER_P0
    1167/     404 : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1168/     406 :                     
    1169/     406 : 20 10               	FIM P0, REG_Y
    1170/     408 : 54 EC               	JMS ISZERO_REGISTER_P0
    1171/     40A : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1172/     40C :                     	
    1173/     40C : 2C 00               	FIM P6, REG_X
    1174/     40E : 2E 10               	FIM P7, REG_Y
    1175/     410 :                     
    1176/     410 : 55 80               	JMS GET_SIGN_PRODUCT_P6_P7
    1177/     412 : 2D                  	SRC P6
    1178/     413 : E5                  	WR1
    1179/     414 :                     	
    1180/     414 :                     	;;  calculate exponent of the result
    1181/     414 : EC                  	RD0
    1182/     415 : B0                  	XCH R0
    1183/     416 : 2F                  	SRC P7
    1184/     417 : EC                  	RD0
    1185/     418 : F1                  	CLC
    1186/     419 : 80                  	ADD R0
    1187/     41A : 2D                  	SRC P6
    1188/     41B : E4                  	WR0			; set exp X (tentative)
    1189/     41C :                     				; it may be adjusted by the normalization
    1190/     41C : 1A 20               	JCN CN, CMDC_MUL_L0	; check overflow
    1191/     41E : D1                  	LDM REG_ERROR_OVERFLOW
    1192/     41F : E6                  	WR2			; set overflow flag
    1193/     420 :                     CMDC_MUL_L0:
    1194/     420 :                     	;; 	LDM 0
    1195/     420 :                     	;; 	SRC P7
    1196/     420 :                     	;; 	WR0			; exp Y = 0 (can be omitted)
    1197/     420 :                     
    1198/     420 :                     	; multiply fraction X = X * Y
    1199/     420 : 54 2A               	JMS MUL_FRACTION_XY
    1200/     422 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 21 - 2023/02/17 14:46:32


    1201/     422 :                     CMDC_MUL_EXIT:
    1202/     422 : 43 7F               	JUN CMDC_NORMALIZE_AND_POP
    1203/     424 :                     CMDC_MUL_ZERO:
    1204/     424 : 20 00               	FIM P0, REG_X
    1205/     426 : 54 C8               	JMS CLEAR_REGISTER_P0
    1206/     428 : 44 22               	JUN CMDC_MUL_EXIT
    1207/     42A :                     
    1208/     42A :                     ;;;---------------------------------------------------------------------------
    1209/     42A :                     ;;; MUL_FRACTION_XY
    1210/     42A :                     ;;; multiply fraction of REG_X and REG_Y
    1211/     42A :                     ;;; REG_X = REG_X* REG_Y
    1212/     42A :                     ;;; working: P6, P7, P5, P0(for shift), P1(for shift), P4(R8, R9)
    1213/     42A :                     ;;;---------------------------------------------------------------------------
    1214/     42A :                     ;;; D15=0 (number is normalized)
    1215/     42A :                     ;;; sum up folloings and store to FRA_X
    1216/     42A :                     ;;; FRA_Y
    1217/     42A :                     ;;; 0EDCBA9876543210 * 0 FRA_M(=FRA_X)
    1218/     42A :                     ;;;  0EDCBA987654321 * E
    1219/     42A :                     ;;;   0EDCBA98765432 * D
    1220/     42A :                     ;;;    0EDCBA9876543 * C
    1221/     42A :                     ;;;     0EDCBA987654 * B
    1222/     42A :                     ;;;      0EDCBA98765 * A
    1223/     42A :                     ;;;       0EDCBA9876 * 9
    1224/     42A :                     ;;;        0EDCBA987 * 8
    1225/     42A :                     ;;;         0EDCBA98 * 7
    1226/     42A :                     ;;;          0EDCBA9 * 6
    1227/     42A :                     ;;;           0EDCBA * 5
    1228/     42A :                     ;;;            0EDCB * 4
    1229/     42A :                     ;;;             0EDC * 3
    1230/     42A :                     ;;;              0ED * 2
    1231/     42A :                     ;;;               0E * 1
    1232/     42A :                     ;;;                0 * 0
    1233/     42A :                     ;;;---------------------------------------------------------------------------
    1234/     42A :                     MUL_FRACTION_XY:
    1235/     42A : 2C 40               	FIM P6, REG_M
    1236/     42C : 2E 00               	FIM P7, REG_X
    1237/     42E : 54 E4               	JMS LD_FRACTION_P6_P7	; FRA_M <= FRA_X
    1238/     430 :                     
    1239/     430 : 20 00               	FIM P0, REG_X
    1240/     432 : 54 CE               	JMS CLEAR_FRACTION_P0	; FRA_X = 0, status(sign, exp) is reserved
    1241/     434 :                     	
    1242/     434 : 2A 40               	FIM P5, REG_M		; for mult loop (copy of X)
    1243/     436 : 2C 00               	FIM P6, REG_X		; for ADD (total)
    1244/     438 : 2E 10               	FIM P7, REG_Y		; for ADD
    1245/     43A : 20 10               	FIM P0, REG_Y		; for SHIFT (working reg. P1)
    1246/     43C :                     
    1247/     43C : F0                  	CLB
    1248/     43D : B8                  	XCH R8
    1249/     43E :                     MUL_LOOP:			; for i(R8)=0 to 15
    1250/     43E : A8                  	LD R8
    1251/     43F : F4                  	CMA
    1252/     440 : BB                  	XCH R11			; R11 = 15, 14, ..., 0
    1253/     441 : 2B                  	SRC P5
    1254/     442 : E9                  	RDM
    1255/     443 : 14 4C               	JCN Z, MUL_LOOP_NEXT	; next if (REG_Y)[15-i] == 0
    1256/     445 : F4                  	CMA
    1257/     446 : F2                  	IAC
    1258/     447 : B9                  	XCH R9			; R9 = 16-(REG_Y)[15-i]
    1259/     448 :                     MUL_ADD_LOOP:			; add FRA_M to FRA_X '(REG_Y)[15-i] times'
    1260/     448 : 53 90               	JMS ADD_FRACTION_P6_P7
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 22 - 2023/02/17 14:46:32


    1261/     44A : 79 48               	ISZ R9, MUL_ADD_LOOP
    1262/     44C :                     MUL_LOOP_NEXT:
    1263/     44C : D1                  	LDM 1
    1264/     44D : 20 10               	FIM P0, REG_Y
    1265/     44F : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift FRA_Y 1 digit right
    1266/     451 : 78 3E               	ISZ R8, MUL_LOOP
    1267/     453 :                     
    1268/     453 : C0                  	BBL 0
    1269/     454 :                     	
    1270/     454 :                     ;;;---------------------------------------------------------------------------
    1271/     454 :                     ;;; CMDC_PRINT
    1272/     454 :                     ;;; Print X and Y
    1273/     454 :                     ;;;---------------------------------------------------------------------------
    1274/     454 :                     CMDC_PRINT:
    1275/     454 : 20 00               	FIM P0, REG_X
    1276/     456 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1277/     458 : 56 53               	JMS PRINT_CRLF
    1278/     45A : 20 10               	FIM P0, REG_Y
    1279/     45C : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1280/     45E : 56 53               	JMS PRINT_CRLF
    1281/     460 : 20 20               	FIM P0, REG_Z
    1282/     462 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1283/     464 : 56 53               	JMS PRINT_CRLF
    1284/     466 : 20 30               	FIM P0, REG_T
    1285/     468 : 55 8B               	JMS PRINT_REGISTER_WITH_NAME_P0
    1286/     46A : 56 53               	JMS PRINT_CRLF
    1287/     46C : C0                  	BBL 0
    1288/     46D :                     
    1289/     46D :                     ;;;---------------------------------------------------------------------------
    1290/     46D :                     ;;; CMDC_SUB
    1291/     46D :                     ;;; X = Y - X
    1292/     46D :                     ;;;---------------------------------------------------------------------------
    1293/     46D :                     CMDC_SUB:
    1294/     46D : 54 F6               	JMS CHANGE_SIGN_REG_X
    1295/     46F : 43 42               	JUN CMDC_ADD
    1296/     471 :                     	
    1297/     471 :                     ;;;---------------------------------------------------------------------------
    1298/     471 :                     ;;; SHIFT_FRACTION_RIGHT_P0_ACC
    1299/     471 :                     ;;; shift fraction of the register to right with filling 0
    1300/     471 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1301/     471 :                     ;;; 	   ACC=shift count
    1302/     471 :                     ;;; working: P0(R0, R1), P1(R2, R3)
    1303/     471 :                     ;;; destroy P1(R2, R3), R1 becomes 0 but R0 is not affected
    1304/     471 :                     ;;;---------------------------------------------------------------------------
    1305/     471 :                     SHIFT_FRACTION_RIGHT_P0_ACC:
    1306/     471 : 14 86               	JCN Z, SHIFTR_EXIT	; exit if ACC==0
    1307/     473 : B3                  	XCH R3			; R3 = ACC = shift
    1308/     474 : A0                  	LD R0
    1309/     475 : B2                  	XCH R2			; R2 = R0
    1310/     476 :                     
    1311/     476 : F0                  	CLB			; clear ACC and CY
    1312/     477 : B1                  	XCH R1			; R1=0
    1313/     478 :                     SHIFTR_LOOP:			; for(i=0 to 15) P0(REG(i))=P1(REG(i+shift))
    1314/     478 : D0                  	LDM 0
    1315/     479 : 12 7D               	JCN C, SHIFTR_WRITE
    1316/     47B :                     SHIFTR_READ:	
    1317/     47B : 23                  	SRC P1
    1318/     47C : E9                  	RDM
    1319/     47D :                     SHIFTR_WRITE:
    1320/     47D : 21                  	SRC P0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 23 - 2023/02/17 14:46:32


    1321/     47E : E0                  	WRM
    1322/     47F : 63                  	INC R3
    1323/     480 : A3                  	LD R3
    1324/     481 : 1C 84               	JCN ZN, SHIFTR_NEXT      ; check if shift completed
    1325/     483 : FA                  	STC			; set flag to fill remaining bits with 0 
    1326/     484 :                     SHIFTR_NEXT:
    1327/     484 : 71 78               	ISZ R1, SHIFTR_LOOP
    1328/     486 :                     SHIFTR_EXIT:
    1329/     486 : C0                  	BBL 0
    1330/     487 :                     
    1331/     487 :                     ;;;---------------------------------------------------------------------------
    1332/     487 :                     ;;; SHIFT_FRACTION_LEFT_P0_ACC
    1333/     487 :                     ;;; shift fraction of the register to left with filling 0
    1334/     487 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1335/     487 :                     ;;; 	   ACC=shift count
    1336/     487 :                     ;;; working: P0(R0, R1), P1(R2, R3), P2(R4, R5), R15
    1337/     487 :                     ;;; destroy P1(R2, R3), P2, R15, R1 becomes 0 but R0 is not affected
    1338/     487 :                     ;;;---------------------------------------------------------------------------
    1339/     487 :                     SHIFT_FRACTION_LEFT_P0_ACC:
    1340/     487 : 14 A5               	JCN Z, SHIFTL_EXIT	; exit if ACC==0
    1341/     489 : B5                  	XCH R5			; R5 = ACC = shift
    1342/     48A : A0                  	LD R0
    1343/     48B : B2                  	XCH R2			; R2 = R0
    1344/     48C :                     
    1345/     48C : F0                  	CLB			; clear ACC and CY
    1346/     48D : B4                  	XCH R4			; R4=0 (R4=i, R5=i+shift)
    1347/     48E :                     SHIFTL_LOOP:			; for(i=0 to 15) P0(REG(~i))=P1(REG(~(i+shift))
    1348/     48E : D0                  	LDM 0
    1349/     48F : BF                  	XCH R15
    1350/     490 : 12 98               	JCN C, SHIFTL_WRITE
    1351/     492 :                     SHIFTL_READ:	
    1352/     492 : A5                  	LD R5
    1353/     493 : F4                  	CMA
    1354/     494 : B3                  	XCH R3			; R3 = ~R5 =~(i+shift)
    1355/     495 : 23                  	SRC P1
    1356/     496 : E9                  	RDM
    1357/     497 : BF                  	XCH R15
    1358/     498 :                     SHIFTL_WRITE:
    1359/     498 : A4                  	LD R4
    1360/     499 : F4                  	CMA
    1361/     49A : B1                  	XCH R1			; R1 = ~R4 =~i
    1362/     49B : 21                  	SRC P0
    1363/     49C : BF                  	XCH R15
    1364/     49D : E0                  	WRM
    1365/     49E : 65                  	INC R5
    1366/     49F : A5                  	LD R5
    1367/     4A0 : 1C A3               	JCN ZN, SHIFTL_NEXT	; check if shift completed
    1368/     4A2 : FA                  	STC			; set flag to fill remaining bits with 0 
    1369/     4A3 :                     SHIFTL_NEXT:
    1370/     4A3 : 74 8E               	ISZ R4, SHIFTL_LOOP
    1371/     4A5 :                     SHIFTL_EXIT:
    1372/     4A5 : C0                  	BBL 0
    1373/     4A6 :                     	
    1374/     4A6 :                     ;;;---------------------------------------------------------------------------
    1375/     4A6 :                     ;;; ALIGN_REGISTER_XY
    1376/     4A6 :                     ;;; align digit point to larger register
    1377/     4A6 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1378/     4A6 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1379/     4A6 :                     ;;; working: R10, R11
    1380/     4A6 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 24 - 2023/02/17 14:46:32


    1381/     4A6 :                     ALIGN_REGISTER_XY:
    1382/     4A6 : 2C 00               	FIM P6, REG_X
    1383/     4A8 : 2E 10               	FIM P7, REG_Y
    1384/     4AA : 2D                  	SRC P6
    1385/     4AB : EC                  	RD0
    1386/     4AC : BA                  	XCH R10			; R10 = expoenent of REG_P6
    1387/     4AD : 2F                  	SRC P7
    1388/     4AE : EC                  	RD0 
    1389/     4AF : BB                  	XCH R11			; R11 = expoenent of REG_P7
    1390/     4B0 :                     
    1391/     4B0 : AB                  	LD R11
    1392/     4B1 : F1                  	CLC
    1393/     4B2 : 9A                  	SUB R10
    1394/     4B3 : 12 C0               	JCN C, EY_GE_EX		; R11 >= R10
    1395/     4B5 :                     	;; R11 < R10
    1396/     4B5 : F4                  	CMA
    1397/     4B6 : F2                  	IAC
    1398/     4B7 : 20 10               	FIM P0, REG_Y
    1399/     4B9 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1400/     4BB : AA                  	LD R10
    1401/     4BC : 2F                  	SRC P7
    1402/     4BD : E4                  	WR0
    1403/     4BE : 44 C7               	JUN ALIGN_EXIT
    1404/     4C0 :                     EY_GE_EX:
    1405/     4C0 : 20 00               	FIM P0, REG_X
    1406/     4C2 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1407/     4C4 : AB                  	LD R11
    1408/     4C5 : 2D                  	SRC P6
    1409/     4C6 : E4                  	WR0
    1410/     4C7 :                     ALIGN_EXIT:
    1411/     4C7 : C0                  	BBL 0
    1412/     4C8 :                     	
    1413/     4C8 :                     ;;;---------------------------------------------------------------------------
    1414/     4C8 :                     ;;; CLEAR_REGISTER_P0
    1415/     4C8 :                     ;;; Clear register
    1416/     4C8 :                     ;;; input: P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1417/     4C8 :                     ;;; output: ACC=0, R1=0, (R0 is not affected)
    1418/     4C8 :                     ;;;---------------------------------------------------------------------------
    1419/     4C8 :                     CLEAR_REGISTER_P0:
    1420/     4C8 : F0                  	CLB
    1421/     4C9 : 21                  	SRC P0
    1422/     4CA : E4                  	WR0
    1423/     4CB : E5                  	WR1
    1424/     4CC : E6                  	WR2
    1425/     4CD : E7                  	WR3
    1426/     4CE :                     ;;;---------------------------------------------------------------------------
    1427/     4CE :                     ;;; CLEAR_FRACTION_P0
    1428/     4CE :                     ;;;---------------------------------------------------------------------------
    1429/     4CE :                     CLEAR_FRACTION_P0:
    1430/     4CE : F0                  	CLB
    1431/     4CF :                     CLEAR_REGISTER_L0:
    1432/     4CF : 21                  	SRC P0
    1433/     4D0 : E0                  	WRM
    1434/     4D1 : 71 CF               	ISZ R1, CLEAR_REGISTER_L0
    1435/     4D3 : C0                  	BBL 0
    1436/     4D4 :                     
    1437/     4D4 :                     ;;;---------------------------------------------------------------------------
    1438/     4D4 :                     ;;; LD_REGISTER_P6_P7
    1439/     4D4 :                     ;;; load register REG(P7) to REG(P6) (REG_P6 <= REG_P7)
    1440/     4D4 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)) 
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 25 - 2023/02/17 14:46:32


    1441/     4D4 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1442/     4D4 :                     ;;; output: ACC=0, R13=0, R15=0
    1443/     4D4 :                     ;;; destroy R13, R15 (R12 and R14 are not affected)
    1444/     4D4 :                     ;;;---------------------------------------------------------------------------
    1445/     4D4 :                     LD_REGISTER_P6_P7:
    1446/     4D4 :                     	;; copy status characters
    1447/     4D4 : 2F                  	SRC P7
    1448/     4D5 : EC                  	RD0
    1449/     4D6 : 2D                  	SRC P6
    1450/     4D7 : E4                  	WR0
    1451/     4D8 :                     
    1452/     4D8 : 2F                  	SRC P7
    1453/     4D9 : ED                  	RD1
    1454/     4DA : 2D                  	SRC P6
    1455/     4DB : E5                  	WR1
    1456/     4DC :                     
    1457/     4DC : 2F                  	SRC P7
    1458/     4DD : EE                  	RD2
    1459/     4DE : 2D                  	SRC P6
    1460/     4DF : E6                  	WR2
    1461/     4E0 :                     
    1462/     4E0 : 2F                  	SRC P7
    1463/     4E1 : EF                  	RD3
    1464/     4E2 : 2D                  	SRC P6
    1465/     4E3 : E7                  	WR3
    1466/     4E4 :                     ;;;---------------------------------------------------------------------------
    1467/     4E4 :                     ;;; LD_FRACTION_P6_P7
    1468/     4E4 :                     ;;;---------------------------------------------------------------------------
    1469/     4E4 :                     LD_FRACTION_P6_P7
    1470/     4E4 :                     	; CLB
    1471/     4E4 :                     	; XCH R13			; clear R13
    1472/     4E4 :                     	; CLB
    1473/     4E4 :                     	; XCH R15			; clear R15
    1474/     4E4 :                     LD_FRACTION_L0:
    1475/     4E4 : 2F                  	SRC P7
    1476/     4E5 : E9                  	RDM			; read a digit from the source register
    1477/     4E6 : 2D                  	SRC P6
    1478/     4E7 : E0                  	WRM			; write the digit to memory
    1479/     4E8 : 6D                  	INC R13
    1480/     4E9 : 7F E4               	ISZ R15, LD_FRACTION_L0
    1481/     4EB :                     
    1482/     4EB : C0                  	BBL 0
    1483/     4EC :                     
    1484/     4EC :                     ;;;---------------------------------------------------------------------------
    1485/     4EC :                     ;;; ISZERO_REGISTER_P0
    1486/     4EC :                     ;;; check if REG(P0) == 0 or not
    1487/     4EC :                     ;;; return: ACC = (REG==0) ? 1 : 0;
    1488/     4EC :                     ;;; destroy: R1 (R0 is not affected)
    1489/     4EC :                     ;;;---------------------------------------------------------------------------
    1490/     4EC :                     ISZERO_REGISTER_P0:
    1491/     4EC : F0                  	CLB
    1492/     4ED : B1                  	XCH R1
    1493/     4EE :                     ISZERO_LOOP:
    1494/     4EE : 21                  	SRC P0
    1495/     4EF : E9                  	RDM
    1496/     4F0 : 1C F5               	JCN ZN, ISZERO_EXIT0
    1497/     4F2 : 71 EE               	ISZ R1, ISZERO_LOOP
    1498/     4F4 :                     
    1499/     4F4 : C1                  	BBL 1
    1500/     4F5 :                     ISZERO_EXIT0:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 26 - 2023/02/17 14:46:32


    1501/     4F5 : C0                  	BBL 0
    1502/     4F6 :                     	
    1503/     4F6 :                     ;;;---------------------------------------------------------------------------
    1504/     4F6 :                     ;;; CHANGE_SIGN_REG_X
    1505/     4F6 :                     ;;; X = -X
    1506/     4F6 :                     ;;; destroy: P7
    1507/     4F6 :                     ;;;---------------------------------------------------------------------------
    1508/     4F6 :                     CHANGE_SIGN_REG_X:
    1509/     4F6 : 2E 00               	FIM P7, REG_X
    1510/     4F8 : 2F                  	SRC P7
    1511/     4F9 : ED                  	RD1
    1512/     4FA : F4                  	CMA
    1513/     4FB : E5                  	WR1
    1514/     4FC : C0                  	BBL 0
    1515/     4FD :                     
    1516/     4FD :                     ;;;---------------------------------------------------------------------------
    1517/     4FD :                     ;;; CMDC_DIV
    1518/     4FD :                     ;;; X = Y / X
    1519/     4FD :                     ;;;---------------------------------------------------------------------------
    1520/     4FD :                     CMDC_DIV:
    1521/     4FD : 20 00               	FIM P0, REG_X
    1522/     4FF : 53 CB               	JMS NORMALIZE_REGISTER_P0
    1523/     501 : 54 EC               	JMS ISZERO_REGISTER_P0
    1524/     503 : 1C 41               	JCN ZN, CMDC_DIV_BY_ZERO
    1525/     505 :                     
    1526/     505 : 20 10               	FIM P0, REG_Y
    1527/     507 : 54 EC               	JMS ISZERO_REGISTER_P0
    1528/     509 : 1C 47               	JCN ZN, CMDC_DIVIDEND_ZERO
    1529/     50B :                     	
    1530/     50B : 2C 00               	FIM P6, REG_X
    1531/     50D : 2E 10               	FIM P7, REG_Y
    1532/     50F :                     
    1533/     50F : 55 80               	JMS GET_SIGN_PRODUCT_P6_P7
    1534/     511 : 2F                  	SRC P7
    1535/     512 : E5                  	WR1			; save sign to Y
    1536/     513 :                     	
    1537/     513 :                     	;; if devisor(REG_X) is less than 0.1,
    1538/     513 :                     	;; shift it left until it become equal or larger than 0.1
    1539/     513 :                     	;; and increment the exponent of devidend
    1540/     513 :                     	;; example
    1541/     513 :                     	;; X=0.0001 -> X=0.1000, exponent of Y += 3
    1542/     513 : 2D                  	SRC P6
    1543/     514 : EC                  	RD0			; check exponent of REG_X(devisor)
    1544/     515 : 1C 2A               	JCN ZN, DIV_FRAC_ADJ_EXP
    1545/     517 :                     DIV_LOOP_D14:
    1546/     517 :                     	;; increment exponent of Y
    1547/     517 : 2F                  	SRC P7			; Y
    1548/     518 : EC                  	RD0
    1549/     519 : F2                  	IAC
    1550/     51A : E4                  	WR0			; EXP(Y)++
    1551/     51B : 1A 1F               	JCN NC, DIV_LOOP_L0
    1552/     51D : D1                  	LDM REG_ERROR_OVERFLOW
    1553/     51E : E6                  	WR2			; set overflow flag, but continue calculation
    1554/     51F :                     DIV_LOOP_L0:
    1555/     51F : DE                  	LDM 14
    1556/     520 : BD                  	XCH R13
    1557/     521 : 2D                  	SRC P6			; X
    1558/     522 : E9                  	RDM			; ACC = D14 of X
    1559/     523 : 1C 3D               	JCN ZN, DIV_FRAC        ; exit loop and continue calculation
    1560/     525 : D1                  	LDM 1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 27 - 2023/02/17 14:46:32


    1561/     526 : 54 87               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1562/     528 : 45 17               	JUN DIV_LOOP_D14
    1563/     52A :                     
    1564/     52A :                     	; adjust exponent of Y
    1565/     52A :                     DIV_FRAC_ADJ_EXP:
    1566/     52A : 2D                  	SRC P6			; X
    1567/     52B : EC                  	RD0
    1568/     52C : F8                   	DAC
    1569/     52D : B0                  	XCH R0			; R0 = (exponent of X)-1
    1570/     52E : 2F                  	SRC P7
    1571/     52F : EC                  	RD0
    1572/     530 : F1                  	CLC
    1573/     531 : 90                  	SUB R0			; exp(Y) - exp(X)
    1574/     532 : E4                  	WR0
    1575/     533 : 12 3D               	JCN C, DIV_FRAC		; no borrow
    1576/     535 : F4                  	CMA
    1577/     536 : F2                  	IAC
    1578/     537 : 20 10               	FIM P0, REG_Y
    1579/     539 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift frac(Y) and set exp(Y)=0
    1580/     53B : F0                  	CLB
    1581/     53C : E4                  	WR0
    1582/     53D :                     DIV_FRAC:
    1583/     53D : 55 4C               	JMS DIV_FRACTION_XY
    1584/     53F :                     	;; 	JUN DIV_FRACTION_XY
    1585/     53F :                     	;; RETURN_DIV_FRACTION_XY:	
    1586/     53F :                     	; normalize REG_X and clear REG_Y
    1587/     53F : 43 7F               	JUN CMDC_NORMALIZE_AND_POP
    1588/     541 :                     	
    1589/     541 :                     CMDC_DIV_BY_ZERO:
    1590/     541 : 20 00               	FIM P0, REG_X
    1591/     543 : 21                  	SRC P0
    1592/     544 : D2                  	LDM REG_ERROR_DIVBYZERO
    1593/     545 : E6                  	WR2			; set error flag
    1594/     546 : C0                  	BBL 0
    1595/     547 :                     CMDC_DIVIDEND_ZERO:
    1596/     547 : 20 00               	FIM P0, REG_X
    1597/     549 : 54 C8               	JMS CLEAR_REGISTER_P0
    1598/     54B : C0                  	BBL 0
    1599/     54C :                     	
    1600/     54C :                     ;;;---------------------------------------------------------------------------
    1601/     54C :                     ;;; DIV_FRACTION_XY
    1602/     54C :                     ;;; FRAC(X) = FRAC(Y) / FRAC(X)
    1603/     54C :                     ;;; working: P6, P7, P5, P0(for shift), P1 (for shift), P4(R8, R9)
    1604/     54C :                     ;;;---------------------------------------------------------------------------
    1605/     54C :                     ;;;  compare and subtract and count, and shift
    1606/     54C :                     ;;; 
    1607/     54C :                     ;;;  0EDCBA9876543210
    1608/     54C :                     ;;;  0edcba9876543210 -> E
    1609/     54C :                     ;;;
    1610/     54C :                     ;;;  0EDCBA9876543210
    1611/     54C :                     ;;;   0edcba987654321 -> D
    1612/     54C :                     ;;; 
    1613/     54C :                     ;;;  0EDCBA9876543210
    1614/     54C :                     ;;;    0edcba98765432 -> C
    1615/     54C :                     ;;; ...
    1616/     54C :                     ;;;  0EDCBA9876543210 -> 0
    1617/     54C :                     ;;;                0e
    1618/     54C :                     ;;;
    1619/     54C :                     ;;; e!=0
    1620/     54C :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 28 - 2023/02/17 14:46:32


    1621/     54C :                     	
    1622/     54C :                     DIV_FRACTION_XY:
    1623/     54C : 2C 10               	FIM P6, REG_Y
    1624/     54E : 2E 00               	FIM P7, REG_X
    1625/     550 : 2A 40               	FIM P5, REG_M
    1626/     552 :                     
    1627/     552 : 20 40               	FIM P0, REG_M
    1628/     554 : 54 CE               	JMS CLEAR_FRACTION_P0
    1629/     556 :                     
    1630/     556 : D1                  	LDM 1
    1631/     557 : B8                  	XCH R8			; for i(R8)= 1 to 15;
    1632/     558 :                     DIV_LOOP:	
    1633/     558 : F0                  	CLB
    1634/     559 : B9                  	XCH R9			; counter R9 = 0
    1635/     55A :                     DIV_SUB_COUNT:
    1636/     55A : 53 B1               	JMS CMP_FRACTION_P6_P7	   ; Compare Y with X
    1637/     55C : 1A 68               	JCN CN, DIV_SUB_COUNT_EXIT ; jump if REG_Y < REG_X
    1638/     55E :                     
    1639/     55E :                     	;; check R9 is already 9
    1640/     55E :                     	;; it occurs when shifted divisor is truncated
    1641/     55E :                     	;; (ex. previous loop 100/109 -> this loop 100/10)
    1642/     55E : D9                  	LDM 9
    1643/     55F : F1                  	CLC
    1644/     560 : 99                  	SUB R9
    1645/     561 : 14 68               	JCN Z, DIV_SUB_COUNT_EXIT
    1646/     563 :                     	
    1647/     563 : 53 9F               	JMS SUB_FRACTION_P6_P7	   ; Y = Y - X
    1648/     565 : 69                  	INC R9
    1649/     566 : 45 5A               	JUN DIV_SUB_COUNT
    1650/     568 :                     DIV_SUB_COUNT_EXIT:	
    1651/     568 : A8                  	LD R8
    1652/     569 : F4                  	CMA
    1653/     56A : BB                  	XCH R11			; R11 = 14, 13, ..., 0
    1654/     56B : 2B                  	SRC P5			; REG_M
    1655/     56C : A9                  	LD R9
    1656/     56D : E0                  	WRM			; REG_M(R11) = R9
    1657/     56E : D1                  	LDM 1
    1658/     56F : 20 00               	FIM P0, REG_X
    1659/     571 : 54 71               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; X=X/10
    1660/     573 :                     
    1661/     573 : 78 58               	ISZ R8, DIV_LOOP
    1662/     575 :                     
    1663/     575 : 2C 00               	FIM P6, REG_X
    1664/     577 : 2E 10               	FIM P7, REG_Y
    1665/     579 : 54 D4               	JMS LD_REGISTER_P6_P7	; copy exponent of Y to X
    1666/     57B : 2E 40               	FIM P7, REG_M
    1667/     57D : 54 E4               	JMS LD_FRACTION_P6_P7	; copy fraction of M to X
    1668/     57F :                     				; X need to be normalized
    1669/     57F : C0                  	BBL 0
    1670/     580 :                     	;; 	JUN RETURN_DIV_FRACTION_XY
    1671/     580 :                     
    1672/     580 :                     ;;;---------------------------------------------------------------------------
    1673/     580 :                     ;;; GET_SIGN_PRODUCT_P6_P7
    1674/     580 :                     ;;; calculate sign of the result for multiplication and division
    1675/     580 :                     ;;; result: ACC=0 (+) if REG(P6) and REG(P7) have the same sign (++or--)
    1676/     580 :                     ;;;            =15(-) if REG(P6) and REG(P7) have the different signs (+-or-+)
    1677/     580 :                     ;;; destroy: R0
    1678/     580 :                     ;;;---------------------------------------------------------------------------
    1679/     580 :                     GET_SIGN_PRODUCT_P6_P7:	
    1680/     580 :                     	;;  calculate sign of the result for multiplication and division
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 29 - 2023/02/17 14:46:32


    1681/     580 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
    1682/     581 : ED                  	RD1
    1683/     582 : B0                  	XCH R0			; R0 = sign of X
    1684/     583 : 2F                  	SRC P7
    1685/     584 : ED                  	RD1			; sign of Y
    1686/     585 : F1                  	CLC
    1687/     586 : 90                  	SUB R0
    1688/     587 : 14 8A                	JCN Z, GET_SIGN_EXIT
    1689/     589 : CF                  	BBL 15			; negative sign
    1690/     58A :                     GET_SIGN_EXIT:
    1691/     58A : C0                  	BBL 0
    1692/     58B :                     
    1693/     58B :                     ;;;---------------------------------------------------------------------------
    1694/     58B :                     ;;; PRINT_REGISTER_WITH_NAME_P0
    1695/     58B :                     ;;; Print the contents of the number register
    1696/     58B :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1697/     58B :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1698/     58B :                     ;;; output: ACC=0
    1699/     58B :                     ;;;---------------------------------------------------------------------------
    1700/     58B :                     PRINT_REGISTER_WITH_NAME_P0:
    1701/     58B : 22 58               	FIM P1, 'X'
    1702/     58D : 56 28               	JMS PUTCHAR_P1
    1703/     58F : A0                  	LD R0
    1704/     590 : 56 48               	JMS PRINT_ACC
    1705/     592 :                     ;;;---------------------------------------------------------------------------
    1706/     592 :                     ;;; PRINT_REGISTER_P0
    1707/     592 :                     ;;; Print the contents of the number register
    1708/     592 :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1709/     592 :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1710/     592 :                     ;;; output: ACC=0
    1711/     592 :                     ;;;---------------------------------------------------------------------------
    1712/     592 :                     	;;
    1713/     592 :                     PRINT_REGISTER_P0:
    1714/     592 : 22 3D               	FIM P1, '='
    1715/     594 : 21                  	SRC P0
    1716/     595 : EE                  	RD2
    1717/     596 : 14 9A               	JCN Z, PRINT_REGISTER_EQU_ERR
    1718/     598 : 22 45               	FIM P1, 'E'
    1719/     59A :                     PRINT_REGISTER_EQU_ERR
    1720/     59A : 56 28               	JMS PUTCHAR_P1
    1721/     59C :                     
    1722/     59C : 22 2B               	FIM P1, '+'
    1723/     59E : 21                  	SRC P0
    1724/     59F : ED                  	RD1
    1725/     5A0 : 14 A4               	JCN Z, PRINT_REGISTER_SGN
    1726/     5A2 : 22 2D               	FIM P1, '-'
    1727/     5A4 :                     PRINT_REGISTER_SGN:
    1728/     5A4 : 56 28               	JMS PUTCHAR_P1
    1729/     5A6 :                     	
    1730/     5A6 : 21                  	SRC P0
    1731/     5A7 : EC                  	RD0			
    1732/     5A8 : BA                  	XCH R10                 ; load R10=exponent
    1733/     5A9 :                     
    1734/     5A9 :                     	;; print first digit(D15) if it is not zero
    1735/     5A9 :                     	;; (it should be '0' if the number is normalized) 
    1736/     5A9 : DF                  	LDM 15
    1737/     5AA : B1                  	XCH R1
    1738/     5AB : 21                  	SRC P0
    1739/     5AC : E9                  	RDM
    1740/     5AD : 14 B1               	JCN Z, PRINT_CHECK_EXP
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 30 - 2023/02/17 14:46:32


    1741/     5AF : 56 48               	JMS PRINT_ACC
    1742/     5B1 :                     
    1743/     5B1 :                     PRINT_CHECK_EXP:		; print digit point if exponent is 0
    1744/     5B1 : AA                  	LD R10
    1745/     5B2 : 1C B8               	JCN ZN, PRINT_REGISTER_LOOP_SETUP
    1746/     5B4 : 22 2E               	FIM P1, '.'
    1747/     5B6 : 56 28               	JMS PUTCHAR_P1
    1748/     5B8 :                     
    1749/     5B8 :                     PRINT_REGISTER_LOOP_SETUP:
    1750/     5B8 : F0                  	CLB
    1751/     5B9 : D1                  	LDM 1
    1752/     5BA : BB                  	XCH R11			; R11 is loop counter start from 1
    1753/     5BB :                     PRINT_REGISTER_LOOP:
    1754/     5BB : DF                  	LDM 15
    1755/     5BC : F1                  	CLC
    1756/     5BD : 9B                  	SUB R11			; (R11 =  1, 2,...,15) 
    1757/     5BE : 14 D0               	JCN Z, PRINT_EXIT	; skip last digit
    1758/     5C0 : B1                  	XCH R1			; ( R1 = 14,13,..., 1)
    1759/     5C1 : 21                  	SRC P0
    1760/     5C2 : E9                  	RDM
    1761/     5C3 : 56 48               	JMS PRINT_ACC
    1762/     5C5 :                     
    1763/     5C5 : F0                  	CLB			; print digit point
    1764/     5C6 : AA                  	LD R10
    1765/     5C7 : 9B                  	SUB R11
    1766/     5C8 : 1C CE               	JCN ZN, PRINT_REGISTER_L1
    1767/     5CA : 22 2E               	FIM P1, '.'
    1768/     5CC : 56 28               	JMS PUTCHAR_P1
    1769/     5CE :                     PRINT_REGISTER_L1:
    1770/     5CE : 7B BB               	ISZ R11, PRINT_REGISTER_LOOP
    1771/     5D0 :                     PRINT_EXIT:	
    1772/     5D0 : C0                  	BBL 0
    1773/     5D1 :                     
    1774/     5D1 :                     ;;;----------------------------------------------------------------------------
    1775/     5D1 :                     ;;; I/O routines located in Page 0600H
    1776/     5D1 :                     ;;;----------------------------------------------------------------------------
    1777/     600 :                     	org 0600H
    1778/     600 :                     ;;;---------------------------------------------------------------------------
    1779/     600 :                     ;;; Software UART Routine
    1780/     600 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    1781/     600 :                     ;;; defined in separated file
    1782/     600 :                     ;;;---------------------------------------------------------------------------
    1783/     600 :                     ;;; supported baudrates are 4800bps or 9600bps
    1784/     600 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    1785/     600 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
    1786/     600 :                     
    1787/     600 : =2580H               	switch BAUDRATE
    1788/     600 : =>FALSE              	case 4800
    1789/     600 :                     	include "4800bps.inc"
    1790/     600 : =>TRUE               	case 9600
    1791/     600 :                     	include "9600bps.inc"
(1)    1/     600 :                     ;;;---------------------------------------------------------------------------
(1)    2/     600 :                     ;;; getchar and putchar functions
(1)    3/     600 :                     ;;; baud rate = 9600bps
(1)    4/     600 :                     ;;; 8bit, no parity, stop 1
(1)    5/     600 :                     ;;;---------------------------------------------------------------------------
(1)    6/     600 :                     
(1)    7/     600 :                     ;;;---------------------------------------------------------------------------
(1)    8/     600 :                     ;;; GETCHAR_P1
(1)    9/     600 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 31 - 2023/02/17 14:46:32


(1)   10/     600 :                     ;;;
(1)   11/     600 :                     ;;; Input: none
(1)   12/     600 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     600 :                     ;;; Working: P6, P7
(1)   14/     600 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     600 :                     ;;; 
(1)   16/     600 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     600 :                     ;;; 
(1)   18/     600 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     600 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     600 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     600 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     600 :                     ;;;               |->phase delay
(1)   23/     600 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     600 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     600 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     600 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     600 :                     ;;;---------------------------------------------------------------------------
(1)   28/     600 :                     
(1)   29/     600 :                     GETCHAR_P1:
(1)   30/     600 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     602 :                                                     ; 
(1)   32/     602 : 19 02                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     604 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     606 : 7F 06               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     608 :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     608 :                     GETCHAR_L1:
(1)   37/     608 : 19 0D               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     60A : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     60B : 46 10                       JUN GETCHAR_L3          ;<2>
(1)   40/     60D :                     GETCHAR_L2:
(1)   41/     60D : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     60E : 00                          NOP                     ;[1]
(1)   43/     60F : 00                          NOP                     ;[1]
(1)   44/     610 :                     GETCHAR_L3:
(1)   45/     610 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     611 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     612 : 7D 08                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     614 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     614 : B3                  	XCH R3                  ;(1)
(1)   50/     615 : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     617 :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     617 :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     617 :                     GETCHAR_L4:
(1)   54/     617 : 19 1C               	JCN TN, GETCHAR_L5      ;(2) check a bit
(1)   55/     619 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     61A : 46 1F                       JUN GETCHAR_L6          ;<2>
(1)   57/     61C :                     GETCHAR_L5:
(1)   58/     61C : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     61D : 00                          NOP                     ;[1]
(1)   60/     61E : 00                          NOP                     ;[1]
(1)   61/     61F :                     GETCHAR_L6:
(1)   62/     61F : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     620 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     621 : 7D 17                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     623 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     623 : B2                  	XCH R2                  ;(1)
(1)   67/     624 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     624 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     624 :                     	;; check stop bit
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 32 - 2023/02/17 14:46:32


(1)   70/     624 : 19 27                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     626 : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     627 :                     GETCHAR_OK:
(1)   73/     627 : C0                  	BBL 0
(1)   74/     628 :                                     
(1)   75/     628 :                     ;;;---------------------------------------------------------------------------
(1)   76/     628 :                     ;;; PUTCHAR_P1
(1)   77/     628 :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     628 :                     ;;; 
(1)   79/     628 :                     ;;; Input: P1(R2,R3)
(1)   80/     628 :                     ;;; Output: ACC=0
(1)   81/     628 :                     ;;; Working: P6(R12R13), P7
(1)   82/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   83/     628 :                     ;;; P1 is not affected
(1)   84/     628 :                     ;;; 
(1)   85/     628 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     628 :                     ;;; 
(1)   87/     628 :                     ;;; Input: P1(R2,R3)
(1)   88/     628 :                     ;;; Output: ACC=0
(1)   89/     628 :                     ;;; Working: P6(R12R13), P7
(1)   90/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   91/     628 :                     ;;;---------------------------------------------------------------------------
(1)   92/     628 :                     ;;; 
(1)   93/     628 :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     628 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     628 :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     628 :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     628 :                     ;;;---------------------------------------------------------------------------
(1)   98/     628 :                     
(1)   99/     628 :                     PUTCHAR_P1:
(1)  100/     628 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     628 :                     	LDM BANK_SERIAL     ; bank of output port
(1)  102/     628 :                             DCL                 ; set port bank
(1)  103/     628 : [100]                	endif
(1)  104/     628 :                     
(1)  105/     628 : 2E 00                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     62A : 2F                  	SRC P7              ; set port address
(1)  107/     62B :                     
(1)  108/     62B : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     62D : A3                          LD R3
(1)  110/     62E : F1                          CLC                 ; start bit is 0
(1)  111/     62F : F5                          RAL
(1)  112/     630 :                                     
(1)  113/     630 :                     PUTCHAR_L1:
(1)  114/     630 : 00                  	NOP                 ;(1) 9cycle/bit
(1)  115/     631 : 00                          NOP                 ;(1)
(1)  116/     632 : 00                          NOP                 ;(1)
(1)  117/     633 : 00                          NOP                 ;(1)
(1)  118/     634 : 00                          NOP                 ;(1)
(1)  119/     635 : E1                          WMP                 ;(1)
(1)  120/     636 : F6                          RAR                 ;(1)
(1)  121/     637 : 7D 30                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     639 :                     	
(1)  123/     639 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     63B : A2                          LD R2               ;(1)
(1)  125/     63C : FA                          STC                 ;(1) stop bit is 1
(1)  126/     63D : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     63E : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     63F :                     PUTCHAR_L2:
(1)  129/     63F : E1                  	WMP                 ;(1) 10cycle/bit
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 33 - 2023/02/17 14:46:32


(1)  130/     640 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     642 : 7F 42                       ISZ R15, $          ;(4)
(1)  132/     644 : F6                          RAR                 ;(1)
(1)  133/     645 : 7D 3F                       ISZ R13, PUTCHAR_L2  ;(2)
(1)  134/     647 :                     	
(1)  135/     647 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     647 :                     	LDM BANK_DEFAULT    
(1)  137/     647 :                             DCL                 ; restore bank to default
(1)  138/     647 : [135]                	endif
(1)  139/     647 : C0                          BBL 0
(1)  140/     648 :                     
(1)  141/     648 :                     
    1792/     648 : [1787]               	endcase
    1793/     648 :                     
    1794/     648 :                     ;;;---------------------------------------------------------------------------
    1795/     648 :                     ;;; PRINT_ACC
    1796/     648 :                     ;;; print contents of ACC('0'...'F') as a character
    1797/     648 :                     ;;; destroy: P1, P6, P7, ACC
    1798/     648 :                     ;;;---------------------------------------------------------------------------
    1799/     648 :                     
    1800/     648 :                     PRINT_ACC:
    1801/     648 : 22 30               	FIM R2R3, 30H		;'0'
    1802/     64A : F1                  	CLC			; clear carry
    1803/     64B : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    1804/     64C : 1A 50               	JCN CN, PRINTACC_L1
    1805/     64E : 62                  	INC R2
    1806/     64F : F2                  	IAC
    1807/     650 :                     PRINTACC_L1:	
    1808/     650 : B3                  	XCH R3			; R3<-ACC
    1809/     651 : 46 28               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    1810/     653 :                     
    1811/     653 :                     ;;;---------------------------------------------------------------------------
    1812/     653 :                     ;;; PRINT_CRLF
    1813/     653 :                     ;;; print "\r\n"
    1814/     653 :                     ;;; destroy: P1, ACC
    1815/     653 :                     ;;; this routine consumes 2 PC stack
    1816/     653 :                     ;;;---------------------------------------------------------------------------
    1817/     653 :                     PRINT_CRLF:
    1818/     653 : 22 0D               	FIM P1, '\r'
    1819/     655 : 56 28               	JMS PUTCHAR_P1
    1820/     657 : 22 0A               	FIM P1, '\n'
    1821/     659 : 56 28               	JMS PUTCHAR_P1
    1822/     65B : C0                  	BBL 0
    1823/     65C :                     
    1824/     65C :                     ;;;---------------------------------------------------------------------------
    1825/     65C :                     ;;; PRINT_CR
    1826/     65C :                     ;;; print "\r"
    1827/     65C :                     ;;; destroy: P1, ACC
    1828/     65C :                     ;;; this routine consumes 1 PC stack
    1829/     65C :                     ;;;---------------------------------------------------------------------------
    1830/     65C :                     PRINT_CR:
    1831/     65C : 22 0D               	FIM P1, '\r'
    1832/     65E : 46 28               	JUN PUTCHAR_P1
    1833/     660 :                     
    1834/     660 :                     ;;;---------------------------------------------------------------------------
    1835/     660 :                     ;;; PRINT_LF
    1836/     660 :                     ;;; print "\n"
    1837/     660 :                     ;;; destroy: P1, ACC
    1838/     660 :                     ;;; this routine consumes 1 PC stack
    1839/     660 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 34 - 2023/02/17 14:46:32


    1840/     660 :                     PRINT_LF:
    1841/     660 : 22 0A               	FIM P1, '\n'
    1842/     662 : 46 28               	JUN PUTCHAR_P1
    1843/     664 :                     
    1844/     664 :                     ;;;---------------------------------------------------------------------------
    1845/     664 :                     ;;; INIT_SERIAL
    1846/     664 :                     ;;; Initialize serial port
    1847/     664 :                     ;;;---------------------------------------------------------------------------
    1848/     664 :                     
    1849/     664 :                     INIT_SERIAL:
    1850/     664 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    1851/     664 :                     	LDM BANK_SERIAL     ; bank of output port
    1852/     664 :                             DCL                 ; set port bank
    1853/     664 : [1850]               	endif
    1854/     664 :                     	
    1855/     664 : 2E 00                       FIM P7, CHIP_SERIAL ; chip# of output port
    1856/     666 : 2F                  	SRC P7              ; set port address
    1857/     667 : D1                  	LDM 1
    1858/     668 : E1                          WMP                 ; set serial port to 1 (TTL->H)
    1859/     669 :                     
    1860/     669 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    1861/     669 :                     	LDM BANK_DEFAULT    
    1862/     669 :                             DCL                 ; restore bank to default
    1863/     669 : [1860]               	endif
    1864/     669 :                     
    1865/     669 : C0                          BBL 0
    1866/     66A :                     
    1867/     66A :                     ;;;---------------------------------------------------------------------------
    1868/     66A :                     ;;; CTOI_P1_R5
    1869/     66A :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    1870/     66A :                     ;;; input: P1(R2R3)
    1871/     66A :                     ;;; output: R5
    1872/     66A :                     ;;;---------------------------------------------------------------------------
    1873/     66A :                     CTOI_P1_R5:
    1874/     66A : F0                  	CLB
    1875/     66B : D3                  	LDM 3
    1876/     66C : 92                  	SUB R2
    1877/     66D : 14 73               	JCN Z, CTOI_09		; check upper 4bit
    1878/     66F : F0                  	CLB
    1879/     670 : D9                  	LDM 9
    1880/     671 : 83                  	ADD R3
    1881/     672 : B3                  	XCH R3
    1882/     673 :                     CTOI_09:
    1883/     673 : A3                  	LD R3
    1884/     674 : B5                  	XCH R5
    1885/     675 : C0                  	BBL 0
    1886/     676 :                     	
    1887/     676 :                     ;;;----------------------------------------------------------------------------
    1888/     676 :                     ;;; DISPLED_P1
    1889/     676 :                     ;;;   DISPLAY the contents of P1 on Port 2 and 3
    1890/     676 :                     ;;; Input: P1(R2R3)
    1891/     676 :                     ;;; Output:  ACC=0
    1892/     676 :                     ;;; Working: P7
    1893/     676 :                     ;;; Destroy: P7
    1894/     676 :                     ;;;----------------------------------------------------------------------------
    1895/     676 :                     
    1896/     676 :                     DISPLED_P1:
    1897/     676 : D1                  	LDM BANK_RAM2
    1898/     677 : FD                          DCL
    1899/     678 : 2E 00                       FIM P7, CHIP_RAM2
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 35 - 2023/02/17 14:46:32


    1900/     67A : 2F                          SRC P7
    1901/     67B : A3                          LD R3
    1902/     67C : E1                          WMP
    1903/     67D :                     	
    1904/     67D : D1                          LDM BANK_RAM3
    1905/     67E : FD                          DCL
    1906/     67F : 2E 40                       FIM P7, CHIP_RAM3
    1907/     681 : 2F                          SRC P7
    1908/     682 : A2                          LD R2
    1909/     683 : E1                          WMP
    1910/     684 :                     
    1911/     684 : D0                          LDM BANK_DEFAULT	; restore BANK to default
    1912/     685 : FD                  	DCL
    1913/     686 :                     	
    1914/     686 : C0                          BBL 0
    1915/     687 :                     
    1916/     687 :                     ;;;----------------------------------------------------------------------------
    1917/     687 :                     ;;; DISPLED_ACC
    1918/     687 :                     ;;;   DISPLAY the contents of ACC on Port 1
    1919/     687 :                     ;;; Input: ACC
    1920/     687 :                     ;;; Output:  ACC=0
    1921/     687 :                     ;;; Working: P7
    1922/     687 :                     ;;; Destroy: P7
    1923/     687 :                     ;;;----------------------------------------------------------------------------
    1924/     687 :                     
    1925/     687 :                     DISPLED_ACC:
    1926/     687 : =>FALSE              	if (BANK_RAM1 != BANK_DEFAULT)
    1927/     687 :                             LDM BANK_RAM1
    1928/     687 :                             DCL
    1929/     687 : [1926]               	endif
    1930/     687 :                     	
    1931/     687 : 2E 40                       FIM P7, CHIP_RAM1
    1932/     689 : BE                          XCH R14         ; save ACC
    1933/     68A :                     
    1934/     68A : BE                          XCH R14         ; restore ACC
    1935/     68B : 2F                          SRC P7          
    1936/     68C : E1                          WMP
    1937/     68D :                     
    1938/     68D : =>FALSE              	if (BANK_RAM1 != BANK_DEFAULT)
    1939/     68D :                     	LDM BANK_DEFAULT	; restore BANK to default
    1940/     68D :                     	DCL
    1941/     68D : [1938]               	endif
    1942/     68D :                     	
    1943/     68D : C0                  	BBL 0
    1944/     68E :                                     
    1945/     68E :                     ;;;----------------------------------------------------------------------------
    1946/     68E :                     ;;; BLINK_LED
    1947/     68E :                     ;;;   Blink LED N times (N=ACC, N=16 if ACC==0)
    1948/     68E :                     ;;; Input: ACC
    1949/     68E :                     ;;; Output: ACC=0
    1950/     68E :                     ;;; Working: R11
    1951/     68E :                     ;;; Destroy: R11, P6, P7
    1952/     68E :                     ;;;----------------------------------------------------------------------------
    1953/     68E :                     
    1954/     68E :                     BLINK_LED:
    1955/     68E : F4                  	CMA
    1956/     68F : F2                  	IAC
    1957/     690 : BB                  	XCH R11         ; set counter=16-ACC
    1958/     691 :                     BLINK_L0	
    1959/     691 : D0                          LDM BANK_RAM1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 36 - 2023/02/17 14:46:32


    1960/     692 : 2E 40                       FIM P7, CHIP_RAM1
    1961/     694 : 56 A5                       JMS BLINK_SUB
    1962/     696 :                     
    1963/     696 : D1                          LDM BANK_RAM2
    1964/     697 : 2E 00                       FIM P7, CHIP_RAM2
    1965/     699 : 56 A5                       JMS BLINK_SUB
    1966/     69B :                     
    1967/     69B : D1                          LDM BANK_RAM3
    1968/     69C : 2E 40                       FIM P7, CHIP_RAM3
    1969/     69E : 56 A5                       JMS BLINK_SUB
    1970/     6A0 :                     	
    1971/     6A0 : 7B 91                       ISZ R11, BLINK_L0
    1972/     6A2 :                     
    1973/     6A2 : D0                  	LDM BANK_DEFAULT
    1974/     6A3 : FD                  	DCL
    1975/     6A4 :                     
    1976/     6A4 : C0                  	BBL 0
    1977/     6A5 :                     
    1978/     6A5 :                     BLINK_SUB:	
    1979/     6A5 : FD                          DCL
    1980/     6A6 : 2F                          SRC P7
    1981/     6A7 : D8                          LDM 8
    1982/     6A8 : E1                          WMP             ; LED(MSB) on
    1983/     6A9 : D8                          LDM 8
    1984/     6AA : 56 AF                       JMS WAIT10MS    ; wait 80ms
    1985/     6AC : D0                          LDM 0
    1986/     6AD : E1                          WMP             ; LED off
    1987/     6AE : C0                          BBL 0
    1988/     6AF :                     
    1989/     6AF :                     ;;;----------------------------------------------------------------------------
    1990/     6AF :                     ;;; Wait Subroutines WAIT10MS and WAIT100MS
    1991/     6AF :                     ;;;
    1992/     6AF :                     ;;; Constants '45EF'(10ms) and '11FE'(100ms) are calculated
    1993/     6AF :                     ;;; by Jim's 4004 Delay Loop Calculator
    1994/     6AF :                     ;;; https://github.com/jim11662418/4004-delay-calculator
    1995/     6AF :                     ;;;
    1996/     6AF :                     ;;; 10.8003857uS/cycle (@5.185MHz clock)
    1997/     6AF :                     ;;;----------------------------------------------------------------------------
    1998/     6AF :                     ;;;----------------------------------------------------------------------------
    1999/     6AF :                     ;;; WAIT10MS
    2000/     6AF :                     ;;; Input: ACC
    2001/     6AF :                     ;;; Output: return with ACC=0
    2002/     6AF :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    2003/     6AF :                     ;;;   wait for 10 * N ms (N=ACC, N=16 if ACC==0)
    2004/     6AF :                     ;;;----------------------------------------------------------------------------
    2005/     6AF :                                     
    2006/     6AF :                     WAIT10MS:
    2007/     6AF : 2C 45               	FIM R12R13, 045H  ; 9947us delay(921 cycles)
    2008/     6B1 : 2E EF                       FIM R14R15, 0EFH  ; 
    2009/     6B3 :                     W10_L1:
    2010/     6B3 : 7C B3                	ISZ R12, W10_L1
    2011/     6B5 : 7D B3                       ISZ R13, W10_L1
    2012/     6B7 : 7E B3                       ISZ R14, W10_L1
    2013/     6B9 : 7F B3                       ISZ R15, W10_L1
    2014/     6BB : F8                          DAC
    2015/     6BC : 1C AF                       JCN ZN, WAIT10MS  ; 9979us delay(924 cycles)/loop
    2016/     6BE :                     W10_EXIT:
    2017/     6BE : C0                  	BBL 0
    2018/     6BF :                     
    2019/     6BF :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 37 - 2023/02/17 14:46:32


    2020/     6BF :                     ;;; WAIT100MS
    2021/     6BF :                     ;;; Input: ACC
    2022/     6BF :                     ;;; Output: return with ACC=0
    2023/     6BF :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    2024/     6BF :                     ;;;   wait for 100 * N ms (N=ACC, N=16 if ACC==0)
    2025/     6BF :                     ;;;----------------------------------------------------------------------------
    2026/     6BF :                                     
    2027/     6BF :                     WAIT100MS:
    2028/     6BF : 2C 11               	FIM R12R13, 011H  ; 99958us delay(9255 cycles)
    2029/     6C1 : 2E FE                       FIM R14R15, 0FEH  ; 
    2030/     6C3 :                     W100_L1:
    2031/     6C3 : 7C C3                       ISZ R12, W100_L1
    2032/     6C5 : 7D C3                       ISZ R13, W100_L1
    2033/     6C7 : 7E C3                       ISZ R14, W100_L1
    2034/     6C9 : 7F C3                       ISZ R15, W100_L1
    2035/     6CB : F8                          DAC
    2036/     6CC : 1C BF                       JCN ZN, WAIT100MS  ; 99990us delay(9258 cycles)/loop
    2037/     6CE :                     W100_EXIT:
    2038/     6CE : C0                  	BBL 0
    2039/     6CF :                                     
    2040/     6CF :                     ;;;----------------------------------------------------------------------------
    2041/     6CF :                     ;;; Print subroutine and string data located in Page 7 (0700H-07FFH)
    2042/     6CF :                     ;;; 
    2043/     6CF :                     ;;; The string data sould be located in the same page as the print routine.
    2044/     6CF :                     ;;;----------------------------------------------------------------------------
    2045/     700 :                             org 0700H
    2046/     700 :                     ;;;----------------------------------------------------------------------------
    2047/     700 :                     ;;; PRINT_P0
    2048/     700 :                     ;;; Input: P0 (top of the string is 0700H+P0)
    2049/     700 :                     ;;; Working: P1(R2, R3)
    2050/     700 :                     ;;; Destroy: P1, P6, P7 (by PUTCHAR_P1), 
    2051/     700 :                     ;;;----------------------------------------------------------------------------
    2052/     700 :                     
    2053/     700 :                     PRINT_P0:
    2054/     700 : 32                          FIN P1			; P1=(P0)
    2055/     701 : A2                          LD R2
    2056/     702 : 14 0B                       JCN Z, P7_UPPER0	; R2==0
    2057/     704 :                     P7_PUT:
    2058/     704 : 56 28                       JMS PUTCHAR_P1             ; putchar(P1)
    2059/     706 : 71 00                       ISZ R1, PRINT_P0           ; P0=P0+1
    2060/     708 : 60                          INC R0
    2061/     709 : 47 00                       JUN PRINT_P0               ; print remaining string
    2062/     70B :                     P7_UPPER0:
    2063/     70B : A3                  	LD R3
    2064/     70C : 1C 04                       JCN ZN, P7_PUT     	; R3 != 0
    2065/     70E :                     P7_EXIT:
    2066/     70E : C0                          BBL 0                   ; exit if P1(R2,R3) == 0
    2067/     70F :                                     
    2068/     70F :                     ;;;----------------------------------------------------------------------------
    2069/     70F :                     ;;; String data
    2070/     70F :                     ;;;----------------------------------------------------------------------------
    2071/     70F :                     
    2072/     70F :                     STR_OMSG:
    2073/     70F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004)\r\nTiny Monitor\r\n", 0
              715 : 20 4D 43 53 2D 34 
              71B : 20 28 34 30 30 34 
              721 : 29 0D 0A 54 69 6E 
              727 : 79 20 4D 6F 6E 69 
              72D : 74 6F 72 0D 0A 00 
    2074/     733 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 38 - 2023/02/17 14:46:32


    2075/     733 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    2076/     738 :                     STR_BANK:
    2077/     738 : 20 42 41 4E 4B 3D   	data " BANK=", 0
              73E : 00                
    2078/     73F :                     STR_CHIP:
    2079/     73F : 20 43 48 49 50 3D   	data " CHIP=", 0
              745 : 00                
    2080/     746 :                     STR_ADD:
    2081/     746 : 20 41 44 44 28 46   	data " ADD(Fx0)=", 0
              74C : 78 30 29 3D 00    
    2082/     751 :                     STR_CALC:
    2083/     751 : 0D 0A 43 61 6C 63   	data "\r\nCalculator Mode\r\n", 0
              757 : 75 6C 61 74 6F 72 
              75D : 20 4D 6F 64 65 0D 
              763 : 0A 00             
    2084/     765 :                     STR_CMDERR:
    2085/     765 : 0D 0A 64 3A 64 75   	data "\r\nd:dump RAM, w:write RAM, W:Write PM, D:Dump PM\r\nC:Clear, c:Calc mode\r\n", 0 ;
              76B : 6D 70 20 52 41 4D 
              771 : 2C 20 77 3A 77 72 
              777 : 69 74 65 20 52 41 
              77D : 4D 2C 20 57 3A 57 
              783 : 72 69 74 65 20 50 
              789 : 4D 2C 20 44 3A 44 
              78F : 75 6D 70 20 50 4D 
              795 : 0D 0A 43 3A 43 6C 
              79B : 65 61 72 2C 20 63 
              7A1 : 3A 43 61 6C 63 20 
              7A7 : 6D 6F 64 65 0D 0A 
              7AD : 00                
    2086/     7AE :                     STR_CALC_SQRT:
    2087/     7AE : 20 53 51 52 0D 0A   	data " SQR\r\n",0
              7B4 : 00                
    2088/     7B5 :                     
    2089/     7B5 :                     ;;;----------------------------------------------------------------------------
    2090/     7B5 :                     ;;; String data
    2091/     7B5 :                     ;;;----------------------------------------------------------------------------
    2092/     7B5 :                     	
    2093/     7B5 :                     ;;;---------------------------------------------------------------------------
    2094/     7B5 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    2095/     7B5 :                     ;;;---------------------------------------------------------------------------
    2096/     7B5 :                     ;;; READPM_P0
    2097/     7B5 :                     ;;; P1 = (P0)
    2098/     7B5 :                     ;;; input: P0
    2099/     7B5 :                     ;;; output: P1
    2100/     7B5 :                     ;;;---------------------------------------------------------------------------
    2101/     7B5 :                     ;;; 	org 0FF0H
    2102/     7B5 :                     ;;; PM_READ_P0_P2:
    2103/     7B5 : 34                  	FIN P2
    2104/     7B6 : C0                  	BBL 0
    2105/     7B7 :                     
    2106/     7B7 :                     	end
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 39 - 2023/02/17 14:46:32


  Symbol Table (* = unused):
  --------------------------

 ADD_FRACTION_P6_P7 :           390 C | *ADD_FRA_EXIT :                 39E C |
 ADD_FRA_LOOP :                 395 C |  ALIGN_EXIT :                   4C7 C |
 ALIGN_REGISTER_XY :            4A6 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - |  BANK_RAM2 :                      1 - |
 BANK_RAM3 :                      1 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  BLINK_L0 :                     691 C |
 BLINK_LED :                    68E C |  BLINK_SUB :                    6A5 C |
*CASESENSITIVE :                  0 - |  CHANGE_SIGN_REG_X :            4F6 C |
 CHIP_RAM0 :                      0 - |  CHIP_RAM1 :                     40 - |
 CHIP_RAM2 :                      0 - |  CHIP_RAM3 :                     40 - |
 CHIP_SERIAL :                    0 - |  CLEAR_FRACTION_P0 :            4CE C |
 CLEAR_REGISTER_L0 :            4CF C |  CLEAR_REGISTER_P0 :            4C8 C |
 CMDCL_L1 :                     1D9 C |  CMDC_ADD :                     342 C |
 CMDC_ADD_EXIT :                377 C |  CMDC_ADD_SAMESIGN :            371 C |
 CMDC_ADD_ZERO_EXIT :           379 C |
 CMDC_AUTOMATIC_PUSH_AND_CLEAR :                                        2E8 C |
 CMDC_CLEAR :                   2FD C |
 CMDC_CLEAR_AUTOMATIC_ENTER_FLAG :                                      2E2 C |
 CMDC_DIGITPOINT :              2F7 C |  CMDC_DIV :                     4FD C |
 CMDC_DIVIDEND_ZERO :           547 C |  CMDC_DIV_BY_ZERO :             541 C |
*CMDC_DP_EXIT :                 2FC C |  CMDC_ENTER :                   30F C |
 CMDC_L1 :                      22B C |  CMDC_L10 :                     2C2 C |
 CMDC_L11 :                     2CC C |  CMDC_L2 :                      235 C |
 CMDC_L3 :                      245 C |  CMDC_L4 :                      255 C |
 CMDC_L5 :                      265 C |  CMDC_L6 :                      275 C |
 CMDC_L7 :                      281 C |  CMDC_L8 :                      28F C |
 CMDC_L81 :                     29B C |  CMDC_L9 :                      2AB C |
 CMDC_LOOP :                    213 C |  CMDC_MUL :                     400 C |
 CMDC_MUL_EXIT :                422 C |  CMDC_MUL_L0 :                  420 C |
 CMDC_MUL_ZERO :                424 C |  CMDC_NORMALIZE_AND_POP :       37F C |
 CMDC_NUM :                     323 C |  CMDC_NUM_EXIT :                341 C |
 CMDC_PRINT :                   454 C |  CMDC_PUSH_EXIT :               2F6 C |
 CMDC_PUSH_L0 :                 2EE C |  CMDC_SETNUM :                  332 C |
 CMDC_SET_AUTOMATIC_ENTER_FLAG :                                        2DC C |
 CMDC_SQR_EXIT :                0EB C |  CMDC_SQR_LOOP :                0C3 C |
 CMDC_SQR_RETURN :              2A7 C |  CMDC_SQUAREROOT :              0B2 C |
 CMDC_START :                   206 C |  CMDC_SUB :                     46D C |
 CMDDP_L0 :                     1B0 C |  CMDDP_L1 :                     1BF C |
 CMDD_L1 :                      102 C |  CMDD_L2 :                      104 C |
 CMDWP_L1 :                     18C C |  CMDW_L1 :                      12C C |
 CMDW_L2 :                      12E C |  CMD_LOOP :                      10 C |
 CMD_SUB_X_Y :                  369 C | *CMD_SUB_Y_X :                  357 C |
 CMP_EXIT01 :                    9E C |  CMP_EXIT11 :                    9F C |
 CMP_FRACTION_EXIT10 :          3C9 C |  CMP_FRACTION_EXIT11 :          3CA C |
 CMP_FRACTION_LOOP :            3B3 C |  CMP_FRACTION_NEXT :            3C6 C |
 CMP_FRACTION_P6_P7 :           3B1 C |  CMP_L1 :                        96 C |
 CMP_P0P1 :                      8E C |  COMMAND_C :                    200 C |
 COMMAND_CL :                   1D3 C |  COMMAND_D :                    100 C |
 COMMAND_DP :                   1AA C |  COMMAND_G :                    1E1 C |
 COMMAND_W :                    12A C |  COMMAND_WP :                   16D C |
*COMPMODE :                       0 - | *CONSTPI :        3.141592653589793 - |
 CTOI_09 :                      673 C |  CTOI_P1_R5 :                   66A C |
*DATE :                "2023/02/17" - |  DISPLED_ACC :                  687 C |
 DISPLED_P1 :                   676 C |  DIV_FRAC :                     53D C |
 DIV_FRACTION_XY :              54C C |  DIV_FRAC_ADJ_EXP :             52A C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 40 - 2023/02/17 14:46:32


 DIV_LOOP :                     558 C |  DIV_LOOP_D14 :                 517 C |
 DIV_LOOP_L0 :                  51F C |  DIV_SUB_COUNT :                55A C |
 DIV_SUB_COUNT_EXIT :           568 C |  EY_GE_EX :                     4C0 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
 GETCHAR_L1 :                   608 C |  GETCHAR_L2 :                   60D C |
 GETCHAR_L3 :                   610 C |  GETCHAR_L4 :                   617 C |
 GETCHAR_L5 :                   61C C |  GETCHAR_L6 :                   61F C |
 GETCHAR_OK :                   627 C |  GETCHAR_P1 :                   600 C |
 GET_SIGN_EXIT :                58A C |  GET_SIGN_PRODUCT_P6_P7 :       580 C |
*HAS64 :                          1 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - |  INIT_SERIAL :                  664 C |
*INSUPMODE :                      0 - |  ISNUM_FALSE :                  2DB C |
 ISNUM_P1 :                     2CE C |  ISZERO_EXIT0 :                 4F5 C |
 ISZERO_LOOP :                  4EE C |  ISZERO_REGISTER_P0 :           4EC C |
 L0 :                            2E C |  L1 :                            38 C |
 L2 :                            42 C |  L3 :                            4A C |
 L4 :                            52 C |  L5 :                            5A C |
 L6 :                            62 C |  L9 :                            6A C |
 LD_FRACTION_L0 :               4E4 C |  LD_FRACTION_P6_P7 :            4E4 C |
 LD_REGISTER_P6_P7 :            4D4 C | *LISTON :                         1 - |
 L_CR :                          14 C | *MACEXP :                         7 - |
*MAIN :                           0 C | *MOMCPU :                      4004 - |
*MOMCPUNAME :                "4004" - |  MUL_ADD_LOOP :                 448 C |
 MUL_FRACTION_XY :              42A C |  MUL_LOOP :                     43E C |
 MUL_LOOP_NEXT :                44C C | *NESTMAX :                      100 - |
 NM_EXIT :                      3F2 C |  NM_GO_SHIFT :                  3DD C |
 NM_LOOP :                      3D3 C |  NM_LOOP_ENTRY :                3DB C |
 NM_NOERROR :                   3F1 C |  NORMALIZE_REGISTER_P0 :        3CB C |
*P7_EXIT :                      70E C |  P7_PUT :                       704 C |
 P7_UPPER0 :                    70B C | *PADDING :                        1 - |
 PM_READ_P0_P2 :               0FFE - |  PM_TOP :                      0F00 - |
 PM_WRITE_P0_P1 :               0A0 C |  PM_WRITE_READROUTINE :         0A6 C |
 PRINTACC_L1 :                  650 C |  PRINT_ACC :                    648 C |
 PRINT_CHECK_EXP :              5B1 C |  PRINT_CR :                     65C C |
 PRINT_CRLF :                   653 C |  PRINT_EXIT :                   5D0 C |
*PRINT_LF :                     660 C |  PRINT_P0 :                     700 C |
 PRINT_REGISTER_EQU_ERR :       59A C |  PRINT_REGISTER_L1 :            5CE C |
 PRINT_REGISTER_LOOP :          5BB C |  PRINT_REGISTER_LOOP_SETUP :    5B8 C |
 PRINT_REGISTER_P0 :            592 C |  PRINT_REGISTER_SGN :           5A4 C |
 PRINT_REGISTER_WITH_NAME_P0 :  58B C |  PUTCHAR_L1 :                   630 C |
 PUTCHAR_L2 :                   63F C |  PUTCHAR_P1 :                   628 C |
 REG_A :                         50 - |  REG_B :                         60 - |
*REG_C :                         70 - |  REG_ERROR_DIVBYZERO :            2 - |
 REG_ERROR_OVERFLOW :             1 - |  REG_M :                         40 - |
 REG_T :                         30 - |  REG_X :                          0 - |
 REG_Y :                         10 - |  REG_Z :                         20 - |
*RELAXED :                        0 - |  SETBANKCHIP_P5 :                70 C |
 SHIFTL_EXIT :                  4A5 C |  SHIFTL_LOOP :                  48E C |
 SHIFTL_NEXT :                  4A3 C | *SHIFTL_READ :                  492 C |
 SHIFTL_WRITE :                 498 C |  SHIFTR_EXIT :                  486 C |
 SHIFTR_LOOP :                  478 C |  SHIFTR_NEXT :                  484 C |
*SHIFTR_READ :                  47B C |  SHIFTR_WRITE :                 47D C |
 SHIFT_FRACTION_LEFT_P0_ACC :   487 C |  SHIFT_FRACTION_RIGHT_P0_ACC :  471 C |
 STR_ADD :                      746 C |  STR_BANK :                     738 C |
 STR_CALC :                     751 C |  STR_CALC_SQRT :                7AE C |
 STR_CHIP :                     73F C |  STR_CMDERR :                   765 C |
 STR_OMSG :                     70F C |  STR_VFD_INIT :                 733 C |
 SUB_FRACTION_P6_P7 :           39F C |  SUB_FRA_LOOP :                 3A5 C |
*TIME :                  "14:46:32" - | *TRUE :                           1 - |
*VERSION :                     142F - | *W100_EXIT :                    6CE C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 41 - 2023/02/17 14:46:32


 W100_L1 :                      6C3 C | *W10_EXIT :                     6BE C |
 W10_L1 :                       6B3 C |  WAIT100MS :                    6BF C |
 WAIT10MS :                     6AF C |

    232 symbols
     32 unused symbols

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 42 - 2023/02/17 14:46:32


  Register Definitions (* = unused):
  ----------------------------------

 P0 --> R0P                           |  P1 --> R1P                          
 P2 --> R2P                           |  P3 --> R3P                          
*P4 --> R4P                           |  P5 --> R5P                          
 P6 --> R6P                           |  P7 --> R7P                          
*R10 --> R10                          | *R10R11 --> R5P                      
*R11 --> R11                          | *R12 --> R12                         
*R12R13 --> R6P                       | *R13 --> R13                         
*R14 --> R14                          | *R14R15 --> R7P                      
*R15 --> R15                         

     17 definitions

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 43 - 2023/02/17 14:46:32


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
LO                                    |

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 44 - 2023/02/17 14:46:32


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   2248 lines source file
      2 passes
      0 errors
      0 warnings
