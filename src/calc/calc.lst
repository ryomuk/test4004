 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 1 - 2023/02/17 11:38:13


       1/       0 :                     ;;;---------------------------------------------------------------------------
       2/       0 :                     ;;; Tiny Monitor with calculator program for 4004 evaluation board
       3/       0 :                     ;;; by Ryo Mukai
       4/       0 :                     ;;; 2023/02/16
       5/       0 :                     ;;;---------------------------------------------------------------------------
       6/       0 :                     
       7/       0 :                     ;;;---------------------------------------------------------------------------
       8/       0 :                     ;;; This source can be assembled with the Macroassembler AS
       9/       0 :                     ;;; (http://john.ccac.rwth-aachen.de:8000/as/)
      10/       0 :                     ;;;---------------------------------------------------------------------------
      11/       0 :                     ;;; Conditional jumps syntax for Macroassembler AS:
      12/       0 :                     ;;; JCN T     jump if TEST = 0 - most positive voltage or +5V
      13/       0 :                     ;;; JCN TN    jump if TEST = 1 - most negative voltage or -10V
      14/       0 :                     ;;; JCN C     jump if carry = 1
      15/       0 :                     ;;; JCN CN    jump if carry = 0
      16/       0 :                     ;;; JCN Z     jump if accumulator = 0
      17/       0 :                     ;;; JCN ZN    jump if accumulator != 0
      18/       0 :                     ;;;---------------------------------------------------------------------------
      19/       0 :                     
      20/       0 :                     	cpu 4004        ; AS's command to specify CPU
      21/       0 :                     
      22/       0 :                     ;;;---------------------------------------------------------------------------
      23/       0 :                     ;;; function for label to address for FIM&FIN
      24/       0 :                     ;;;---------------------------------------------------------------------------
      25/       0 :                     
      26/       0 :                     lo     	function x, ((x)&255)
      27/       0 :                     
      28/       0 :                     ;;;---------------------------------------------------------------------------
      29/       0 :                     ;;; functuon for setting counter for ISZ loop
      30/       0 :                     ;;;---------------------------------------------------------------------------
      31/       0 :                     
      32/       0 :                     loop 	function x, (16-(x))
      33/       0 :                     loops   function x,y, ((16-(x))<<4 + (16-(y)))
      34/       0 :                     
      35/       0 :                     ;;;---------------------------------------------------------------------------
      36/       0 :                     ;;; Alias for Registers and Register Pairs
      37/       0 :                     ;;;---------------------------------------------------------------------------
      38/       0 :                     
      39/       0 :                     ;;; Registers
      40/       0 : =R10                 R10	reg RA
      41/       0 : =R11                 R11     reg RB
      42/       0 : =R12                 R12     reg RC
      43/       0 : =R13                 R13 	reg RD
      44/       0 : =R14                 R14     reg RE
      45/       0 : =R15                 R15     reg RF
      46/       0 :                     
      47/       0 :                     ;;; Register Pairs
      48/       0 : =R0P                 P0      reg R0R1
      49/       0 : =R1P                 P1      reg R2R3
      50/       0 : =R2P                 P2      reg R4R5
      51/       0 : =R3P                 P3      reg R6R7
      52/       0 : =R4P                 P4      reg R8R9
      53/       0 : =R5P                 P5      reg RARB
      54/       0 : =R6P                 P6      reg RCRD
      55/       0 : =R7P                 P7      reg RERF
      56/       0 : =R5P                 R10R11  reg RARB
      57/       0 : =R6P                 R12R13  reg RCRD
      58/       0 : =R7P                 R14R15  reg RERF
      59/       0 :                     
      60/       0 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 2 - 2023/02/17 11:38:13


      61/       0 :                     ;;; Hardware Configuration
      62/       0 :                     ;;;---------------------------------------------------------------------------
      63/       0 :                     
      64/       0 :                     ;;; BANK# for DCL
      65/       0 : =0H                  BANK_RAM0	equ 0
      66/       0 : =0H                  BANK_RAM1      	equ 0
      67/       0 : =1H                  BANK_RAM2      	equ 1
      68/       0 : =1H                  BANK_RAM3      	equ 1
      69/       0 :                     
      70/       0 :                     ;;; CHIP#=(D7.D6.000000)
      71/       0 : =0H                  CHIP_RAM0      	equ 00H
      72/       0 : =40H                 CHIP_RAM1      	equ 40H
      73/       0 : =0H                  CHIP_RAM2      	equ 00H
      74/       0 : =40H                 CHIP_RAM3      	equ 40H
      75/       0 :                     
      76/       0 :                     ;;; Serial Port (BANK# and CHIP#)
      77/       0 : =0H                  BANK_SERIAL     equ BANK_RAM0
      78/       0 : =0H                  CHIP_SERIAL     equ CHIP_RAM0
      79/       0 :                     
      80/       0 :                     ;;; Program Memory
      81/       0 : =0F00H               PM_TOP          equ 0F00H
      82/       0 : =0FFEH               PM_READ_P0_P2   equ 0FFEH
      83/       0 :                     
      84/       0 :                     ;;; Default Bank
      85/       0 : =0H                  BANK_DEFAULT	equ BANK_RAM0
      86/       0 :                     		
      87/       0 :                     ;;;---------------------------------------------------------------------------
      88/       0 :                     ;;; Program Start
      89/       0 :                     ;;;---------------------------------------------------------------------------
      90/       0 :                     	org 0000H		; beginning of Program Memory
      91/       0 :                     
      92/       0 :                     MAIN:
      93/       0 : F0                          CLB
      94/       1 :                     
      95/       1 : =>FALSE              	if (BANK_DEFAULT != 0)
      96/       1 :                     	;; initialize DL to bank 0
      97/       1 :                     	;; DL is assumed to be set back to BANK_DEFAULT (normally 0)
      98/       1 :                     	;; except when in use for another banks.
      99/       1 :                     	LDM BANK_DEFAULT
     100/       1 :                     	DCL
     101/       1 : [95]                 	endif
     102/       1 :                     	
     103/       1 : 56 64               	JMS INIT_SERIAL ; Initialize Serial Port
     104/       3 : 50 A6               	JMS PM_WRITE_READROUTINE ; write PM_READ code on program memory
     105/       5 :                     
     106/       5 :                     ;       JCN TN, $		wait for TEST="0" (button pressed)
     107/       5 : D2                          LDM 2
     108/       6 : 56 8E                       JMS BLINK_LED   ; blink LED 2 times
     109/       8 : 20 33               	FIM P0, lo(STR_VFD_INIT) ; init VFD
     110/       A : 57 00                       JMS PRINT_P0;
     111/       C : 20 0F               	FIM P0, lo(STR_OMSG) ; opening message in the Page 7
     112/       E : 57 00                       JMS PRINT_P0;
     113/      10 :                     
     114/      10 :                     CMD_LOOP:
     115/      10 : 22 5D                       FIM P1, ']'		; prompt
     116/      12 : 56 28                       JMS PUTCHAR_P1
     117/      14 :                     
     118/      14 :                     L_CR:
     119/      14 : 56 00               	JMS GETCHAR_P1
     120/      16 : 56 87                       JMS DISPLED_ACC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 3 - 2023/02/17 11:38:13


     121/      18 : 56 76                       JMS DISPLED_P1
     122/      1A : 20 0D               	FIM P0, '\r'
     123/      1C : 50 8E               	JMS CMP_P0P1
     124/      1E : 14 14               	JCN Z, L_CR		; skip CR
     125/      20 :                     
     126/      20 : 56 28               	JMS PUTCHAR_P1		; echo input
     127/      22 :                     
     128/      22 : 20 0A               	FIM P0, '\n'
     129/      24 : 50 8E               	JMS CMP_P0P1
     130/      26 : 1C 2E               	JCN ZN, L0
     131/      28 : 22 0D               	FIM P1, '\r'
     132/      2A : 56 28               	JMS PUTCHAR_P1		; put CR
     133/      2C : 40 10               	JUN CMD_LOOP
     134/      2E :                     
     135/      2E :                     L0:
     136/      2E : 20 64               	FIM P0, 'd'		; dump data memory
     137/      30 : 50 8E               	JMS CMP_P0P1
     138/      32 : 1C 38               	JCN ZN, L1
     139/      34 : 50 70               	JMS SETBANKCHIP_P5
     140/      36 : 41 00               	JUN COMMAND_D
     141/      38 :                     L1:
     142/      38 : 20 77               	FIM P0, 'w'		; write to data memory
     143/      3A : 50 8E               	JMS CMP_P0P1
     144/      3C : 1C 42               	JCN ZN, L2
     145/      3E : 50 70               	JMS SETBANKCHIP_P5
     146/      40 : 41 2A               	JUN COMMAND_W
     147/      42 :                     L2:
     148/      42 : 20 44               	FIM P0, 'D'		; Dump program memory
     149/      44 : 50 8E               	JMS CMP_P0P1
     150/      46 : 1C 4A               	JCN ZN, L3
     151/      48 : 41 AA               	JUN COMMAND_DP
     152/      4A :                     L3:
     153/      4A : 20 57               	FIM P0, 'W'		; Write Program memory
     154/      4C : 50 8E               	JMS CMP_P0P1
     155/      4E : 1C 52               	JCN ZN, L4
     156/      50 : 41 6D               	JUN COMMAND_WP
     157/      52 :                     L4:
     158/      52 : 20 43               	FIM P0, 'C'		; Clear program memory
     159/      54 : 50 8E               	JMS CMP_P0P1
     160/      56 : 1C 5A               	JCN ZN, L5
     161/      58 : 41 D3               	JUN COMMAND_CL
     162/      5A :                     L5:
     163/      5A : 20 67               	FIM P0, 'g'		; Go to PM_TOP (0F00H)
     164/      5C : 50 8E               	JMS CMP_P0P1
     165/      5E : 1C 62               	JCN ZN, L6
     166/      60 : 41 E1               	JUN COMMAND_G
     167/      62 :                     L6:
     168/      62 : 20 63               	FIM P0, 'c'		; Calculator
     169/      64 : 50 8E               	JMS CMP_P0P1
     170/      66 : 1C 6A               	JCN ZN, L9
     171/      68 : 42 00               	JUN COMMAND_C
     172/      6A :                     L9:
     173/      6A : 20 65               	FIM P0, lo(STR_CMDERR)
     174/      6C : 57 00               	JMS PRINT_P0
     175/      6E : 40 10               	JUN CMD_LOOP
     176/      70 :                     
     177/      70 :                     ;;;---------------------------------------------------------------------------
     178/      70 :                     ;;; SETBANKCHIP_P5
     179/      70 :                     ;;; Set #bank and #chip to R10 and R11
     180/      70 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 4 - 2023/02/17 11:38:13


     181/      70 :                     SETBANKCHIP_P5:
     182/      70 : 20 38               	FIM P0, lo(STR_BANK)	; print " BANK="
     183/      72 : 57 00               	JMS PRINT_P0
     184/      74 : 56 00               	JMS GETCHAR_P1
     185/      76 : 56 28               	JMS PUTCHAR_P1
     186/      78 : 56 6A               	JMS CTOI_P1_R5
     187/      7A : A5                  	LD R5
     188/      7B : BA                  	XCH R10			; save BANK to R10
     189/      7C :                     
     190/      7C : 20 3F               	FIM P0, lo(STR_CHIP)	; print " CHIP="
     191/      7E : 57 00               	JMS PRINT_P0
     192/      80 : 56 00               	JMS GETCHAR_P1
     193/      82 : 56 28               	JMS PUTCHAR_P1
     194/      84 : 56 6A               	JMS CTOI_P1_R5
     195/      86 : 56 53               	JMS PRINT_CRLF
     196/      88 : F0                  	CLB
     197/      89 : A5                  	LD R5		; R5 is #chip(0.0.D3.D2)
     198/      8A : F5                  	RAL
     199/      8B : F5                  	RAL
     200/      8C : BB                  	XCH R11 	;set D3D2.00@X2 to R11 (0000 or 0100 or 1000 or 1100)
     201/      8D : C0                  	BBL 0
     202/      8E :                     	
     203/      8E :                     ;;;---------------------------------------------------------------------------
     204/      8E :                     ;;; CMP_P0P1
     205/      8E :                     ;;; compare P0(R0R1) and P1(R2R3)
     206/      8E :                     ;;; input: P0, P1
     207/      8E :                     ;;; output: ACC=1,CY=0 if P0<P1
     208/      8E :                     ;;;         ACC=0,CY=1 if P0==P1 
     209/      8E :                     ;;;         ACC=1,CY=1 if P0>P1
     210/      8E :                     ;;; P0 - P1 (the carry bit is a complement of the borrow)
     211/      8E :                     ;;;---------------------------------------------------------------------------
     212/      8E :                     CMP_P0P1:
     213/      8E : F0                  	CLB
     214/      8F : A0                  	LD R0			
     215/      90 : 92                  	SUB R2			;R0-R2
     216/      91 : 14 96               	JCN Z, CMP_L1
     217/      93 : 12 9F               	JCN C, CMP_EXIT11
     218/      95 : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     219/      96 :                     CMP_L1:	
     220/      96 : F0                  	CLB
     221/      97 : A1                  	LD R1
     222/      98 : 93                  	SUB R3			;R1-R3
     223/      99 : 14 9E               	JCN Z, CMP_EXIT01
     224/      9B : 12 9F               	JCN C, CMP_EXIT11
     225/      9D : C1                  	BBL 1			;P0<P1,  ACC=1, CY=0
     226/      9E :                     CMP_EXIT01:
     227/      9E : C0                  	BBL 0			;P0==P1, ACC=0, CY=1
     228/      9F :                     CMP_EXIT11
     229/      9F : C1                  	BBL 1			;P0>P1,  ACC=1, CY=1
     230/      A0 :                     	
     231/      A0 :                     ;;;---------------------------------------------------------------------------
     232/      A0 :                     ;;; PM_WRITE_P0_P1
     233/      A0 :                     ;;; Write to program memory located at Page 15 (0F00H-0FFFH)
     234/      A0 :                     ;;; (0F00H+P0) = P1
     235/      A0 :                     ;;; input: P0, P1
     236/      A0 :                     ;;; output: none
     237/      A0 :                     ;;;---------------------------------------------------------------------------
     238/      A0 :                     	
     239/      A0 :                     PM_WRITE_P0_P1:
     240/      A0 : 21                  	SRC P0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 5 - 2023/02/17 11:38:13


     241/      A1 : A3                  	LD R3
     242/      A2 : E3                  	WPM			; write lower 4bit
     243/      A3 : A2                  	LD R2
     244/      A4 : E3                  	WPM			; write higher 4bit
     245/      A5 : C0                  	BBL 0
     246/      A6 :                     
     247/      A6 :                     ;;;---------------------------------------------------------------------------
     248/      A6 :                     ;;; PM_WRITE_READROUTINE
     249/      A6 :                     ;;; preparation for reading program memory
     250/      A6 :                     ;;;---------------------------------------------------------------------------
     251/      A6 :                     PM_WRITE_READROUTINE:	
     252/      A6 : 20 FE               	FIM P0, lo(PM_READ_P0_P2)
     253/      A8 : 22 34               	FIM P1, 34H		; FIN P2
     254/      AA : 50 A0               	JMS PM_WRITE_P0_P1
     255/      AC : 61                  	INC R1
     256/      AD : 22 C0               	FIM P1, 0C0H		; BBL 0
     257/      AF : 50 A0               	JMS PM_WRITE_P0_P1
     258/      B1 : C0                  	BBL 0
     259/      B2 :                     
     260/      B2 :                     ;;;---------------------------------------------------------------------------
     261/      B2 :                     ;;; Monitor commands located in page 0100H
     262/      B2 :                     ;;;---------------------------------------------------------------------------
     263/     100 :                     	org 0100H
     264/     100 :                     ;;;---------------------------------------------------------------------------
     265/     100 :                     ;;; COMMAND_D
     266/     100 :                     ;;; Dump Data RAM
     267/     100 :                     ;;; input:
     268/     100 :                     ;;; 	R10: #bank
     269/     100 :                     ;;; 	R11: #chip (D3.D2.0.0)
     270/     100 :                     ;;; working memory:
     271/     100 :                     ;;;     P0(R0R1): working for PRINT_P0
     272/     100 :                     ;;;     P1(R2R3): working for PUTCHAR_P1, PRINT_ACC
     273/     100 :                     ;;;     R4: loop counter for #REG (0.0.D1.D0)
     274/     100 :                     ;;;     R5: working for input
     275/     100 :                     ;;;     R6: working for SCR (R6=R11+R4)
     276/     100 :                     ;;;     R7: working for SCR #CHARACTER (D3.D2.D1.D0)@X3 (loop counter)
     277/     100 :                     ;;;         SCR R6R7
     278/     100 :                     ;;; 	R11: #CHIP (D3.D2.0.0)@X2
     279/     100 :                     ;;;     P6(R12R13): working for uart
     280/     100 :                     ;;;     P7(R14R15): working for uart
     281/     100 :                     ;;;---------------------------------------------------------------------------
     282/     100 :                     COMMAND_D:
     283/     100 :                     	;; PRINT 4 registers
     284/     100 : DC                  	LDM loop(4)		; 4 regs
     285/     101 : B4                  	XCH R4			; R4=loop(4)
     286/     102 :                     
     287/     102 :                     	;; PRINT 16 characters
     288/     102 :                     CMDD_L1:
     289/     102 : D0                  	LDM loop(16)		; 16 characters
     290/     103 : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     291/     104 :                     CMDD_L2:
     292/     104 : F0                  	CLB
     293/     105 : D4                  	LDM 4
     294/     106 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     295/     107 : F1                  	CLC
     296/     108 : 8B                  	ADD R11
     297/     109 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     298/     10A :                     	
     299/     10A : 27                  	SRC R6R7	; set address
     300/     10B : E9                  	RDM		; read data memory
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 6 - 2023/02/17 11:38:13


     301/     10C : 56 48               	JMS PRINT_ACC
     302/     10E : 77 04               	ISZ R7,CMDD_L2
     303/     110 :                     
     304/     110 :                     	;; PRINT STATUS 
     305/     110 : 22 3A               	FIM P1, ':'
     306/     112 : 56 28               	JMS PUTCHAR_P1
     307/     114 : 27                  	SRC R6R7	; set address
     308/     115 : EC                  	RD0
     309/     116 : 56 48               	JMS PRINT_ACC
     310/     118 : 27                  	SRC R6R7	; set address
     311/     119 : ED                  	RD1
     312/     11A : 56 48               	JMS PRINT_ACC
     313/     11C : 27                  	SRC R6R7	; set address
     314/     11D : EE                  	RD2
     315/     11E : 56 48               	JMS PRINT_ACC
     316/     120 : 27                  	SRC R6R7	; set address
     317/     121 : EF                  	RD3
     318/     122 : 56 48               	JMS PRINT_ACC
     319/     124 : 56 53               	JMS PRINT_CRLF
     320/     126 :                     
     321/     126 : 74 02               	ISZ R4,CMDD_L1
     322/     128 : 40 10               	JUN CMD_LOOP		; return to command loop
     323/     12A :                     	
     324/     12A :                     ;;;---------------------------------------------------------------------------
     325/     12A :                     ;;; COMMAND_W:
     326/     12A :                     ;;; Write Data RAM
     327/     12A :                     ;;; input:
     328/     12A :                     ;;; 	R10: #bank
     329/     12A :                     ;;; 	R11: #chip (D3.D2.0.0)
     330/     12A :                     ;;;---------------------------------------------------------------------------
     331/     12A :                     COMMAND_W:
     332/     12A :                     	;; PRINT 4 registers
     333/     12A : DC                  	LDM loop(4)		; 4 regs
     334/     12B : B4                  	XCH R4			; R4=loop(4)
     335/     12C :                     
     336/     12C :                     	;; PRINT 16 characters
     337/     12C :                     CMDW_L1:
     338/     12C : D0                  	LDM loop(16)		; 16 characters
     339/     12D : B7                  	XCH R7			; R7=D3D2D1D0@X3 (#character)
     340/     12E :                     CMDW_L2:
     341/     12E : F0                  	CLB
     342/     12F : D4                  	LDM 4
     343/     130 : 84                  	ADD R4		;ACC<-#reg (D1D0@X2)(00, 01, 10, 11 for each loop)
     344/     131 : F1                  	CLC
     345/     132 : 8B                  	ADD R11
     346/     133 : B6                  	XCH R6		;R6=D3D2D1D0@X2 (#chip.#reg)
     347/     134 :                     
     348/     134 : 56 00               	JMS GETCHAR_P1
     349/     136 : 56 6A               	JMS CTOI_P1_R5
     350/     138 :                     
     351/     138 : 27                  	SRC R6R7	; set address
     352/     139 : A5                  	LD R5
     353/     13A : E0                  	WRM			; write to memory
     354/     13B : 56 48               	JMS PRINT_ACC
     355/     13D : 77 2E               	ISZ R7,CMDW_L2
     356/     13F :                     
     357/     13F :                     	;; PRINT STATUS 
     358/     13F : 22 3A               	FIM P1, ':'
     359/     141 : 56 28               	JMS PUTCHAR_P1
     360/     143 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 7 - 2023/02/17 11:38:13


     361/     143 : 56 00               	JMS GETCHAR_P1
     362/     145 : 56 6A               	JMS CTOI_P1_R5
     363/     147 :                     
     364/     147 : 27                  	SRC R6R7	; set address
     365/     148 : A5                  	LD R5
     366/     149 : E4                  	WR0
     367/     14A : 56 48               	JMS PRINT_ACC
     368/     14C :                     
     369/     14C : 56 00               	JMS GETCHAR_P1
     370/     14E : 56 6A               	JMS CTOI_P1_R5
     371/     150 :                     
     372/     150 : 27                  	SRC R6R7	; set address
     373/     151 : A5                  	LD R5
     374/     152 : E5                  	WR1
     375/     153 : 56 48               	JMS PRINT_ACC
     376/     155 :                     
     377/     155 : 56 00               	JMS GETCHAR_P1
     378/     157 : 56 6A               	JMS CTOI_P1_R5
     379/     159 :                     
     380/     159 : 27                  	SRC R6R7	; set address
     381/     15A : A5                  	LD R5
     382/     15B : E6                  	WR2
     383/     15C : 56 48               	JMS PRINT_ACC
     384/     15E :                     
     385/     15E : 56 00               	JMS GETCHAR_P1
     386/     160 : 56 6A               	JMS CTOI_P1_R5
     387/     162 :                     
     388/     162 : 27                  	SRC R6R7	; set address
     389/     163 : A5                  	LD R5
     390/     164 : E7                  	WR3
     391/     165 : 56 48               	JMS PRINT_ACC
     392/     167 : 56 53               	JMS PRINT_CRLF
     393/     169 :                     
     394/     169 : 74 2C               	ISZ R4,CMDW_L1
     395/     16B :                     	
     396/     16B : 40 10               	JUN CMD_LOOP		; return to command loop
     397/     16D :                     
     398/     16D :                     ;;;---------------------------------------------------------------------------
     399/     16D :                     ;;; COMMAND_WP
     400/     16D :                     ;;; Write Program Memory
     401/     16D :                     ;;;---------------------------------------------------------------------------
     402/     16D :                     COMMAND_WP:
     403/     16D : 20 46               	FIM P0, lo(STR_ADD)	; print " ADD="
     404/     16F : 57 00               	JMS PRINT_P0
     405/     171 : 56 00               	JMS GETCHAR_P1
     406/     173 : 56 28               	JMS PUTCHAR_P1
     407/     175 : 56 6A               	JMS CTOI_P1_R5
     408/     177 : 56 53               	JMS PRINT_CRLF
     409/     179 :                     
     410/     179 : 22 46               	FIM P1,'F'
     411/     17B : 56 28               	JMS PUTCHAR_P1
     412/     17D : A5                  	LD R5
     413/     17E : 56 48               	JMS PRINT_ACC
     414/     180 : 22 30               	FIM P1,'0'
     415/     182 : 56 28               	JMS PUTCHAR_P1
     416/     184 : 22 3A               	FIM P1,':'
     417/     186 : 56 28               	JMS PUTCHAR_P1
     418/     188 :                     	
     419/     188 : A5                  	LD R5
     420/     189 : B0                  	XCH R0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 8 - 2023/02/17 11:38:13


     421/     18A :                     
     422/     18A : D0                  	LDM 0
     423/     18B : B1                  	XCH R1
     424/     18C :                     CMDWP_L1:
     425/     18C : 22 20               	FIM P1, ' '
     426/     18E : 56 28               	JMS PUTCHAR_P1
     427/     190 :                     
     428/     190 : 56 00               	JMS GETCHAR_P1
     429/     192 : 56 28               	JMS PUTCHAR_P1
     430/     194 : 56 6A               	JMS CTOI_P1_R5
     431/     196 : A5                  	LD R5
     432/     197 : B4                  	XCH R4
     433/     198 :                     
     434/     198 : 56 00               	JMS GETCHAR_P1
     435/     19A : 56 28               	JMS PUTCHAR_P1
     436/     19C : 56 6A               	JMS CTOI_P1_R5
     437/     19E : A5                  	LD R5
     438/     19F : B3                  	XCH R3
     439/     1A0 :                     
     440/     1A0 : A4                  	LD R4
     441/     1A1 : B2                  	XCH R2
     442/     1A2 :                     
     443/     1A2 : 50 A0               	JMS PM_WRITE_P0_P1
     444/     1A4 : 71 8C               	ISZ R1, CMDWP_L1
     445/     1A6 :                     
     446/     1A6 : 56 53               	JMS PRINT_CRLF
     447/     1A8 :                     
     448/     1A8 : 40 10               	JUN CMD_LOOP		; return to command loop
     449/     1AA :                     
     450/     1AA :                     ;;;---------------------------------------------------------------------------
     451/     1AA :                     ;;; COMMAND_DP
     452/     1AA :                     ;;; Dump Program Memory
     453/     1AA :                     ;;;---------------------------------------------------------------------------
     454/     1AA :                     COMMAND_DP:
     455/     1AA : 56 53               	JMS PRINT_CRLF
     456/     1AC :                     
     457/     1AC : 50 A6               	JMS PM_WRITE_READROUTINE
     458/     1AE :                     
     459/     1AE : 20 00               	FIM P0, 00H
     460/     1B0 :                     CMDDP_L0:
     461/     1B0 : 22 46               	FIM P1,'F'
     462/     1B2 : 56 28               	JMS PUTCHAR_P1
     463/     1B4 : A0                  	LD R0
     464/     1B5 : 56 48               	JMS PRINT_ACC
     465/     1B7 : 22 30               	FIM P1,'0'
     466/     1B9 : 56 28               	JMS PUTCHAR_P1
     467/     1BB : 22 3A               	FIM P1,':'
     468/     1BD : 56 28               	JMS PUTCHAR_P1
     469/     1BF :                     CMDDP_L1:	
     470/     1BF : 22 20               	FIM P1, ' '
     471/     1C1 : 56 28               	JMS PUTCHAR_P1
     472/     1C3 :                     
     473/     1C3 : 5F FE               	JMS PM_READ_P0_P2	; Read program memory
     474/     1C5 : A4                  	LD R4
     475/     1C6 : 56 48               	JMS PRINT_ACC
     476/     1C8 : A5                  	LD R5
     477/     1C9 : 56 48               	JMS PRINT_ACC
     478/     1CB :                     
     479/     1CB : 71 BF               	ISZ R1, CMDDP_L1
     480/     1CD : 56 53               	JMS PRINT_CRLF
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 9 - 2023/02/17 11:38:13


     481/     1CF : 70 B0                       ISZ R0, CMDDP_L0
     482/     1D1 :                     	
     483/     1D1 : 40 10               	JUN CMD_LOOP		; return to command loop
     484/     1D3 :                     
     485/     1D3 :                     ;;;---------------------------------------------------------------------------
     486/     1D3 :                     ;;; COMMAND_CL
     487/     1D3 :                     ;;; Clear Program Memory
     488/     1D3 :                     ;;;---------------------------------------------------------------------------
     489/     1D3 :                     COMMAND_CL:
     490/     1D3 : 56 53               	JMS PRINT_CRLF
     491/     1D5 :                     
     492/     1D5 : 20 00               	FIM P0, 00H
     493/     1D7 : 22 00               	FIM P1, 00H
     494/     1D9 :                     CMDCL_L1:
     495/     1D9 : 50 A0               	JMS PM_WRITE_P0_P1
     496/     1DB : 71 D9               	ISZ R1, CMDCL_L1
     497/     1DD : 70 D9               	ISZ R0, CMDCL_L1
     498/     1DF :                     	
     499/     1DF : 40 10               	JUN CMD_LOOP		; return to command loop
     500/     1E1 :                     
     501/     1E1 :                     ;;;---------------------------------------------------------------------------
     502/     1E1 :                     ;;; COMMAND_G
     503/     1E1 :                     ;;; Go to Top of Program memory PM_TOP(0x0F00)
     504/     1E1 :                     ;;;---------------------------------------------------------------------------
     505/     1E1 :                     COMMAND_G:
     506/     1E1 : 56 53               	JMS PRINT_CRLF
     507/     1E3 : 5F 00               	JMS PM_TOP
     508/     1E5 : 40 10               	JUN CMD_LOOP		; return to command loop
     509/     1E7 :                     
     510/     1E7 :                     ;;;---------------------------------------------------------------------------
     511/     1E7 :                     ;;; Program for the Calculator Mode
     512/     1E7 :                     ;;;---------------------------------------------------------------------------
     513/     200 :                     	org 0200H
     514/     200 :                     ;;;---------------------------------------------------------------------------
     515/     200 :                     ;;; Memory Resisters used in the calculator mode
     516/     200 :                     ;;;---------------------------------------------------------------------------
     517/     200 :                     ;;; Bank0, Chip 0
     518/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_X
     519/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_Y
     520/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_Z (not implemented yet)
     521/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_T (not implemented yet)
     522/     200 :                     ;;;---------------------------------------------------------------------------
     523/     200 :                     ;;; Bank0, Chip 1
     524/     200 :                     ;;; Reg 0(D0-F, S0-3): REG_M (working for multiplication/division)
     525/     200 :                     ;;; Reg 1(D0-F, S0-3): REG_A (working for square root) (not implemented yet)
     526/     200 :                     ;;; Reg 2(D0-F, S0-3): REG_XI (working for square root) (not implemented yet)
     527/     200 :                     ;;; Reg 3(D0-F, S0-3): REG_H (working for square root) (not implemented yet)
     528/     200 :                     ;;;---------------------------------------------------------------------------
     529/     200 :                     ;;; Bank1, Chip 0
     530/     200 :                     ;;;---------------------------------------------------------------------------
     531/     200 :                     ;;; Bank1, Chip 1
     532/     200 :                     ;;;---------------------------------------------------------------------------
     533/     200 :                     ;;;---------------------------------------------------------------------------
     534/     200 :                     ;;; CHIP#(=D7.D6), REG#(=D5.D4) of number registers 
     535/     200 :                     ;;;---------------------------------------------------------------------------
     536/     200 : =0H                  REG_X  	equ (CHIP_RAM0+(0<<4))	; CHIP#.00.0000
     537/     200 : =10H                 REG_Y	equ (CHIP_RAM0+(1<<4))	; CHIP#.01.0000
     538/     200 : =20H                 REG_Z  	equ (CHIP_RAM0+(2<<4))	; CHIP#.10.0000
     539/     200 : =30H                 REG_T	equ (CHIP_RAM0+(3<<4))	; CHIP#.11.0000
     540/     200 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 10 - 2023/02/17 11:38:13


     541/     200 : =40H                 REG_M	equ (CHIP_RAM1+(0<<4))	; CHIP#.00.0000
     542/     200 : =50H                 REG_A	equ (CHIP_RAM1+(1<<4))	; CHIP#.01.0000
     543/     200 : =60H                 REG_XI	equ (CHIP_RAM1+(2<<4))	; CHIP#.10.0000
     544/     200 : =70H                 REG_H	equ (CHIP_RAM1+(3<<4))	; CHIP#.11.0000
     545/     200 :                     
     546/     200 :                     ;;;---------------------------------------------------------------------------
     547/     200 :                     ;;; Number expression (simple floating point)
     548/     200 :                     ;;;       1 11111
     549/     200 :                     ;;; char# 5 432109876543210
     550/     200 :                     ;;;  (+/-)D.DDDDDDDDDDDDDDD*(10^E)
     551/     200 :                     ;;; D0-15: Fraction (D15=most significant digit, D0=least significant digit)
     552/     200 :                     ;;; D15 denotes an integer part, but it shuld be zero except
     553/     200 :                     ;;; while calculating addition or multiplication.
     554/     200 :                     ;;; It is used for avoiding overflow.
     555/     200 :                     ;;; The number is normalized so that D15 is zero and minimize exponent
     556/     200 :                     ;;; S0: Exponent (0 to 14)
     557/     200 :                     ;;; S1: Sign of the fraction (0=positive, 15=negative)
     558/     200 :                     ;;; S2: Error (0:no_error, 1:overflow, 2:divide_by_zero)
     559/     200 :                     ;;;---------------------------------------------------------------------------
     560/     200 :                     
     561/     200 :                     ; Error flags
     562/     200 : =1H                  REG_ERROR_OVERFLOW  equ 1
     563/     200 : =2H                  REG_ERROR_DIVBYZERO equ 2
     564/     200 :                     	
     565/     200 :                     ;;;---------------------------------------------------------------------------
     566/     200 :                     ;;;COMMAND_C
     567/     200 :                     ;;; 	Calculator
     568/     200 :                     ;;; P0(R0, R1): working for PRINT
     569/     200 :                     ;;; P1(R2, R3): working for PRINT, GETCHAR, PUTCHAR
     570/     200 :                     ;;; P2(R4, R5): working for CTOI
     571/     200 :                     ;;; P3(R6, R7):   
     572/     200 :                     ;;; 		  R6.bit0 = automatic ENTER flag (0:desable , 1:enable)
     573/     200 :                     ;;;               R6.bit1 = input full flag (0:not full, 1:full)
     574/     200 :                     ;;; 	          R6.bit3 = digit point flag(0:no dp, 1:dp set)
     575/     200 :                     ;;; 	          R7=digit counter for key input
     576/     200 :                     ;;; 		  REG_X is automatically cleared if R7 is 0 (first digit input)
     577/     200 :                     ;;; P4(R8,  R9):  register address and character index(mainly REG_X)
     578/     200 :                     ;;; P5(R10, R11): register address and character index(mainly REG_Y)
     579/     200 :                     ;;; P6(R12, R13): working for register operation
     580/     200 :                     ;;; P7(R14, R15): working for register operation
     581/     200 :                     ;;;---------------------------------------------------------------------------
     582/     200 :                     COMMAND_C:
     583/     200 : 20 51               	FIM P0, lo(STR_CALC)
     584/     202 : 57 00               	JMS PRINT_P0
     585/     204 :                     
     586/     204 : 52 F5               	JMS CMDC_CLEAR		; clear registers
     587/     206 :                     
     588/     206 :                     CMDC_START:
     589/     206 : A6                  	LD R6
     590/     207 : F6                  	RAR
     591/     208 : D0                  	LDM 0
     592/     209 : F5                  	RAL
     593/     20A : B6                  	XCH R6			; reset flags except for automatic ENTER flag
     594/     20B : F0                  	CLB
     595/     20C : B7                  	XCH R7			; set digit counter = 0
     596/     20D : 20 00               	FIM P0, REG_X
     597/     20F : 55 94               	JMS PRINT_REGISTER_P0	; print REG_X
     598/     211 :                     	
     599/     211 :                     CMDC_LOOP:		; loop for input digits to REG_X
     600/     211 : 56 00               	JMS GETCHAR_P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 11 - 2023/02/17 11:38:13


     601/     213 : 56 87                       JMS DISPLED_ACC
     602/     215 : 56 76                       JMS DISPLED_P1
     603/     217 : 20 0D               	FIM P0, '\r'
     604/     219 : 50 8E               	JMS CMP_P0P1
     605/     21B : 14 11               	JCN Z, CMDC_LOOP	; skip CR
     606/     21D :                     
     607/     21D : 20 0A               	FIM P0, '\n'		; 'ENTER' key
     608/     21F : 50 8E               	JMS CMP_P0P1
     609/     221 : 1C 29               	JCN ZN, CMDC_L1
     610/     223 : 56 53               	JMS PRINT_CRLF
     611/     225 : 53 07               	JMS CMDC_ENTER
     612/     227 : 42 06               	JUN CMDC_START
     613/     229 :                     CMDC_L1:
     614/     229 : 20 71               	FIM P0, 'q'		; quit
     615/     22B : 50 8E               	JMS CMP_P0P1
     616/     22D : 1C 33               	JCN ZN, CMDC_L2
     617/     22F : 56 53               	JMS PRINT_CRLF
     618/     231 : 40 10               	JUN CMD_LOOP		; return to command loop
     619/     233 :                     CMDC_L2:	
     620/     233 : 20 2B               	FIM P0, '+'		; '+' key
     621/     235 : 50 8E               	JMS CMP_P0P1
     622/     237 : 1C 43               	JCN ZN, CMDC_L3
     623/     239 : 56 28               	JMS PUTCHAR_P1
     624/     23B : 56 53               	JMS PRINT_CRLF
     625/     23D : 53 3C               	JMS CMDC_ADD
     626/     23F : 52 D0               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     627/     241 : 42 06               	JUN CMDC_START
     628/     243 :                     CMDC_L3:
     629/     243 : 20 2D               	FIM P0, '-'		; '-' key
     630/     245 : 50 8E               	JMS CMP_P0P1
     631/     247 : 1C 53               	JCN ZN, CMDC_L4
     632/     249 : 56 28               	JMS PUTCHAR_P1
     633/     24B : 56 53               	JMS PRINT_CRLF
     634/     24D : 54 6F               	JMS CMDC_SUB
     635/     24F : 52 D0               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     636/     251 : 42 06               	JUN CMDC_START
     637/     253 :                     CMDC_L4:
     638/     253 : 20 2A               	FIM P0, '*'		; '*' key
     639/     255 : 50 8E               	JMS CMP_P0P1
     640/     257 : 1C 63               	JCN ZN, CMDC_L5
     641/     259 : 56 28               	JMS PUTCHAR_P1
     642/     25B : 56 53               	JMS PRINT_CRLF
     643/     25D : 54 00               	JMS CMDC_MUL
     644/     25F : 52 D0               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     645/     261 : 42 06               	JUN CMDC_START
     646/     263 :                     CMDC_L5:
     647/     263 : 20 2F               	FIM P0, '/'		; '/' key
     648/     265 : 50 8E               	JMS CMP_P0P1
     649/     267 : 1C 73               	JCN ZN, CMDC_L6
     650/     269 : 56 28               	JMS PUTCHAR_P1
     651/     26B : 56 53               	JMS PRINT_CRLF
     652/     26D : 54 FF               	JMS CMDC_DIV
     653/     26F : 52 D0               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     654/     271 : 42 06               	JUN CMDC_START
     655/     273 :                     CMDC_L6:
     656/     273 : 20 63               	FIM P0, 'c'		; clear
     657/     275 : 50 8E               	JMS CMP_P0P1
     658/     277 : 1C 7F               	JCN ZN, CMDC_L7
     659/     279 : 56 53               	JMS PRINT_CRLF
     660/     27B : 52 F5               	JMS CMDC_CLEAR
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 12 - 2023/02/17 11:38:13


     661/     27D : 42 06               	JUN CMDC_START
     662/     27F :                     CMDC_L7:
     663/     27F : 20 73               	FIM P0, 's'		; sign change
     664/     281 : 50 8E               	JMS CMP_P0P1
     665/     283 : 1C 8D               	JCN ZN, CMDC_L8
     666/     285 :                     
     667/     285 : 54 F8               	JMS CHANGE_SIGN_REG_X
     668/     287 : 56 53               	JMS PRINT_CRLF
     669/     289 : 52 D0               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     670/     28B : 42 06               	JUN CMDC_START
     671/     28D :                     CMDC_L8:
     672/     28D : 20 70               	FIM P0, 'p'		; print registers
     673/     28F : 50 8E               	JMS CMP_P0P1
     674/     291 : 1C 99               	JCN ZN, CMDC_L81
     675/     293 : 56 53               	JMS PRINT_CRLF
     676/     295 : 54 5E               	JMS CMDC_PRINT
     677/     297 : 42 06               	JUN CMDC_START
     678/     299 :                     CMDC_L81:
     679/     299 : 20 72               	FIM P0, 'r'		; square root
     680/     29B : 50 8E               	JMS CMP_P0P1
     681/     29D : 1C A7               	JCN ZN, CMDC_L9
     682/     29F : 56 53               	JMS PRINT_CRLF
     683/     2A1 : 54 54               	JMS CMDC_SQUAREROOT
     684/     2A3 : 52 D0               	JMS CMDC_SET_AUTOMATIC_ENTER_FLAG
     685/     2A5 : 42 06               	JUN CMDC_START
     686/     2A7 :                     CMDC_L9:
     687/     2A7 : A6                  	LD R6			; check number full flag (R6.bit1)
     688/     2A8 : F6                  	RAR			; no more '0-9' or '.' input
     689/     2A9 : F6                  	RAR
     690/     2AA : 12 C0               	JCN C, CMDC_L11
     691/     2AC :                     
     692/     2AC : 20 2E               	FIM P0, '.'		; '.' digit point
     693/     2AE : 50 8E               	JMS CMP_P0P1
     694/     2B0 : 1C B8               	JCN ZN, CMDC_L10
     695/     2B2 : 52 DC               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     696/     2B4 : 52 EB               	JMS CMDC_DIGITPOINT
     697/     2B6 : 42 11               	JUN CMDC_LOOP
     698/     2B8 :                     	
     699/     2B8 :                     CMDC_L10:
     700/     2B8 : 52 C2               	JMS ISNUM_P1
     701/     2BA : 14 C0               	JCN Z, CMDC_L11          ; skip if not a number
     702/     2BC : 52 DC               	JMS CMDC_AUTOMATIC_PUSH_AND_CLEAR
     703/     2BE : 53 1B               	JMS CMDC_NUM
     704/     2C0 :                     CMDC_L11:
     705/     2C0 : 42 11               	JUN CMDC_LOOP
     706/     2C2 :                     
     707/     2C2 :                     ;;;---------------------------------------------------------------------------
     708/     2C2 :                     ;;; ISNUM_P1
     709/     2C2 :                     ;;; check P1 '0' to '9' as a ascii character
     710/     2C2 :                     ;;; return: ACC=0 if P1 is not a number
     711/     2C2 :                     ;;;         ACC=1 if P1 is a number
     712/     2C2 :                     ;;; destroy: P0
     713/     2C2 :                     ;;;---------------------------------------------------------------------------
     714/     2C2 :                     ISNUM_P1:
     715/     2C2 : 20 2F               	FIM P0, '0'-1
     716/     2C4 : 50 8E               	JMS CMP_P0P1
     717/     2C6 : 12 CF               	JCN C, ISNUM_FALSE	; '0'-1 >= P1
     718/     2C8 : 20 39               	FIM P0, '9'
     719/     2CA : 50 8E               	JMS CMP_P0P1
     720/     2CC : 1A CF               	JCN CN, ISNUM_FALSE	; '9' < P1
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 13 - 2023/02/17 11:38:13


     721/     2CE : C1                  	BBL 1			; P1 is a number
     722/     2CF :                     ISNUM_FALSE:
     723/     2CF : C0                  	BBL 0			; P1 is not a number
     724/     2D0 :                     	
     725/     2D0 :                     ;;;---------------------------------------------------------------------------
     726/     2D0 :                     ;;; CMDC_SET_AUTOMATIC_ENTER_FLAG
     727/     2D0 :                     ;;;  set automatic ENTER flag
     728/     2D0 :                     ;;;---------------------------------------------------------------------------
     729/     2D0 :                     CMDC_SET_AUTOMATIC_ENTER_FLAG:	
     730/     2D0 : A6                  	LD R6
     731/     2D1 : F6                  	RAR
     732/     2D2 : FA                  	STC
     733/     2D3 : F5                  	RAL
     734/     2D4 : B6                  	XCH R6
     735/     2D5 : C0                  	BBL 0
     736/     2D6 :                     
     737/     2D6 :                     ;;;---------------------------------------------------------------------------
     738/     2D6 :                     ;;; CMDC_CLEAR_AUTOMATIC_ENTER_FLAG
     739/     2D6 :                     ;;; clear automatic ENTER flag
     740/     2D6 :                     ;;;---------------------------------------------------------------------------
     741/     2D6 :                     CMDC_CLEAR_AUTOMATIC_ENTER_FLAG:
     742/     2D6 : A6                  	LD R6
     743/     2D7 : F6                  	RAR
     744/     2D8 : F1                  	CLC
     745/     2D9 : F5                  	RAL
     746/     2DA : B6                  	XCH R6
     747/     2DB : C0                  	BBL 0
     748/     2DC :                     
     749/     2DC :                     ;;;---------------------------------------------------------------------------
     750/     2DC :                     ;;; CMDC_AUTOMATIC_PUSH_AND_CLEAR
     751/     2DC :                     ;;;   push REG_X and clear for the first '0-9' or '.' after operation
     752/     2DC :                     ;;;---------------------------------------------------------------------------
     753/     2DC :                     CMDC_AUTOMATIC_PUSH_AND_CLEAR:
     754/     2DC : A6                  	LD R6                   ; check automatic ENTER flag (R6.bit0)
     755/     2DD : F6                  	RAR
     756/     2DE : 1A E2               	JCN CN, CMDC_PUSH_L0
     757/     2E0 : 53 07               	JMS CMDC_ENTER		; push ENTER key
     758/     2E2 :                     
     759/     2E2 :                     CMDC_PUSH_L0:
     760/     2E2 : A7                  	LD R7                   ; check digit count
     761/     2E3 : 1C EA               	JCN ZN,CMDC_PUSH_EXIT	; if R7 = 0 then R7++ and clear REG_X
     762/     2E5 : 67                  	INC R7
     763/     2E6 : 20 00               	FIM P0, REG_X
     764/     2E8 : 54 CA               	JMS CLEAR_REGISTER_P0	; clear X for the first keyin
     765/     2EA :                     CMDC_PUSH_EXIT
     766/     2EA : C0                  	BBL 0
     767/     2EB :                     
     768/     2EB :                     ;;;---------------------------------------------------------------------------
     769/     2EB :                     ;;; CMDC_DIGITPOINT
     770/     2EB :                     ;;; set a digit point
     771/     2EB :                     ;;;---------------------------------------------------------------------------
     772/     2EB :                     CMDC_DIGITPOINT:
     773/     2EB : A6                  	LD R6
     774/     2EC : F5                  	RAL
     775/     2ED : 12 F4               	JCN C, CMDC_DP_EXIT	; skip if digit point flag (R6.bit3)
     776/     2EF :                     				; is already set
     777/     2EF : FA                  	STC			; else set digit point flag R6.bit3
     778/     2F0 : F6                  	RAR
     779/     2F1 : B6                  	XCH R6                  
     780/     2F2 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 14 - 2023/02/17 11:38:13


     781/     2F2 : 56 28               	JMS PUTCHAR_P1		; put '.'
     782/     2F4 :                     CMDC_DP_EXIT:	
     783/     2F4 : C0                  	BBL 0
     784/     2F5 :                     ;;;---------------------------------------------------------------------------
     785/     2F5 :                     ;;; CMDC_CLEAR
     786/     2F5 :                     ;;; clear all registers
     787/     2F5 :                     ;;;---------------------------------------------------------------------------
     788/     2F5 :                     CMDC_CLEAR:
     789/     2F5 : 20 00               	FIM P0, REG_X
     790/     2F7 : 54 CA               	JMS CLEAR_REGISTER_P0
     791/     2F9 : 20 10               	FIM P0, REG_Y
     792/     2FB : 54 CA               	JMS CLEAR_REGISTER_P0
     793/     2FD : 20 20               	FIM P0, REG_Z
     794/     2FF : 54 CA               	JMS CLEAR_REGISTER_P0
     795/     301 : 20 30               	FIM P0, REG_T
     796/     303 : 54 CA               	JMS CLEAR_REGISTER_P0
     797/     305 :                     
     798/     305 : 42 D6               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     799/     307 :                     	
     800/     307 :                     ;;;---------------------------------------------------------------------------
     801/     307 :                     ;;; CMDC_ENTER
     802/     307 :                     ;;; Push register stack
     803/     307 :                     ;;; 	X=>Y=>Z=>T
     804/     307 :                     ;;;---------------------------------------------------------------------------
     805/     307 :                     CMDC_ENTER:
     806/     307 : 2C 30               	FIM P6, REG_T
     807/     309 : 2E 20               	FIM P7, REG_Z
     808/     30B : 54 D6               	JMS LD_REGISTER_P6_P7	; T<=Z
     809/     30D : 2C 20               	FIM P6, REG_Z
     810/     30F : 2E 10               	FIM P7, REG_Y
     811/     311 : 54 D6               	JMS LD_REGISTER_P6_P7	; Z<=Y
     812/     313 : 2C 10               	FIM P6, REG_Y
     813/     315 : 2E 00               	FIM P7, REG_X
     814/     317 : 54 D6               	JMS LD_REGISTER_P6_P7	; Y<=X
     815/     319 :                     
     816/     319 : 42 D6               	JUN CMDC_CLEAR_AUTOMATIC_ENTER_FLAG ; clear flag and return
     817/     31B :                     	
     818/     31B :                     ;;;---------------------------------------------------------------------------
     819/     31B :                     ;;; CMDC_NUM
     820/     31B :                     ;;; enter a number to X
     821/     31B :                     ;;; input: P1=('0', ...'9') ASCII character
     822/     31B :                     ;;;        R7=digit count
     823/     31B :                     ;;;---------------------------------------------------------------------------
     824/     31B :                     CMDC_NUM:
     825/     31B : 56 6A               	JMS CTOI_P1_R5
     826/     31D :                     	;; 	LD R6			; check digit point flag (R6.bit3)
     827/     31D :                     	;; 	RAL
     828/     31D :                     	;; 	JCN C,CMDC_NUM_L1	; digit point flag is ture
     829/     31D :                     	;; 	LD R5			; when digit point frag is false,
     830/     31D :                     	;; 	JCN NZ, CMDC_NUM_L1	; ignore key in '0' if digit counter is 1
     831/     31D :                     	;; 	LD R7		
     832/     31D :                     	;; 	DAC
     833/     31D :                     	;; 	JCN Z, CMDC_NUM_EXIT
     834/     31D :                     	;; CMDC_NUM_L1:
     835/     31D :                     	;; operation is for R7-th digit of X
     836/     31D : 2E 00               	FIM P7, REG_X
     837/     31F : DF                  	LDM 15
     838/     320 : F1                  	CLC
     839/     321 : 97                  	SUB R7			
     840/     322 : BF                  	XCH R15                 ; P7=(REG_X).(#char=15-R7)
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 15 - 2023/02/17 11:38:13


     841/     323 : 2F                  	SRC P7
     842/     324 :                     
     843/     324 : A6                  	LD R6
     844/     325 : F5                  	RAL			; check R6.bit3 (dp flag)
     845/     326 : 12 2A               	JCN C, CMDC_SETNUM	; if dp flag is true, exponent is not updated
     846/     328 :                     	;; set exponent of X
     847/     328 : A7                  	LD R7
     848/     329 : E4                  	WR0
     849/     32A :                     CMDC_SETNUM:
     850/     32A : A5                  	LD R5
     851/     32B : E0                  	WRM
     852/     32C : 67                  	INC R7
     853/     32D : DF                  	LDM 15			; maximum number of digits is 14,
     854/     32E : F1                  	CLC			; so set digit full flag when R7 becomes 15
     855/     32F : 97                  	SUB R7
     856/     330 : 1C 39               	JCN ZN, CMDC_NUM_EXIT
     857/     332 :                     	;; set digit full flag R6.bit1
     858/     332 : A6                  	LD R6
     859/     333 : F6                  	RAR
     860/     334 : F6                  	RAR
     861/     335 : FA                  	STC
     862/     336 : F5                  	RAL
     863/     337 : F5                  	RAL
     864/     338 : B6                  	XCH R6
     865/     339 :                     CMDC_NUM_EXIT:
     866/     339 : 56 28               	JMS PUTCHAR_P1		; echo input
     867/     33B : C0                  	BBL 0
     868/     33C :                     
     869/     33C :                     ;;;---------------------------------------------------------------------------
     870/     33C :                     ;;; CMDC_ADD
     871/     33C :                     ;;; X = X + Y
     872/     33C :                     ;;;---------------------------------------------------------------------------
     873/     33C :                     CMDC_ADD:
     874/     33C : 54 A8               	JMS ALIGN_REGISTER_XY
     875/     33E :                     
     876/     33E : 2C 00               	FIM P6, REG_X
     877/     340 : 2E 10               	FIM P7, REG_Y
     878/     342 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
     879/     343 : ED                  	RD1
     880/     344 : B0                  	XCH R0			; R0 = sign of X
     881/     345 : 2F                  	SRC P7
     882/     346 : ED                  	RD1
     883/     347 : F1                  	CLC
     884/     348 : 90                  	SUB R0
     885/     349 : 14 6B                	JCN Z, CMDC_ADD_SAMESIGN
     886/     34B :                     
     887/     34B : 53 AB               	JMS CMP_FRACTION_P6_P7
     888/     34D : 14 73               	JCN Z, CMDC_ADD_ZERO_EXIT
     889/     34F : 12 63               	JCN C, CMD_SUB_X_Y	; P6 > P7
     890/     351 :                     CMD_SUB_Y_X:
     891/     351 : 2C 40               	FIM P6, REG_M		; swap X and Y
     892/     353 : 2E 00               	FIM P7, REG_X
     893/     355 : 54 D6               	JMS LD_REGISTER_P6_P7	; M<=X
     894/     357 : 2C 00               	FIM P6, REG_X
     895/     359 : 2E 10               	FIM P7, REG_Y
     896/     35B : 54 D6               	JMS LD_REGISTER_P6_P7	; X<=Y
     897/     35D : 2C 10               	FIM P6, REG_Y
     898/     35F : 2E 40               	FIM P7, REG_M
     899/     361 : 54 D6               	JMS LD_REGISTER_P6_P7	; Y<=M
     900/     363 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 16 - 2023/02/17 11:38:13


     901/     363 :                     CMD_SUB_X_Y:	
     902/     363 : 2C 00               	FIM P6, REG_X
     903/     365 : 2E 10               	FIM P7, REG_Y
     904/     367 : 53 99               	JMS SUB_FRACTION_P6_P7
     905/     369 :                     
     906/     369 : 43 71               	JUN CMDC_ADD_EXIT
     907/     36B :                     
     908/     36B :                     CMDC_ADD_SAMESIGN:
     909/     36B : 2C 00               	FIM P6, REG_X
     910/     36D : 2E 10               	FIM P7, REG_Y
     911/     36F : 53 8A               	JMS ADD_FRACTION_P6_P7
     912/     371 :                     	
     913/     371 :                     CMDC_ADD_EXIT:
     914/     371 : 43 79               	JUN CMDC_NORMALIZE_AND_EXIT
     915/     373 :                     
     916/     373 :                     CMDC_ADD_ZERO_EXIT:
     917/     373 : 20 00               	FIM P0, REG_X
     918/     375 : 54 CA               	JMS CLEAR_REGISTER_P0
     919/     377 : 43 71               	JUN CMDC_ADD_EXIT
     920/     379 :                     
     921/     379 :                     ;;;---------------------------------------------------------------------------
     922/     379 :                     ;;; CMDC_NORMALIZE_AND_EXIT
     923/     379 :                     ;;; Common routine for finish calculation
     924/     379 :                     ;;; Normalize REG_X
     925/     379 :                     ;;; Pop registers
     926/     379 :                     ;;; REG_Y<= REG_Z<=REG_T
     927/     379 :                     ;;;---------------------------------------------------------------------------
     928/     379 :                     CMDC_NORMALIZE_AND_EXIT:
     929/     379 : 20 00                	FIM P0, REG_X
     930/     37B : 53 C5                	JMS NORMALIZE_REGISTER_P0
     931/     37D :                     
     932/     37D : 2C 10               	FIM P6, REG_Y
     933/     37F : 2E 20               	FIM P7, REG_Z
     934/     381 : 54 D6               	JMS LD_REGISTER_P6_P7 	; Y<=Z
     935/     383 :                     
     936/     383 : 2C 20               	FIM P6, REG_Z
     937/     385 : 2E 30               	FIM P7, REG_T
     938/     387 : 54 D6               	JMS LD_REGISTER_P6_P7 	; Z<=T
     939/     389 :                     
     940/     389 : C0                  	BBL 0
     941/     38A :                     	
     942/     38A :                     ;;;---------------------------------------------------------------------------
     943/     38A :                     ;;; ADD_FRACTION_P6_P7
     944/     38A :                     ;;; Add fraction of two registers
     945/     38A :                     ;;; REG(P6) = REG(P6) + REG(P7)
     946/     38A :                     ;;; register should be normalized so that D15 = 0
     947/     38A :                     ;;; in order to avoid overflow
     948/     38A :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
     949/     38A :                     ;;;---------------------------------------------------------------------------
     950/     38A :                     ADD_FRACTION_P6_P7:
     951/     38A : F0                  	CLB
     952/     38B : BD                  	XCH R13
     953/     38C : F0                  	CLB
     954/     38D : BF                  	XCH R15
     955/     38E : F0                  	CLB
     956/     38F :                     ADD_FRA_LOOP:
     957/     38F : 2F                  	SRC P7
     958/     390 : E9                  	RDM
     959/     391 : 2D                  	SRC P6
     960/     392 : EB                  	ADM
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 17 - 2023/02/17 11:38:13


     961/     393 : FB                  	DAA
     962/     394 : E0                  	WRM
     963/     395 : 6D                  	INC R13
     964/     396 : 7F 8F               	ISZ R15, ADD_FRA_LOOP
     965/     398 :                     ADD_FRA_EXIT:	
     966/     398 : C0                  	BBL 0
     967/     399 :                     	
     968/     399 :                     ;;;---------------------------------------------------------------------------
     969/     399 :                     ;;; SUB_FRACTION_P6_P7
     970/     399 :                     ;;; subtract fraction
     971/     399 :                     ;;; REG(P6) = REG(P6) - REG(P7)
     972/     399 :                     ;;; REG(P6) should be equal or larger than REG(P7)
     973/     399 :                     ;;; in order to avoid underflow
     974/     399 :                     ;;; destroy: R13, R15, (R12 and R14 are not affected)
     975/     399 :                     ;;;---------------------------------------------------------------------------
     976/     399 :                     ;;; Reference
     977/     399 :                     ;;; "Intel MCS-4 Assembly Language Programming Manual" Dec.1973,
     978/     399 :                     ;;; 4.8 Decimal Subtraction, pp.4-20--23
     979/     399 :                     ;;;---------------------------------------------------------------------------
     980/     399 :                     SUB_FRACTION_P6_P7:
     981/     399 : F0                  	CLB
     982/     39A : BD                  	XCH R13
     983/     39B : F0                  	CLB
     984/     39C : BF                  	XCH R15
     985/     39D : F0                  	CLB
     986/     39E : FA                  	STC
     987/     39F :                     SUB_FRA_LOOP:
     988/     39F : F9                  	TCS
     989/     3A0 : 2F                  	SRC P7
     990/     3A1 : E8                  	SBM
     991/     3A2 :                     
     992/     3A2 : F1                  	CLC
     993/     3A3 : 2D                  	SRC P6
     994/     3A4 : EB                  	ADM
     995/     3A5 :                     
     996/     3A5 : FB                  	DAA
     997/     3A6 : E0                  	WRM
     998/     3A7 : 6D                  	INC R13
     999/     3A8 : 7F 9F               	ISZ R15, SUB_FRA_LOOP
    1000/     3AA : C0                  	BBL 0
    1001/     3AB :                     
    1002/     3AB :                     ;;;---------------------------------------------------------------------------
    1003/     3AB :                     ;;; CMP_FRACTION_P6_P7
    1004/     3AB :                     ;;; compare fraction of REG(P6) and REG(P7)
    1005/     3AB :                     ;;; output: ACC=1,CY=0 if REG(P6) < REG(P7)
    1006/     3AB :                     ;;;         ACC=0,CY=1 if REG(P6)== REG(P7)
    1007/     3AB :                     ;;;         ACC=1,CY=1 if REG(P6) > REG(P7)
    1008/     3AB :                     ;;; REG(P6) - (P7) (the carry bit is a complement of the borrow)
    1009/     3AB :                     ;;; working: R0, R1
    1010/     3AB :                     ;;; destroy: P0, R13, R15, (R12 and R14 are not affected)
    1011/     3AB :                     ;;;---------------------------------------------------------------------------
    1012/     3AB :                     CMP_FRACTION_P6_P7:	
    1013/     3AB : F0                  	CLB
    1014/     3AC : B0                  	XCH R0			; R0 = 0
    1015/     3AD :                     
    1016/     3AD :                     CMP_FRACTION_LOOP:		; for i(R0)=0 to 15
    1017/     3AD : A0                  	LD R0
    1018/     3AE : F4                  	CMA
    1019/     3AF : BD                  	XCH R13
    1020/     3B0 : 2D                  	SRC P6
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 18 - 2023/02/17 11:38:13


    1021/     3B1 : E9                  	RDM
    1022/     3B2 : B1                  	XCH R1			; R1=REG(P6)[15-i]
    1023/     3B3 :                     
    1024/     3B3 : A0                  	LD R0
    1025/     3B4 : F4                  	CMA
    1026/     3B5 : BF                  	XCH R15
    1027/     3B6 : 2F                  	SRC P7
    1028/     3B7 :                     
    1029/     3B7 : A1                  	LD R1
    1030/     3B8 : F1                  	CLC
    1031/     3B9 : E8                  	SBM			; ACC=REG(P6)[15-i] - REG(P7)[15-i]
    1032/     3BA :                     
    1033/     3BA : 14 C0               	JCN Z, CMP_FRACTION_NEXT
    1034/     3BC : 12 C4               	JCN C, CMP_FRACTION_EXIT11
    1035/     3BE : 43 C3               	JUN CMP_FRACTION_EXIT10
    1036/     3C0 :                     
    1037/     3C0 :                     CMP_FRACTION_NEXT:
    1038/     3C0 : 70 AD               	ISZ R0, CMP_FRACTION_LOOP
    1039/     3C2 : C0                  	BBL 0			; REG(P6) == REG(P7)
    1040/     3C3 :                     
    1041/     3C3 :                     CMP_FRACTION_EXIT10:
    1042/     3C3 : C1                  	BBL 1			; REG(P6) < REG(P7)
    1043/     3C4 :                     
    1044/     3C4 :                     CMP_FRACTION_EXIT11:
    1045/     3C4 : C1                  	BBL 1			; REG(P6) > REG(P7)
    1046/     3C5 :                     
    1047/     3C5 :                     ;;;---------------------------------------------------------------------------
    1048/     3C5 :                     ;;; NORMALIZE_REGISTER_P0
    1049/     3C5 :                     ;;; minimize exponent
    1050/     3C5 :                     ;;; example
    1051/     3C5 :                     ;;; 0.0000001 E 9 ->shift L7->  1.0000000 E 2 -> shift R1 -> 0.10000000 E3
    1052/     3C5 :                     ;;; 0.0000001 E 7 ->shift L7->  1.0000000 E 0 -> shift R1 -> 0.10000000 E1
    1053/     3C5 :                     ;;; 0.0000001 E 5 ->shift L5->  0.0100000 E 0
    1054/     3C5 :                     ;;; 
    1055/     3C5 :                     ;;; working: P0, R2, R3
    1056/     3C5 :                     ;;;---------------------------------------------------------------------------
    1057/     3C5 :                     NORMALIZE_REGISTER_P0:	
    1058/     3C5 : 21                  	SRC P0
    1059/     3C6 : EC                  	RD0			; exponent of REG(P0)
    1060/     3C7 : F4                  	CMA
    1061/     3C8 : B3                  	XCH R3			; R3 = 15 - exponent
    1062/     3C9 :                     	
    1063/     3C9 : F0                  	CLB
    1064/     3CA : B2                  	XCH R2			; R2=0 (counter)
    1065/     3CB : 43 D5               	JUN NM_LOOP_ENTRY
    1066/     3CD :                     NM_LOOP:
    1067/     3CD : A2                  	LD R2
    1068/     3CE : F4                  	CMA
    1069/     3CF : B1                  	XCH R1			; R1=15, 14,.., 0
    1070/     3D0 : 21                  	SRC P0
    1071/     3D1 : E9                  	RDM
    1072/     3D2 : 1C D7               	JCN ZN, NM_GO_SHIFT
    1073/     3D4 : 62                  	INC R2
    1074/     3D5 :                     NM_LOOP_ENTRY:
    1075/     3D5 : 73 CD               	ISZ R3, NM_LOOP
    1076/     3D7 :                     NM_GO_SHIFT:
    1077/     3D7 :                     	;  exponent = exponent - shift count
    1078/     3D7 : EC                  	RD0
    1079/     3D8 : F1                  	CLC
    1080/     3D9 : 92                  	SUB R2
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 19 - 2023/02/17 11:38:13


    1081/     3DA : E4                  	WR0
    1082/     3DB : A2                  	LD R2			; ACC = shift count
    1083/     3DC : 54 89               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1084/     3DE :                     
    1085/     3DE : DF                  	LDM 15			; check most significant digit
    1086/     3DF : B1                  	XCH R1			; and shift to right if it is not zero
    1087/     3E0 : 21                  	SRC P0
    1088/     3E1 : E9                  	RDM
    1089/     3E2 : 14 EC               	JCN Z, NM_EXIT
    1090/     3E4 : EC                  	RD0			; increment exponent
    1091/     3E5 : F2                  	IAC
    1092/     3E6 : E4                  	WR0
    1093/     3E7 : 1A EB               	JCN CN, NM_NOERROR
    1094/     3E9 : D1                  	LDM REG_ERROR_OVERFLOW
    1095/     3EA : E6                  	WR2	;; set overflow flag
    1096/     3EB :                     NM_NOERROR:
    1097/     3EB : D1                  	LDM 1
    1098/     3EC :                     NM_EXIT:
    1099/     3EC : 44 73               	JUN SHIFT_FRACTION_RIGHT_P0_ACC
    1100/     3EE :                     
    1101/     400 :                     	org 0400H
    1102/     400 :                     ;;;---------------------------------------------------------------------------
    1103/     400 :                     ;;; CMDC_MUL
    1104/     400 :                     ;;; X = X * Y
    1105/     400 :                     ;;;---------------------------------------------------------------------------
    1106/     400 :                     	
    1107/     400 :                     CMDC_MUL:
    1108/     400 : 20 00               	FIM P0, REG_X
    1109/     402 : 54 EE               	JMS ISZERO_REGISTER_P0
    1110/     404 : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1111/     406 :                     
    1112/     406 : 20 10               	FIM P0, REG_Y
    1113/     408 : 54 EE               	JMS ISZERO_REGISTER_P0
    1114/     40A : 1C 24               	JCN ZN, CMDC_MUL_ZERO
    1115/     40C :                     	
    1116/     40C : 2C 00               	FIM P6, REG_X
    1117/     40E : 2E 10               	FIM P7, REG_Y
    1118/     410 :                     
    1119/     410 : 55 82               	JMS GET_SIGN_PRODUCT_P6_P7
    1120/     412 : 2D                  	SRC P6
    1121/     413 : E5                  	WR1
    1122/     414 :                     	
    1123/     414 :                     	;;  calculate exponent of the result
    1124/     414 : EC                  	RD0
    1125/     415 : B0                  	XCH R0
    1126/     416 : 2F                  	SRC P7
    1127/     417 : EC                  	RD0
    1128/     418 : F1                  	CLC
    1129/     419 : 80                  	ADD R0
    1130/     41A : 2D                  	SRC P6
    1131/     41B : E4                  	WR0			; set exp X (tentative)
    1132/     41C :                     				; it may be adjusted by the normalization
    1133/     41C : 1A 20               	JCN CN, CMDC_MUL_L0	; check overflow
    1134/     41E : D1                  	LDM REG_ERROR_OVERFLOW
    1135/     41F : E6                  	WR2			; set overflow flag
    1136/     420 :                     CMDC_MUL_L0:
    1137/     420 :                     	;; 	LDM 0
    1138/     420 :                     	;; 	SRC P7
    1139/     420 :                     	;; 	WR0			; exp Y = 0 (can be omitted)
    1140/     420 :                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 20 - 2023/02/17 11:38:13


    1141/     420 :                     	; multiply fraction X = X * Y
    1142/     420 : 54 2A               	JMS MUL_FRACTION_XY
    1143/     422 :                     
    1144/     422 :                     CMDC_MUL_EXIT:
    1145/     422 : 43 79               	JUN CMDC_NORMALIZE_AND_EXIT
    1146/     424 :                     CMDC_MUL_ZERO:
    1147/     424 : 20 00               	FIM P0, REG_X
    1148/     426 : 54 CA               	JMS CLEAR_REGISTER_P0
    1149/     428 : 44 22               	JUN CMDC_MUL_EXIT
    1150/     42A :                     
    1151/     42A :                     ;;;---------------------------------------------------------------------------
    1152/     42A :                     ;;; MUL_FRACTION_XY
    1153/     42A :                     ;;; multiply fraction of REG_X and REG_Y
    1154/     42A :                     ;;; REG_X = REG_X* REG_Y
    1155/     42A :                     ;;; working: P6, P7, P5, P0(for shift), P1(for shift), P4(R8, R9)
    1156/     42A :                     ;;;---------------------------------------------------------------------------
    1157/     42A :                     ;;; D15=0 (number is normalized)
    1158/     42A :                     ;;; sum up folloings and store to FRA_X
    1159/     42A :                     ;;; FRA_Y
    1160/     42A :                     ;;; 0EDCBA9876543210 * 0 FRA_M(=FRA_X)
    1161/     42A :                     ;;;  0EDCBA987654321 * E
    1162/     42A :                     ;;;   0EDCBA98765432 * D
    1163/     42A :                     ;;;    0EDCBA9876543 * C
    1164/     42A :                     ;;;     0EDCBA987654 * B
    1165/     42A :                     ;;;      0EDCBA98765 * A
    1166/     42A :                     ;;;       0EDCBA9876 * 9
    1167/     42A :                     ;;;        0EDCBA987 * 8
    1168/     42A :                     ;;;         0EDCBA98 * 7
    1169/     42A :                     ;;;          0EDCBA9 * 6
    1170/     42A :                     ;;;           0EDCBA * 5
    1171/     42A :                     ;;;            0EDCB * 4
    1172/     42A :                     ;;;             0EDC * 3
    1173/     42A :                     ;;;              0ED * 2
    1174/     42A :                     ;;;               0E * 1
    1175/     42A :                     ;;;                0 * 0
    1176/     42A :                     ;;;---------------------------------------------------------------------------
    1177/     42A :                     MUL_FRACTION_XY:
    1178/     42A : 2C 40               	FIM P6, REG_M
    1179/     42C : 2E 00               	FIM P7, REG_X
    1180/     42E : 54 E6               	JMS LD_FRACTION_P6_P7	; FRA_M <= FRA_X
    1181/     430 :                     
    1182/     430 : 20 00               	FIM P0, REG_X
    1183/     432 : 54 D0               	JMS CLEAR_FRACTION_P0	; FRA_X = 0, status(sign, exp) is reserved
    1184/     434 :                     	
    1185/     434 : 2A 40               	FIM P5, REG_M		; for mult loop (copy of X)
    1186/     436 : 2C 00               	FIM P6, REG_X		; for ADD (total)
    1187/     438 : 2E 10               	FIM P7, REG_Y		; for ADD
    1188/     43A : 20 10               	FIM P0, REG_Y		; for SHIFT (working reg. P1)
    1189/     43C :                     
    1190/     43C : F0                  	CLB
    1191/     43D : B8                  	XCH R8
    1192/     43E :                     MUL_LOOP:			; for i(R8)=0 to 15
    1193/     43E : A8                  	LD R8
    1194/     43F : F4                  	CMA
    1195/     440 : BB                  	XCH R11			; R11 = 15, 14, ..., 0
    1196/     441 : 2B                  	SRC P5
    1197/     442 : E9                  	RDM
    1198/     443 : 14 4C               	JCN Z, MUL_LOOP_NEXT	; next if (REG_Y)[15-i] == 0
    1199/     445 : F4                  	CMA
    1200/     446 : F2                  	IAC
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 21 - 2023/02/17 11:38:13


    1201/     447 : B9                  	XCH R9			; R9 = 16-(REG_Y)[15-i]
    1202/     448 :                     MUL_ADD_LOOP:			; add FRA_M to FRA_X '(REG_Y)[15-i] times'
    1203/     448 : 53 8A               	JMS ADD_FRACTION_P6_P7
    1204/     44A : 79 48               	ISZ R9, MUL_ADD_LOOP
    1205/     44C :                     MUL_LOOP_NEXT:
    1206/     44C : D1                  	LDM 1
    1207/     44D : 20 10               	FIM P0, REG_Y
    1208/     44F : 54 73               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift FRA_Y 1 digit right
    1209/     451 : 78 3E               	ISZ R8, MUL_LOOP
    1210/     453 :                     
    1211/     453 : C0                  	BBL 0
    1212/     454 :                     	
    1213/     454 :                     ;;;---------------------------------------------------------------------------
    1214/     454 :                     ;;; CMDC_SQUAREROOT:
    1215/     454 :                     ;;;---------------------------------------------------------------------------
    1216/     454 :                     CMDC_SQUAREROOT:
    1217/     454 :                     	;;  to be implemented
    1218/     454 : 20 00               	FIM P0, REG_X
    1219/     456 : 54 CA               	JMS CLEAR_REGISTER_P0
    1220/     458 : DE                  	LDM 14
    1221/     459 : B1                  	XCH R1
    1222/     45A : 21                  	SRC P0
    1223/     45B : D5                  	LDM 5
    1224/     45C : E0                  	WRM
    1225/     45D : C0                  	BBL 0
    1226/     45E :                     
    1227/     45E :                     ;;;---------------------------------------------------------------------------
    1228/     45E :                     ;;; CMDC_PRINT
    1229/     45E :                     ;;; Print X and Y
    1230/     45E :                     ;;;---------------------------------------------------------------------------
    1231/     45E :                     CMDC_PRINT:
    1232/     45E : 20 00               	FIM P0, REG_X
    1233/     460 : 55 8D               	JMS PRINT_REGISTER_WITH_NAME_P0
    1234/     462 : 20 10               	FIM P0, REG_Y
    1235/     464 : 55 8D               	JMS PRINT_REGISTER_WITH_NAME_P0
    1236/     466 : 20 20               	FIM P0, REG_Z
    1237/     468 : 55 8D               	JMS PRINT_REGISTER_WITH_NAME_P0
    1238/     46A : 20 30               	FIM P0, REG_T
    1239/     46C : 55 8D               	JMS PRINT_REGISTER_WITH_NAME_P0
    1240/     46E : C0                  	BBL 0
    1241/     46F :                     
    1242/     46F :                     ;;;---------------------------------------------------------------------------
    1243/     46F :                     ;;; CMDC_SUB
    1244/     46F :                     ;;; X = Y - X
    1245/     46F :                     ;;;---------------------------------------------------------------------------
    1246/     46F :                     CMDC_SUB:
    1247/     46F : 54 F8               	JMS CHANGE_SIGN_REG_X
    1248/     471 : 43 3C               	JUN CMDC_ADD
    1249/     473 :                     	
    1250/     473 :                     ;;;---------------------------------------------------------------------------
    1251/     473 :                     ;;; SHIFT_FRACTION_RIGHT_P0_ACC
    1252/     473 :                     ;;; shift fraction of the register to right with filling 0
    1253/     473 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1254/     473 :                     ;;; 	   ACC=shift count
    1255/     473 :                     ;;; working: P0(R0, R1), P1(R2, R3)
    1256/     473 :                     ;;; destroy P1(R2, R3), R1 becomes 0 but R0 is not affected
    1257/     473 :                     ;;;---------------------------------------------------------------------------
    1258/     473 :                     SHIFT_FRACTION_RIGHT_P0_ACC:
    1259/     473 : 14 88               	JCN Z, SHIFTR_EXIT	; exit if ACC==0
    1260/     475 : B3                  	XCH R3			; R3 = ACC = shift
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 22 - 2023/02/17 11:38:13


    1261/     476 : A0                  	LD R0
    1262/     477 : B2                  	XCH R2			; R2 = R0
    1263/     478 :                     
    1264/     478 : F0                  	CLB			; clear ACC and CY
    1265/     479 : B1                  	XCH R1			; R1=0
    1266/     47A :                     SHIFTR_LOOP:			; for(i=0 to 15) P0(REG(i))=P1(REG(i+shift))
    1267/     47A : D0                  	LDM 0
    1268/     47B : 12 7F               	JCN C, SHIFTR_WRITE
    1269/     47D :                     SHIFTR_READ:	
    1270/     47D : 23                  	SRC P1
    1271/     47E : E9                  	RDM
    1272/     47F :                     SHIFTR_WRITE:
    1273/     47F : 21                  	SRC P0
    1274/     480 : E0                  	WRM
    1275/     481 : 63                  	INC R3
    1276/     482 : A3                  	LD R3
    1277/     483 : 1C 86               	JCN ZN, SHIFTR_NEXT      ; check if shift completed
    1278/     485 : FA                  	STC			; set flag to fill remaining bits with 0 
    1279/     486 :                     SHIFTR_NEXT:
    1280/     486 : 71 7A               	ISZ R1, SHIFTR_LOOP
    1281/     488 :                     SHIFTR_EXIT:
    1282/     488 : C0                  	BBL 0
    1283/     489 :                     
    1284/     489 :                     ;;;---------------------------------------------------------------------------
    1285/     489 :                     ;;; SHIFT_FRACTION_LEFT_P0_ACC
    1286/     489 :                     ;;; shift fraction of the register to left with filling 0
    1287/     489 :                     ;;; input: P0(=D3D2D1D0.xxxx (D3D2=#CHIP, D1D0=#REG)
    1288/     489 :                     ;;; 	   ACC=shift count
    1289/     489 :                     ;;; working: P0(R0, R1), P1(R2, R3), P2(R4, R5), R15
    1290/     489 :                     ;;; destroy P1(R2, R3), P2, R15, R1 becomes 0 but R0 is not affected
    1291/     489 :                     ;;;---------------------------------------------------------------------------
    1292/     489 :                     SHIFT_FRACTION_LEFT_P0_ACC:
    1293/     489 : 14 A7               	JCN Z, SHIFTL_EXIT	; exit if ACC==0
    1294/     48B : B5                  	XCH R5			; R5 = ACC = shift
    1295/     48C : A0                  	LD R0
    1296/     48D : B2                  	XCH R2			; R2 = R0
    1297/     48E :                     
    1298/     48E : F0                  	CLB			; clear ACC and CY
    1299/     48F : B4                  	XCH R4			; R4=0 (R4=i, R5=i+shift)
    1300/     490 :                     SHIFTL_LOOP:			; for(i=0 to 15) P0(REG(~i))=P1(REG(~(i+shift))
    1301/     490 : D0                  	LDM 0
    1302/     491 : BF                  	XCH R15
    1303/     492 : 12 9A               	JCN C, SHIFTL_WRITE
    1304/     494 :                     SHIFTL_READ:	
    1305/     494 : A5                  	LD R5
    1306/     495 : F4                  	CMA
    1307/     496 : B3                  	XCH R3			; R3 = ~R5 =~(i+shift)
    1308/     497 : 23                  	SRC P1
    1309/     498 : E9                  	RDM
    1310/     499 : BF                  	XCH R15
    1311/     49A :                     SHIFTL_WRITE:
    1312/     49A : A4                  	LD R4
    1313/     49B : F4                  	CMA
    1314/     49C : B1                  	XCH R1			; R1 = ~R4 =~i
    1315/     49D : 21                  	SRC P0
    1316/     49E : BF                  	XCH R15
    1317/     49F : E0                  	WRM
    1318/     4A0 : 65                  	INC R5
    1319/     4A1 : A5                  	LD R5
    1320/     4A2 : 1C A5               	JCN ZN, SHIFTL_NEXT	; check if shift completed
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 23 - 2023/02/17 11:38:13


    1321/     4A4 : FA                  	STC			; set flag to fill remaining bits with 0 
    1322/     4A5 :                     SHIFTL_NEXT:
    1323/     4A5 : 74 90               	ISZ R4, SHIFTL_LOOP
    1324/     4A7 :                     SHIFTL_EXIT:
    1325/     4A7 : C0                  	BBL 0
    1326/     4A8 :                     	
    1327/     4A8 :                     ;;;---------------------------------------------------------------------------
    1328/     4A8 :                     ;;; ALIGN_REGISTER_XY
    1329/     4A8 :                     ;;; align digit point to larger register
    1330/     4A8 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1331/     4A8 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)
    1332/     4A8 :                     ;;; working: R10, R11
    1333/     4A8 :                     ;;;---------------------------------------------------------------------------
    1334/     4A8 :                     ALIGN_REGISTER_XY:
    1335/     4A8 : 2C 00               	FIM P6, REG_X
    1336/     4AA : 2E 10               	FIM P7, REG_Y
    1337/     4AC : 2D                  	SRC P6
    1338/     4AD : EC                  	RD0
    1339/     4AE : BA                  	XCH R10			; R10 = expoenent of REG_P6
    1340/     4AF : 2F                  	SRC P7
    1341/     4B0 : EC                  	RD0 
    1342/     4B1 : BB                  	XCH R11			; R11 = expoenent of REG_P7
    1343/     4B2 :                     
    1344/     4B2 : AB                  	LD R11
    1345/     4B3 : F1                  	CLC
    1346/     4B4 : 9A                  	SUB R10
    1347/     4B5 : 12 C2               	JCN C, EY_GE_EX		; R11 >= R10
    1348/     4B7 :                     	;; R11 < R10
    1349/     4B7 : F4                  	CMA
    1350/     4B8 : F2                  	IAC
    1351/     4B9 : 20 10               	FIM P0, REG_Y
    1352/     4BB : 54 73               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1353/     4BD : AA                  	LD R10
    1354/     4BE : 2F                  	SRC P7
    1355/     4BF : E4                  	WR0
    1356/     4C0 : 44 C9               	JUN ALIGN_EXIT
    1357/     4C2 :                     EY_GE_EX:
    1358/     4C2 : 20 00               	FIM P0, REG_X
    1359/     4C4 : 54 73               	JMS SHIFT_FRACTION_RIGHT_P0_ACC
    1360/     4C6 : AB                  	LD R11
    1361/     4C7 : 2D                  	SRC P6
    1362/     4C8 : E4                  	WR0
    1363/     4C9 :                     ALIGN_EXIT:
    1364/     4C9 : C0                  	BBL 0
    1365/     4CA :                     	
    1366/     4CA :                     ;;;---------------------------------------------------------------------------
    1367/     4CA :                     ;;; CLEAR_REGISTER_P0
    1368/     4CA :                     ;;; Clear register
    1369/     4CA :                     ;;; input: P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1370/     4CA :                     ;;; output: ACC=0, R1=0, (R0 is not affected)
    1371/     4CA :                     ;;;---------------------------------------------------------------------------
    1372/     4CA :                     CLEAR_REGISTER_P0:
    1373/     4CA : F0                  	CLB
    1374/     4CB : 21                  	SRC P0
    1375/     4CC : E4                  	WR0
    1376/     4CD : E5                  	WR1
    1377/     4CE : E6                  	WR2
    1378/     4CF : E7                  	WR3
    1379/     4D0 :                     ;;;---------------------------------------------------------------------------
    1380/     4D0 :                     ;;; CLEAR_FRACTION_P0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 24 - 2023/02/17 11:38:13


    1381/     4D0 :                     ;;;---------------------------------------------------------------------------
    1382/     4D0 :                     CLEAR_FRACTION_P0:
    1383/     4D0 : F0                  	CLB
    1384/     4D1 :                     CLEAR_REGISTER_L0:
    1385/     4D1 : 21                  	SRC P0
    1386/     4D2 : E0                  	WRM
    1387/     4D3 : 71 D1               	ISZ R1, CLEAR_REGISTER_L0
    1388/     4D5 : C0                  	BBL 0
    1389/     4D6 :                     
    1390/     4D6 :                     ;;;---------------------------------------------------------------------------
    1391/     4D6 :                     ;;; LD_REGISTER_P6_P7
    1392/     4D6 :                     ;;; load register REG(P7) to REG(P6) (REG_P6 <= REG_P7)
    1393/     4D6 :                     ;;; input: P6(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG)) 
    1394/     4D6 :                     ;;;        P7(=D3D2D1D0.0000 (D3D2=#CHIP, D1D0=#REG))
    1395/     4D6 :                     ;;; output: ACC=0, R13=0, R15=0
    1396/     4D6 :                     ;;; destroy R13, R15 (R12 and R14 are not affected)
    1397/     4D6 :                     ;;;---------------------------------------------------------------------------
    1398/     4D6 :                     LD_REGISTER_P6_P7:
    1399/     4D6 :                     	;; copy status characters
    1400/     4D6 : 2F                  	SRC P7
    1401/     4D7 : EC                  	RD0
    1402/     4D8 : 2D                  	SRC P6
    1403/     4D9 : E4                  	WR0
    1404/     4DA :                     
    1405/     4DA : 2F                  	SRC P7
    1406/     4DB : ED                  	RD1
    1407/     4DC : 2D                  	SRC P6
    1408/     4DD : E5                  	WR1
    1409/     4DE :                     
    1410/     4DE : 2F                  	SRC P7
    1411/     4DF : EE                  	RD2
    1412/     4E0 : 2D                  	SRC P6
    1413/     4E1 : E6                  	WR2
    1414/     4E2 :                     
    1415/     4E2 : 2F                  	SRC P7
    1416/     4E3 : EF                  	RD3
    1417/     4E4 : 2D                  	SRC P6
    1418/     4E5 : E7                  	WR3
    1419/     4E6 :                     ;;;---------------------------------------------------------------------------
    1420/     4E6 :                     ;;; LD_FRACTION_P6_P7
    1421/     4E6 :                     ;;;---------------------------------------------------------------------------
    1422/     4E6 :                     LD_FRACTION_P6_P7
    1423/     4E6 :                     	; CLB
    1424/     4E6 :                     	; XCH R13			; clear R13
    1425/     4E6 :                     	; CLB
    1426/     4E6 :                     	; XCH R15			; clear R15
    1427/     4E6 :                     LD_FRACTION_L0:
    1428/     4E6 : 2F                  	SRC P7
    1429/     4E7 : E9                  	RDM			; read a digit from the source register
    1430/     4E8 : 2D                  	SRC P6
    1431/     4E9 : E0                  	WRM			; write the digit to memory
    1432/     4EA : 6D                  	INC R13
    1433/     4EB : 7F E6               	ISZ R15, LD_FRACTION_L0
    1434/     4ED :                     
    1435/     4ED : C0                  	BBL 0
    1436/     4EE :                     
    1437/     4EE :                     ;;;---------------------------------------------------------------------------
    1438/     4EE :                     ;;; ISZERO_REGISTER_P0
    1439/     4EE :                     ;;; check if REG(P0) == 0 or not
    1440/     4EE :                     ;;; return: ACC = (REG==0) ? 1 : 0;
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 25 - 2023/02/17 11:38:13


    1441/     4EE :                     ;;; destroy: R1 (R0 is not affected)
    1442/     4EE :                     ;;;---------------------------------------------------------------------------
    1443/     4EE :                     ISZERO_REGISTER_P0:
    1444/     4EE : F0                  	CLB
    1445/     4EF : B1                  	XCH R1
    1446/     4F0 :                     ISZERO_LOOP:
    1447/     4F0 : 21                  	SRC P0
    1448/     4F1 : E9                  	RDM
    1449/     4F2 : 1C F7               	JCN ZN, ISZERO_EXIT0
    1450/     4F4 : 71 F0               	ISZ R1, ISZERO_LOOP
    1451/     4F6 :                     
    1452/     4F6 : C1                  	BBL 1
    1453/     4F7 :                     ISZERO_EXIT0:
    1454/     4F7 : C0                  	BBL 0
    1455/     4F8 :                     	
    1456/     4F8 :                     ;;;---------------------------------------------------------------------------
    1457/     4F8 :                     ;;; CHANGE_SIGN_REG_X
    1458/     4F8 :                     ;;; X = -X
    1459/     4F8 :                     ;;; destroy: P7
    1460/     4F8 :                     ;;;---------------------------------------------------------------------------
    1461/     4F8 :                     CHANGE_SIGN_REG_X:
    1462/     4F8 : 2E 00               	FIM P7, REG_X
    1463/     4FA : 2F                  	SRC P7
    1464/     4FB : ED                  	RD1
    1465/     4FC : F4                  	CMA
    1466/     4FD : E5                  	WR1
    1467/     4FE : C0                  	BBL 0
    1468/     4FF :                     
    1469/     4FF :                     ;;;---------------------------------------------------------------------------
    1470/     4FF :                     ;;; CMDC_DIV
    1471/     4FF :                     ;;; X = Y / X
    1472/     4FF :                     ;;;---------------------------------------------------------------------------
    1473/     4FF :                     CMDC_DIV:
    1474/     4FF : 20 00               	FIM P0, REG_X
    1475/     501 : 53 C5               	JMS NORMALIZE_REGISTER_P0
    1476/     503 : 54 EE               	JMS ISZERO_REGISTER_P0
    1477/     505 : 1C 43               	JCN ZN, CMDC_DIV_BY_ZERO
    1478/     507 :                     
    1479/     507 : 20 10               	FIM P0, REG_Y
    1480/     509 : 54 EE               	JMS ISZERO_REGISTER_P0
    1481/     50B : 1C 49               	JCN ZN, CMDC_DIVIDEND_ZERO
    1482/     50D :                     	
    1483/     50D : 2C 00               	FIM P6, REG_X
    1484/     50F : 2E 10               	FIM P7, REG_Y
    1485/     511 :                     
    1486/     511 : 55 82               	JMS GET_SIGN_PRODUCT_P6_P7
    1487/     513 : 2F                  	SRC P7
    1488/     514 : E5                  	WR1			; save sign to Y
    1489/     515 :                     	
    1490/     515 :                     	;; if devisor(REG_X) is less than 0.1,
    1491/     515 :                     	;; shift it left until it become equal or larger than 0.1
    1492/     515 :                     	;; and increment the exponent of devidend
    1493/     515 :                     	;; example
    1494/     515 :                     	;; X=0.0001 -> X=0.1000, exponent of Y += 3
    1495/     515 : 2D                  	SRC P6
    1496/     516 : EC                  	RD0			; check exponent of REG_X(devisor)
    1497/     517 : 1C 2C               	JCN ZN, DIV_FRAC_ADJ_EXP
    1498/     519 :                     DIV_LOOP_D14:
    1499/     519 :                     	;; increment exponent of Y
    1500/     519 : 2F                  	SRC P7			; Y
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 26 - 2023/02/17 11:38:13


    1501/     51A : EC                  	RD0
    1502/     51B : F2                  	IAC
    1503/     51C : E4                  	WR0			; EXP(Y)++
    1504/     51D : 1A 21               	JCN NC, DIV_LOOP_L0
    1505/     51F : D1                  	LDM REG_ERROR_OVERFLOW
    1506/     520 : E6                  	WR2			; set overflow flag, but continue calculation
    1507/     521 :                     DIV_LOOP_L0:
    1508/     521 : DE                  	LDM 14
    1509/     522 : BD                  	XCH R13
    1510/     523 : 2D                  	SRC P6			; X
    1511/     524 : E9                  	RDM			; ACC = D14 of X
    1512/     525 : 1C 3F               	JCN ZN, DIV_FRAC        ; exit loop and continue calculation
    1513/     527 : D1                  	LDM 1
    1514/     528 : 54 89               	JMS SHIFT_FRACTION_LEFT_P0_ACC
    1515/     52A : 45 19               	JUN DIV_LOOP_D14
    1516/     52C :                     
    1517/     52C :                     	; adjust exponent of Y
    1518/     52C :                     DIV_FRAC_ADJ_EXP:
    1519/     52C : 2D                  	SRC P6			; X
    1520/     52D : EC                  	RD0
    1521/     52E : F8                   	DAC
    1522/     52F : B0                  	XCH R0			; R0 = (exponent of X)-1
    1523/     530 : 2F                  	SRC P7
    1524/     531 : EC                  	RD0
    1525/     532 : F1                  	CLC
    1526/     533 : 90                  	SUB R0			; exp(Y) - exp(X)
    1527/     534 : E4                  	WR0
    1528/     535 : 12 3F               	JCN C, DIV_FRAC		; no borrow
    1529/     537 : F4                  	CMA
    1530/     538 : F2                  	IAC
    1531/     539 : 20 10               	FIM P0, REG_Y
    1532/     53B : 54 73               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; shift frac(Y) and set exp(Y)=0
    1533/     53D : F0                  	CLB
    1534/     53E : E4                  	WR0
    1535/     53F :                     DIV_FRAC:
    1536/     53F : 55 4E               	JMS DIV_FRACTION_XY
    1537/     541 :                     	;; 	JUN DIV_FRACTION_XY
    1538/     541 :                     	;; RETURN_DIV_FRACTION_XY:	
    1539/     541 :                     	; normalize REG_X and clear REG_Y
    1540/     541 : 43 79               	JUN CMDC_NORMALIZE_AND_EXIT
    1541/     543 :                     	
    1542/     543 :                     CMDC_DIV_BY_ZERO:
    1543/     543 : 20 00               	FIM P0, REG_X
    1544/     545 : 21                  	SRC P0
    1545/     546 : D2                  	LDM REG_ERROR_DIVBYZERO
    1546/     547 : E6                  	WR2			; set error flag
    1547/     548 : C0                  	BBL 0
    1548/     549 :                     CMDC_DIVIDEND_ZERO:
    1549/     549 : 20 00               	FIM P0, REG_X
    1550/     54B : 54 CA               	JMS CLEAR_REGISTER_P0
    1551/     54D : C0                  	BBL 0
    1552/     54E :                     	
    1553/     54E :                     ;;;---------------------------------------------------------------------------
    1554/     54E :                     ;;; DIV_FRACTION_XY
    1555/     54E :                     ;;; FRAC(X) = FRAC(Y) / FRAC(X)
    1556/     54E :                     ;;; working: P6, P7, P5, P0(for shift), P1 (for shift), P4(R8, R9)
    1557/     54E :                     ;;;---------------------------------------------------------------------------
    1558/     54E :                     ;;;  compare and subtract and count, and shift
    1559/     54E :                     ;;; 
    1560/     54E :                     ;;;  0EDCBA9876543210
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 27 - 2023/02/17 11:38:13


    1561/     54E :                     ;;;  0edcba9876543210 -> E
    1562/     54E :                     ;;;
    1563/     54E :                     ;;;  0EDCBA9876543210
    1564/     54E :                     ;;;   0edcba987654321 -> D
    1565/     54E :                     ;;; 
    1566/     54E :                     ;;;  0EDCBA9876543210
    1567/     54E :                     ;;;    0edcba98765432 -> C
    1568/     54E :                     ;;; ...
    1569/     54E :                     ;;;  0EDCBA9876543210 -> 0
    1570/     54E :                     ;;;                0e
    1571/     54E :                     ;;;
    1572/     54E :                     ;;; e!=0
    1573/     54E :                     ;;;---------------------------------------------------------------------------
    1574/     54E :                     	
    1575/     54E :                     DIV_FRACTION_XY:
    1576/     54E : 2C 10               	FIM P6, REG_Y
    1577/     550 : 2E 00               	FIM P7, REG_X
    1578/     552 : 2A 40               	FIM P5, REG_M
    1579/     554 :                     
    1580/     554 : 20 40               	FIM P0, REG_M
    1581/     556 : 54 D0               	JMS CLEAR_FRACTION_P0
    1582/     558 :                     
    1583/     558 : D1                  	LDM 1
    1584/     559 : B8                  	XCH R8			; for i(R8)= 1 to 15;
    1585/     55A :                     DIV_LOOP:	
    1586/     55A : F0                  	CLB
    1587/     55B : B9                  	XCH R9			; counter R9 = 0
    1588/     55C :                     DIV_SUB_COUNT:
    1589/     55C : 53 AB               	JMS CMP_FRACTION_P6_P7	   ; Compare Y with X
    1590/     55E : 1A 6A               	JCN CN, DIV_SUB_COUNT_EXIT ; jump if REG_Y < REG_X
    1591/     560 :                     
    1592/     560 :                     	;; check R9 is already 9
    1593/     560 :                     	;; it occurs when shifted divisor is truncated
    1594/     560 :                     	;; (ex. previous loop 100/109 -> this loop 100/10)
    1595/     560 : D9                  	LDM 9
    1596/     561 : F1                  	CLC
    1597/     562 : 99                  	SUB R9
    1598/     563 : 14 6A               	JCN Z, DIV_SUB_COUNT_EXIT
    1599/     565 :                     	
    1600/     565 : 53 99               	JMS SUB_FRACTION_P6_P7	   ; Y = Y - X
    1601/     567 : 69                  	INC R9
    1602/     568 : 45 5C               	JUN DIV_SUB_COUNT
    1603/     56A :                     DIV_SUB_COUNT_EXIT:	
    1604/     56A : A8                  	LD R8
    1605/     56B : F4                  	CMA
    1606/     56C : BB                  	XCH R11			; R11 = 14, 13, ..., 0
    1607/     56D : 2B                  	SRC P5			; REG_M
    1608/     56E : A9                  	LD R9
    1609/     56F : E0                  	WRM			; REG_M(R11) = R9
    1610/     570 : D1                  	LDM 1
    1611/     571 : 20 00               	FIM P0, REG_X
    1612/     573 : 54 73               	JMS SHIFT_FRACTION_RIGHT_P0_ACC ; X=X/10
    1613/     575 :                     
    1614/     575 : 78 5A               	ISZ R8, DIV_LOOP
    1615/     577 :                     
    1616/     577 : 2C 00               	FIM P6, REG_X
    1617/     579 : 2E 10               	FIM P7, REG_Y
    1618/     57B : 54 D6               	JMS LD_REGISTER_P6_P7	; copy exponent of Y to X
    1619/     57D : 2E 40               	FIM P7, REG_M
    1620/     57F : 54 E6               	JMS LD_FRACTION_P6_P7	; copy fraction of M to X
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 28 - 2023/02/17 11:38:13


    1621/     581 :                     				; X need to be normalized
    1622/     581 : C0                  	BBL 0
    1623/     582 :                     	;; 	JUN RETURN_DIV_FRACTION_XY
    1624/     582 :                     
    1625/     582 :                     ;;;---------------------------------------------------------------------------
    1626/     582 :                     ;;; GET_SIGN_PRODUCT_P6_P7
    1627/     582 :                     ;;; calculate sign of the result for multiplication and division
    1628/     582 :                     ;;; result: ACC=0 (+) if REG(P6) and REG(P7) have the same sign (++or--)
    1629/     582 :                     ;;;            =15(-) if REG(P6) and REG(P7) have the different signs (+-or-+)
    1630/     582 :                     ;;; destroy: R0
    1631/     582 :                     ;;;---------------------------------------------------------------------------
    1632/     582 :                     GET_SIGN_PRODUCT_P6_P7:	
    1633/     582 :                     	;;  calculate sign of the result for multiplication and division
    1634/     582 : 2D                  	SRC P6			; check sign of REG_X and REG_Y same or not
    1635/     583 : ED                  	RD1
    1636/     584 : B0                  	XCH R0			; R0 = sign of X
    1637/     585 : 2F                  	SRC P7
    1638/     586 : ED                  	RD1			; sign of Y
    1639/     587 : F1                  	CLC
    1640/     588 : 90                  	SUB R0
    1641/     589 : 14 8C                	JCN Z, GET_SIGN_EXIT
    1642/     58B : CF                  	BBL 15			; negative sign
    1643/     58C :                     GET_SIGN_EXIT:
    1644/     58C : C0                  	BBL 0
    1645/     58D :                     
    1646/     58D :                     ;;;---------------------------------------------------------------------------
    1647/     58D :                     ;;; PRINT_REGISTER_WITH_NAME_P0
    1648/     58D :                     ;;; Print the contents of the number register
    1649/     58D :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1650/     58D :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1651/     58D :                     ;;; output: ACC=0
    1652/     58D :                     ;;;---------------------------------------------------------------------------
    1653/     58D :                     PRINT_REGISTER_WITH_NAME_P0:
    1654/     58D : 22 58               	FIM P1, 'X'
    1655/     58F : 56 28               	JMS PUTCHAR_P1
    1656/     591 : A0                  	LD R0
    1657/     592 : 56 48               	JMS PRINT_ACC
    1658/     594 :                     ;;;---------------------------------------------------------------------------
    1659/     594 :                     ;;; PRINT_REGISTER_P0
    1660/     594 :                     ;;; Print the contents of the number register
    1661/     594 :                     ;;; input: P0(R0=D3D2D1D0 (D3D2=#CHIP, D1D0=#REG))
    1662/     594 :                     ;;; destroy P6, P7, P5(R10, R11), P1
    1663/     594 :                     ;;; output: ACC=0
    1664/     594 :                     ;;;---------------------------------------------------------------------------
    1665/     594 :                     	;;
    1666/     594 :                     PRINT_REGISTER_P0:
    1667/     594 : 22 3D               	FIM P1, '='
    1668/     596 : 21                  	SRC P0
    1669/     597 : EE                  	RD2
    1670/     598 : 14 9C               	JCN Z, PRINT_REGISTER_EQU_ERR
    1671/     59A : 22 45               	FIM P1, 'E'
    1672/     59C :                     PRINT_REGISTER_EQU_ERR
    1673/     59C : 56 28               	JMS PUTCHAR_P1
    1674/     59E :                     
    1675/     59E : 22 2B               	FIM P1, '+'
    1676/     5A0 : 21                  	SRC P0
    1677/     5A1 : ED                  	RD1
    1678/     5A2 : 14 A6               	JCN Z, PRINT_REGISTER_SGN
    1679/     5A4 : 22 2D               	FIM P1, '-'
    1680/     5A6 :                     PRINT_REGISTER_SGN:
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 29 - 2023/02/17 11:38:13


    1681/     5A6 : 56 28               	JMS PUTCHAR_P1
    1682/     5A8 :                     	
    1683/     5A8 : 21                  	SRC P0
    1684/     5A9 : EC                  	RD0			
    1685/     5AA : BA                  	XCH R10                 ; load R10=exponent
    1686/     5AB :                     
    1687/     5AB :                     	;; print first digit(D15) if it is not zero
    1688/     5AB :                     	;; (it should be '0' if the number is normalized) 
    1689/     5AB : DF                  	LDM 15
    1690/     5AC : B1                  	XCH R1
    1691/     5AD : 21                  	SRC P0
    1692/     5AE : E9                  	RDM
    1693/     5AF : 14 B3               	JCN Z, PRINT_CHECK_EXP
    1694/     5B1 : 56 48               	JMS PRINT_ACC
    1695/     5B3 :                     
    1696/     5B3 :                     PRINT_CHECK_EXP:		; print digit point if exponent is 0
    1697/     5B3 : AA                  	LD R10
    1698/     5B4 : 1C BA               	JCN ZN, PRINT_REGISTER_LOOP_SETUP
    1699/     5B6 : 22 2E               	FIM P1, '.'
    1700/     5B8 : 56 28               	JMS PUTCHAR_P1
    1701/     5BA :                     
    1702/     5BA :                     PRINT_REGISTER_LOOP_SETUP:
    1703/     5BA : F0                  	CLB
    1704/     5BB : D1                  	LDM 1
    1705/     5BC : BB                  	XCH R11			; R11 is loop counter start from 1
    1706/     5BD :                     PRINT_REGISTER_LOOP:
    1707/     5BD : DF                  	LDM 15
    1708/     5BE : F1                  	CLC
    1709/     5BF : 9B                  	SUB R11			; (R11 =  1, 2,...,15) 
    1710/     5C0 : 14 D2               	JCN Z, PRINT_EXIT	; skip last digit
    1711/     5C2 : B1                  	XCH R1			; ( R1 = 14,13,..., 1)
    1712/     5C3 : 21                  	SRC P0
    1713/     5C4 : E9                  	RDM
    1714/     5C5 : 56 48               	JMS PRINT_ACC
    1715/     5C7 :                     
    1716/     5C7 : F0                  	CLB			; print digit point
    1717/     5C8 : AA                  	LD R10
    1718/     5C9 : 9B                  	SUB R11
    1719/     5CA : 1C D0               	JCN ZN, PRINT_REGISTER_L1
    1720/     5CC : 22 2E               	FIM P1, '.'
    1721/     5CE : 56 28               	JMS PUTCHAR_P1
    1722/     5D0 :                     PRINT_REGISTER_L1:
    1723/     5D0 : 7B BD               	ISZ R11, PRINT_REGISTER_LOOP
    1724/     5D2 :                     PRINT_EXIT:	
    1725/     5D2 : 56 5C               	JMS PRINT_CR		; not use PRINT_CRLF
    1726/     5D4 : 56 60               	JMS PRINT_LF		; to avoid consuming the stack 
    1727/     5D6 : C0                  	BBL 0
    1728/     5D7 :                     
    1729/     5D7 :                     ;;;----------------------------------------------------------------------------
    1730/     5D7 :                     ;;; I/O routines located in Page 0600H
    1731/     5D7 :                     ;;;----------------------------------------------------------------------------
    1732/     600 :                     	org 0600H
    1733/     600 :                     ;;;---------------------------------------------------------------------------
    1734/     600 :                     ;;; Software UART Routine
    1735/     600 :                     ;;; GETCHAR_P1 and PUTCHAR_P1
    1736/     600 :                     ;;; defined in separated file
    1737/     600 :                     ;;;---------------------------------------------------------------------------
    1738/     600 :                     ;;; supported baudrates are 4800bps or 9600bps
    1739/     600 :                     ;; BAUDRATE equ 4800	; 4800 bps, 8 data bits, no parity, 1 stop bit
    1740/     600 : =2580H               BAUDRATE equ 9600   ; 9600 bps, 8 data bits, no parity, 1 stop bit
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 30 - 2023/02/17 11:38:13


    1741/     600 :                     
    1742/     600 : =2580H               	switch BAUDRATE
    1743/     600 : =>FALSE              	case 4800
    1744/     600 :                     	include "4800bps.inc"
    1745/     600 : =>TRUE               	case 9600
    1746/     600 :                     	include "9600bps.inc"
(1)    1/     600 :                     ;;;---------------------------------------------------------------------------
(1)    2/     600 :                     ;;; getchar and putchar functions
(1)    3/     600 :                     ;;; baud rate = 9600bps
(1)    4/     600 :                     ;;; 8bit, no parity, stop 1
(1)    5/     600 :                     ;;;---------------------------------------------------------------------------
(1)    6/     600 :                     
(1)    7/     600 :                     ;;;---------------------------------------------------------------------------
(1)    8/     600 :                     ;;; GETCHAR_P1
(1)    9/     600 :                     ;;; receive a character from serial port (TEST) and put into P1(R2, R3)
(1)   10/     600 :                     ;;;
(1)   11/     600 :                     ;;; Input: none
(1)   12/     600 :                     ;;; Output: P1(R2,R3), ACC=0(OK), ACC=1(error)
(1)   13/     600 :                     ;;; Working: P6, P7
(1)   14/     600 :                     ;;; This subroutine destroys P6, P7.
(1)   15/     600 :                     ;;; 
(1)   16/     600 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   17/     600 :                     ;;; 
(1)   18/     600 :                     ;;;          |--12--|-9--|-9-|-9--|-12--|-9--|-9-|-9--|-10--|
(1)   19/     600 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   20/     600 :                     ;;;          ^      ^    ^   ^    ^     ^    ^   ^    ^     ^
(1)   21/     600 :                     ;;;        start    0    1   2    3     4    5   6    7    stop
(1)   22/     600 :                     ;;;               |->phase delay
(1)   23/     600 :                     ;;; - In order to check data bits in the middle of the signal,
(1)   24/     600 :                     ;;;   a "phase delay" should be added between the start bit and data bits.
(1)   25/     600 :                     ;;;   (1 to 4 cycles may be moderate for 9.645cycle/bit)
(1)   26/     600 :                     ;;; - Detection of the start bit may cause delay of 2 cycles due to polling.
(1)   27/     600 :                     ;;;---------------------------------------------------------------------------
(1)   28/     600 :                     
(1)   29/     600 :                     GETCHAR_P1:
(1)   30/     600 : 2C 0C                       FIM R12R13, loop(4)     ; loop for first(lower) 4 bit
(1)   31/     602 :                                                     ; 
(1)   32/     602 : 19 02                       JCN TN, $               ;(2) wait for start bit (TEST="0")
(1)   33/     604 : 2E 0C               	FIM P7, loop(4)         ;(2)
(1)   34/     606 : 7F 06               	ISZ R15,$               ;(8) 12 cycles between startbit and bit0
(1)   35/     608 :                                                     ;    phase(bit0)= 12 -9.645 = 2.355cycle
(1)   36/     608 :                     GETCHAR_L1:
(1)   37/     608 : 19 0D               	JCN TN, GETCHAR_L2      ;(2) check a bit
(1)   38/     60A : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   39/     60B : 46 10                       JUN GETCHAR_L3          ;<2>
(1)   40/     60D :                     GETCHAR_L2:
(1)   41/     60D : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   42/     60E : 00                          NOP                     ;[1]
(1)   43/     60F : 00                          NOP                     ;[1]
(1)   44/     610 :                     GETCHAR_L3:
(1)   45/     610 : F6                  	RAR                     ;(1) load CY->ACC
(1)   46/     611 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   47/     612 : 7D 08                       ISZ R13, GETCHAR_L1     ;(2) repeat until 4 bit received
(1)   48/     614 :                                                     ;    phase(here)= 2.355 -0.645*3 = 0.42cycle
(1)   49/     614 : B3                  	XCH R3                  ;(1)
(1)   50/     615 : 2C 0C               	FIM R12R13, loop(4)     ;(2) loop for second(upper) 4 bit
(1)   51/     617 :                     		                ;    12 cycles between bit3 and bit4
(1)   52/     617 :                                                     ;    phase(bit4)= 2.42 +12 -9.645 = 2.775cycle
(1)   53/     617 :                     GETCHAR_L4:
(1)   54/     617 : 19 1C               	JCN TN, GETCHAR_L5      ;(2) check a bit
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 31 - 2023/02/17 11:38:13


(1)   55/     619 : F1                          CLC                     ;<1> TEST="0" then CY=0
(1)   56/     61A : 46 1F                       JUN GETCHAR_L6          ;<2>
(1)   57/     61C :                     GETCHAR_L5:
(1)   58/     61C : FA                  	STC                     ;[1] TEST="1" then CY=1
(1)   59/     61D : 00                          NOP                     ;[1]
(1)   60/     61E : 00                          NOP                     ;[1]
(1)   61/     61F :                     GETCHAR_L6:
(1)   62/     61F : F6                  	RAR                     ;(1) load CY->ACC
(1)   63/     620 : 00                  	NOP                     ;(1) 9cycle/bit (error=-0.645 cycle/bit)
(1)   64/     621 : 7D 17                       ISZ R13, GETCHAR_L4     ;(2) repeat until 4 bit received
(1)   65/     623 :                                                     ;    phase(here)= 4.755 -0.645*3 = 0.84 cycle
(1)   66/     623 : B2                  	XCH R2                  ;(1)
(1)   67/     624 :                                                     ;    10 cycles/between bit7 and stopbit
(1)   68/     624 :                                                     ;    phase(stop)= 2.84 +10 -9.645 = 1.195cycle
(1)   69/     624 :                     	;; check stop bit
(1)   70/     624 : 19 27                       JCN TN, GETCHAR_OK      ; stop bit == "1"
(1)   71/     626 : C1                          BBL 1                   ; stop bit != "1"
(1)   72/     627 :                     GETCHAR_OK:
(1)   73/     627 : C0                  	BBL 0
(1)   74/     628 :                                     
(1)   75/     628 :                     ;;;---------------------------------------------------------------------------
(1)   76/     628 :                     ;;; PUTCHAR_P1
(1)   77/     628 :                     ;;; send the character in P1(R2, R3) to OUTPORT
(1)   78/     628 :                     ;;; 
(1)   79/     628 :                     ;;; Input: P1(R2,R3)
(1)   80/     628 :                     ;;; Output: ACC=0
(1)   81/     628 :                     ;;; Working: P6(R12R13), P7
(1)   82/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   83/     628 :                     ;;; P1 is not affected
(1)   84/     628 :                     ;;; 
(1)   85/     628 :                     ;;; baud rate: 9600bps (104.17us/bit, 9.645cycle/bit)
(1)   86/     628 :                     ;;; 
(1)   87/     628 :                     ;;; Input: P1(R2,R3)
(1)   88/     628 :                     ;;; Output: ACC=0
(1)   89/     628 :                     ;;; Working: P6(R12R13), P7
(1)   90/     628 :                     ;;; This subroutine destroys P6, P7.
(1)   91/     628 :                     ;;;---------------------------------------------------------------------------
(1)   92/     628 :                     ;;; 
(1)   93/     628 :                     ;;;         |--9-|-9--|-9-|-9--|-10--|-10-|-10-|-10-|-10--|(ave.9.56cycle/bit)
(1)   94/     628 :                     ;;; ~~~~~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~|____|~~~~~ 9.645cycle/bit
(1)   95/     628 :                     ;;;         ^    ^    ^   ^    ^     ^    ^    ^    ^     ^
(1)   96/     628 :                     ;;;       start  0    1   2    3     4    5    6    7     stop
(1)   97/     628 :                     ;;;---------------------------------------------------------------------------
(1)   98/     628 :                     
(1)   99/     628 :                     PUTCHAR_P1:
(1)  100/     628 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  101/     628 :                     	LDM BANK_SERIAL     ; bank of output port
(1)  102/     628 :                             DCL                 ; set port bank
(1)  103/     628 : [100]                	endif
(1)  104/     628 :                     
(1)  105/     628 : 2E 00                       FIM P7, CHIP_SERIAL ; chip# of output port
(1)  106/     62A : 2F                  	SRC P7              ; set port address
(1)  107/     62B :                     
(1)  108/     62B : 2C 0B                       FIM R12R13, loop(5) ; start bit and lower 4bit(R3)
(1)  109/     62D : A3                          LD R3
(1)  110/     62E : F1                          CLC                 ; start bit is 0
(1)  111/     62F : F5                          RAL
(1)  112/     630 :                                     
(1)  113/     630 :                     PUTCHAR_L1:
(1)  114/     630 : 00                  	NOP                 ;(1) 9cycle/bit
 AS V1.42 Beta [Bld 236] - Source File calc.asm(9600bps.inc) - Page 32 - 2023/02/17 11:38:13


(1)  115/     631 : 00                          NOP                 ;(1)
(1)  116/     632 : 00                          NOP                 ;(1)
(1)  117/     633 : 00                          NOP                 ;(1)
(1)  118/     634 : 00                          NOP                 ;(1)
(1)  119/     635 : E1                          WMP                 ;(1)
(1)  120/     636 : F6                          RAR                 ;(1)
(1)  121/     637 : 7D 30                       ISZ R13, PUTCHAR_L1 ;(2)
(1)  122/     639 :                     	
(1)  123/     639 : 2C 0B                       FIM R12R13, loop(5) ;(2) upper 4bit(R2) and stop bit
(1)  124/     63B : A2                          LD R2               ;(1)
(1)  125/     63C : FA                          STC                 ;(1) stop bit is 1
(1)  126/     63D : 00                  	NOP                 ;(1) timing adjustment
(1)  127/     63E : 00                          NOP                 ;(1) 10cycle between bit3 and bit4
(1)  128/     63F :                     PUTCHAR_L2:
(1)  129/     63F : E1                  	WMP                 ;(1) 10cycle/bit
(1)  130/     640 : 2E 0E                       FIM R14R15, loop(2) ;(2)
(1)  131/     642 : 7F 42                       ISZ R15, $          ;(4)
(1)  132/     644 : F6                          RAR                 ;(1)
(1)  133/     645 : 7D 3F                       ISZ R13, PUTCHAR_L2  ;(2)
(1)  134/     647 :                     	
(1)  135/     647 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
(1)  136/     647 :                     	LDM BANK_DEFAULT    
(1)  137/     647 :                             DCL                 ; restore bank to default
(1)  138/     647 : [135]                	endif
(1)  139/     647 : C0                          BBL 0
(1)  140/     648 :                     
(1)  141/     648 :                     
    1747/     648 : [1742]               	endcase
    1748/     648 :                     
    1749/     648 :                     ;;;---------------------------------------------------------------------------
    1750/     648 :                     ;;; PRINT_ACC
    1751/     648 :                     ;;; print contents of ACC('0'...'F') as a character
    1752/     648 :                     ;;; destroy: P1, P6, P7, ACC
    1753/     648 :                     ;;;---------------------------------------------------------------------------
    1754/     648 :                     
    1755/     648 :                     PRINT_ACC:
    1756/     648 : 22 30               	FIM R2R3, 30H		;'0'
    1757/     64A : F1                  	CLC			; clear carry
    1758/     64B : FB                  	DAA			; ACC=ACC+6 if ACC>9 and set carry
    1759/     64C : 1A 50               	JCN CN, PRINTACC_L1
    1760/     64E : 62                  	INC R2
    1761/     64F : F2                  	IAC
    1762/     650 :                     PRINTACC_L1:	
    1763/     650 : B3                  	XCH R3			; R3<-ACC
    1764/     651 : 46 28               	JUN PUTCHAR_P1		; not JMS but JUN (Jump to PUTCHAR and return)
    1765/     653 :                     
    1766/     653 :                     ;;;---------------------------------------------------------------------------
    1767/     653 :                     ;;; PRINT_CRLF
    1768/     653 :                     ;;; print "\r\n"
    1769/     653 :                     ;;; destroy: P1, ACC
    1770/     653 :                     ;;; this routine consumes 2 PC stack
    1771/     653 :                     ;;;---------------------------------------------------------------------------
    1772/     653 :                     PRINT_CRLF:
    1773/     653 : 22 0D               	FIM P1, '\r'
    1774/     655 : 56 28               	JMS PUTCHAR_P1
    1775/     657 : 22 0A               	FIM P1, '\n'
    1776/     659 : 56 28               	JMS PUTCHAR_P1
    1777/     65B : C0                  	BBL 0
    1778/     65C :                     
    1779/     65C :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 33 - 2023/02/17 11:38:13


    1780/     65C :                     ;;; PRINT_CR
    1781/     65C :                     ;;; print "\r"
    1782/     65C :                     ;;; destroy: P1, ACC
    1783/     65C :                     ;;; this routine consumes 1 PC stack
    1784/     65C :                     ;;;---------------------------------------------------------------------------
    1785/     65C :                     PRINT_CR:
    1786/     65C : 22 0D               	FIM P1, '\r'
    1787/     65E : 46 28               	JUN PUTCHAR_P1
    1788/     660 :                     
    1789/     660 :                     ;;;---------------------------------------------------------------------------
    1790/     660 :                     ;;; PRINT_LF
    1791/     660 :                     ;;; print "\n"
    1792/     660 :                     ;;; destroy: P1, ACC
    1793/     660 :                     ;;; this routine consumes 1 PC stack
    1794/     660 :                     ;;;---------------------------------------------------------------------------
    1795/     660 :                     PRINT_LF:
    1796/     660 : 22 0A               	FIM P1, '\n'
    1797/     662 : 46 28               	JUN PUTCHAR_P1
    1798/     664 :                     
    1799/     664 :                     ;;;---------------------------------------------------------------------------
    1800/     664 :                     ;;; INIT_SERIAL
    1801/     664 :                     ;;; Initialize serial port
    1802/     664 :                     ;;;---------------------------------------------------------------------------
    1803/     664 :                     
    1804/     664 :                     INIT_SERIAL:
    1805/     664 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    1806/     664 :                     	LDM BANK_SERIAL     ; bank of output port
    1807/     664 :                             DCL                 ; set port bank
    1808/     664 : [1805]               	endif
    1809/     664 :                     	
    1810/     664 : 2E 00                       FIM P7, CHIP_SERIAL ; chip# of output port
    1811/     666 : 2F                  	SRC P7              ; set port address
    1812/     667 : D1                  	LDM 1
    1813/     668 : E1                          WMP                 ; set serial port to 1 (TTL->H)
    1814/     669 :                     
    1815/     669 : =>FALSE              	if (BANK_SERIAL != BANK_DEFAULT)
    1816/     669 :                     	LDM BANK_DEFAULT    
    1817/     669 :                             DCL                 ; restore bank to default
    1818/     669 : [1815]               	endif
    1819/     669 :                     
    1820/     669 : C0                          BBL 0
    1821/     66A :                     
    1822/     66A :                     ;;;---------------------------------------------------------------------------
    1823/     66A :                     ;;; CTOI_P1_R5
    1824/     66A :                     ;;; convert character ('0'...'f') to value 0000 ... 1111
    1825/     66A :                     ;;; input: P1(R2R3)
    1826/     66A :                     ;;; output: R5
    1827/     66A :                     ;;;---------------------------------------------------------------------------
    1828/     66A :                     CTOI_P1_R5:
    1829/     66A : F0                  	CLB
    1830/     66B : D3                  	LDM 3
    1831/     66C : 92                  	SUB R2
    1832/     66D : 14 73               	JCN Z, CTOI_09		; check upper 4bit
    1833/     66F : F0                  	CLB
    1834/     670 : D9                  	LDM 9
    1835/     671 : 83                  	ADD R3
    1836/     672 : B3                  	XCH R3
    1837/     673 :                     CTOI_09:
    1838/     673 : A3                  	LD R3
    1839/     674 : B5                  	XCH R5
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 34 - 2023/02/17 11:38:13


    1840/     675 : C0                  	BBL 0
    1841/     676 :                     	
    1842/     676 :                     ;;;----------------------------------------------------------------------------
    1843/     676 :                     ;;; DISPLED_P1
    1844/     676 :                     ;;;   DISPLAY the contents of P1 on Port 2 and 3
    1845/     676 :                     ;;; Input: P1(R2R3)
    1846/     676 :                     ;;; Output:  ACC=0
    1847/     676 :                     ;;; Working: P7
    1848/     676 :                     ;;; Destroy: P7
    1849/     676 :                     ;;;----------------------------------------------------------------------------
    1850/     676 :                     
    1851/     676 :                     DISPLED_P1:
    1852/     676 : D1                  	LDM BANK_RAM2
    1853/     677 : FD                          DCL
    1854/     678 : 2E 00                       FIM P7, CHIP_RAM2
    1855/     67A : 2F                          SRC P7
    1856/     67B : A3                          LD R3
    1857/     67C : E1                          WMP
    1858/     67D :                     	
    1859/     67D : D1                          LDM BANK_RAM3
    1860/     67E : FD                          DCL
    1861/     67F : 2E 40                       FIM P7, CHIP_RAM3
    1862/     681 : 2F                          SRC P7
    1863/     682 : A2                          LD R2
    1864/     683 : E1                          WMP
    1865/     684 :                     
    1866/     684 : D0                          LDM BANK_DEFAULT	; restore BANK to default
    1867/     685 : FD                  	DCL
    1868/     686 :                     	
    1869/     686 : C0                          BBL 0
    1870/     687 :                     
    1871/     687 :                     ;;;----------------------------------------------------------------------------
    1872/     687 :                     ;;; DISPLED_ACC
    1873/     687 :                     ;;;   DISPLAY the contents of ACC on Port 1
    1874/     687 :                     ;;; Input: ACC
    1875/     687 :                     ;;; Output:  ACC=0
    1876/     687 :                     ;;; Working: P7
    1877/     687 :                     ;;; Destroy: P7
    1878/     687 :                     ;;;----------------------------------------------------------------------------
    1879/     687 :                     
    1880/     687 :                     DISPLED_ACC:
    1881/     687 : =>FALSE              	if (BANK_RAM1 != BANK_DEFAULT)
    1882/     687 :                             LDM BANK_RAM1
    1883/     687 :                             DCL
    1884/     687 : [1881]               	endif
    1885/     687 :                     	
    1886/     687 : 2E 40                       FIM P7, CHIP_RAM1
    1887/     689 : BE                          XCH R14         ; save ACC
    1888/     68A :                     
    1889/     68A : BE                          XCH R14         ; restore ACC
    1890/     68B : 2F                          SRC P7          
    1891/     68C : E1                          WMP
    1892/     68D :                     
    1893/     68D : =>FALSE              	if (BANK_RAM1 != BANK_DEFAULT)
    1894/     68D :                     	LDM BANK_DEFAULT	; restore BANK to default
    1895/     68D :                     	DCL
    1896/     68D : [1893]               	endif
    1897/     68D :                     	
    1898/     68D : C0                  	BBL 0
    1899/     68E :                                     
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 35 - 2023/02/17 11:38:13


    1900/     68E :                     ;;;----------------------------------------------------------------------------
    1901/     68E :                     ;;; BLINK_LED
    1902/     68E :                     ;;;   Blink LED N times (N=ACC, N=16 if ACC==0)
    1903/     68E :                     ;;; Input: ACC
    1904/     68E :                     ;;; Output: ACC=0
    1905/     68E :                     ;;; Working: R11
    1906/     68E :                     ;;; Destroy: R11, P6, P7
    1907/     68E :                     ;;;----------------------------------------------------------------------------
    1908/     68E :                     
    1909/     68E :                     BLINK_LED:
    1910/     68E : F4                  	CMA
    1911/     68F : F2                  	IAC
    1912/     690 : BB                  	XCH R11         ; set counter=16-ACC
    1913/     691 :                     BLINK_L0	
    1914/     691 : D0                          LDM BANK_RAM1
    1915/     692 : 2E 40                       FIM P7, CHIP_RAM1
    1916/     694 : 56 A5                       JMS BLINK_SUB
    1917/     696 :                     
    1918/     696 : D1                          LDM BANK_RAM2
    1919/     697 : 2E 00                       FIM P7, CHIP_RAM2
    1920/     699 : 56 A5                       JMS BLINK_SUB
    1921/     69B :                     
    1922/     69B : D1                          LDM BANK_RAM3
    1923/     69C : 2E 40                       FIM P7, CHIP_RAM3
    1924/     69E : 56 A5                       JMS BLINK_SUB
    1925/     6A0 :                     	
    1926/     6A0 : 7B 91                       ISZ R11, BLINK_L0
    1927/     6A2 :                     
    1928/     6A2 : D0                  	LDM BANK_DEFAULT
    1929/     6A3 : FD                  	DCL
    1930/     6A4 :                     
    1931/     6A4 : C0                  	BBL 0
    1932/     6A5 :                     
    1933/     6A5 :                     BLINK_SUB:	
    1934/     6A5 : FD                          DCL
    1935/     6A6 : 2F                          SRC P7
    1936/     6A7 : D8                          LDM 8
    1937/     6A8 : E1                          WMP             ; LED(MSB) on
    1938/     6A9 : D8                          LDM 8
    1939/     6AA : 56 AF                       JMS WAIT10MS    ; wait 80ms
    1940/     6AC : D0                          LDM 0
    1941/     6AD : E1                          WMP             ; LED off
    1942/     6AE : C0                          BBL 0
    1943/     6AF :                     
    1944/     6AF :                     ;;;----------------------------------------------------------------------------
    1945/     6AF :                     ;;; Wait Subroutines WAIT10MS and WAIT100MS
    1946/     6AF :                     ;;;
    1947/     6AF :                     ;;; Constants '45EF'(10ms) and '11FE'(100ms) are calculated
    1948/     6AF :                     ;;; by Jim's 4004 Delay Loop Calculator
    1949/     6AF :                     ;;; https://github.com/jim11662418/4004-delay-calculator
    1950/     6AF :                     ;;;
    1951/     6AF :                     ;;; 10.8003857uS/cycle (@5.185MHz clock)
    1952/     6AF :                     ;;;----------------------------------------------------------------------------
    1953/     6AF :                     ;;;----------------------------------------------------------------------------
    1954/     6AF :                     ;;; WAIT10MS
    1955/     6AF :                     ;;; Input: ACC
    1956/     6AF :                     ;;; Output: return with ACC=0
    1957/     6AF :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    1958/     6AF :                     ;;;   wait for 10 * N ms (N=ACC, N=16 if ACC==0)
    1959/     6AF :                     ;;;----------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 36 - 2023/02/17 11:38:13


    1960/     6AF :                                     
    1961/     6AF :                     WAIT10MS:
    1962/     6AF : 2C 45               	FIM R12R13, 045H  ; 9947us delay(921 cycles)
    1963/     6B1 : 2E EF                       FIM R14R15, 0EFH  ; 
    1964/     6B3 :                     W10_L1:
    1965/     6B3 : 7C B3                	ISZ R12, W10_L1
    1966/     6B5 : 7D B3                       ISZ R13, W10_L1
    1967/     6B7 : 7E B3                       ISZ R14, W10_L1
    1968/     6B9 : 7F B3                       ISZ R15, W10_L1
    1969/     6BB : F8                          DAC
    1970/     6BC : 1C AF                       JCN ZN, WAIT10MS  ; 9979us delay(924 cycles)/loop
    1971/     6BE :                     W10_EXIT:
    1972/     6BE : C0                  	BBL 0
    1973/     6BF :                     
    1974/     6BF :                     ;;;----------------------------------------------------------------------------
    1975/     6BF :                     ;;; WAIT100MS
    1976/     6BF :                     ;;; Input: ACC
    1977/     6BF :                     ;;; Output: return with ACC=0
    1978/     6BF :                     ;;; Destroy: P6, P7, (R12, R13, R14, R15)
    1979/     6BF :                     ;;;   wait for 100 * N ms (N=ACC, N=16 if ACC==0)
    1980/     6BF :                     ;;;----------------------------------------------------------------------------
    1981/     6BF :                                     
    1982/     6BF :                     WAIT100MS:
    1983/     6BF : 2C 11               	FIM R12R13, 011H  ; 99958us delay(9255 cycles)
    1984/     6C1 : 2E FE                       FIM R14R15, 0FEH  ; 
    1985/     6C3 :                     W100_L1:
    1986/     6C3 : 7C C3                       ISZ R12, W100_L1
    1987/     6C5 : 7D C3                       ISZ R13, W100_L1
    1988/     6C7 : 7E C3                       ISZ R14, W100_L1
    1989/     6C9 : 7F C3                       ISZ R15, W100_L1
    1990/     6CB : F8                          DAC
    1991/     6CC : 1C BF                       JCN ZN, WAIT100MS  ; 99990us delay(9258 cycles)/loop
    1992/     6CE :                     W100_EXIT:
    1993/     6CE : C0                  	BBL 0
    1994/     6CF :                                     
    1995/     6CF :                     ;;;----------------------------------------------------------------------------
    1996/     6CF :                     ;;; Print subroutine and string data located in Page 7 (0700H-07FFH)
    1997/     6CF :                     ;;; 
    1998/     6CF :                     ;;; The string data sould be located in the same page as the print routine.
    1999/     6CF :                     ;;;----------------------------------------------------------------------------
    2000/     700 :                             org 0700H
    2001/     700 :                     ;;;----------------------------------------------------------------------------
    2002/     700 :                     ;;; PRINT_P0
    2003/     700 :                     ;;; Input: P0 (top of the string is 0700H+P0)
    2004/     700 :                     ;;; Working: P1(R2, R3)
    2005/     700 :                     ;;; Destroy: P1, P6, P7 (by PUTCHAR_P1), 
    2006/     700 :                     ;;;----------------------------------------------------------------------------
    2007/     700 :                     
    2008/     700 :                     PRINT_P0:
    2009/     700 : 32                          FIN P1			; P1=(P0)
    2010/     701 : A2                          LD R2
    2011/     702 : 14 0B                       JCN Z, P7_UPPER0	; R2==0
    2012/     704 :                     P7_PUT:
    2013/     704 : 56 28                       JMS PUTCHAR_P1             ; putchar(P1)
    2014/     706 : 71 00                       ISZ R1, PRINT_P0           ; P0=P0+1
    2015/     708 : 60                          INC R0
    2016/     709 : 47 00                       JUN PRINT_P0               ; print remaining string
    2017/     70B :                     P7_UPPER0:
    2018/     70B : A3                  	LD R3
    2019/     70C : 1C 04                       JCN ZN, P7_PUT     	; R3 != 0
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 37 - 2023/02/17 11:38:13


    2020/     70E :                     P7_EXIT:
    2021/     70E : C0                          BBL 0                   ; exit if P1(R2,R3) == 0
    2022/     70F :                                     
    2023/     70F :                     ;;;----------------------------------------------------------------------------
    2024/     70F :                     ;;; String data
    2025/     70F :                     ;;;----------------------------------------------------------------------------
    2026/     70F :                     
    2027/     70F :                     STR_OMSG:
    2028/     70F : 0D 49 6E 74 65 6C   	data "\rIntel MCS-4 (4004)\n\rTiny Monitor\n\r", 0
              715 : 20 4D 43 53 2D 34 
              71B : 20 28 34 30 30 34 
              721 : 29 0A 0D 54 69 6E 
              727 : 79 20 4D 6F 6E 69 
              72D : 74 6F 72 0A 0D 00 
    2029/     733 :                     STR_VFD_INIT:		;reset VFD and set scroll mode
    2030/     733 : 1B 40 1F 02 00      	data 1bH, 40H, 1fH, 02H, 0
    2031/     738 :                     STR_BANK:
    2032/     738 : 20 42 41 4E 4B 3D   	data " BANK=", 0
              73E : 00                
    2033/     73F :                     STR_CHIP:
    2034/     73F : 20 43 48 49 50 3D   	data " CHIP=", 0
              745 : 00                
    2035/     746 :                     STR_ADD:
    2036/     746 : 20 41 44 44 28 46   	data " ADD(Fx0)=", 0
              74C : 78 30 29 3D 00    
    2037/     751 :                     STR_CALC:
    2038/     751 : 0A 0D 43 61 6C 63   	data "\n\rCalculator Mode\n\r", 0
              757 : 75 6C 61 74 6F 72 
              75D : 20 4D 6F 64 65 0A 
              763 : 0D 00             
    2039/     765 :                     STR_CMDERR:
    2040/     765 : 0A 0D 64 3A 64 75   	data "\n\rd:dump RAM, w:write RAM, W:Write PM, D:Dump PM\n\rC:Clear, c:Calc mode\n\r", 0 ;
              76B : 6D 70 20 52 41 4D 
              771 : 2C 20 77 3A 77 72 
              777 : 69 74 65 20 52 41 
              77D : 4D 2C 20 57 3A 57 
              783 : 72 69 74 65 20 50 
              789 : 4D 2C 20 44 3A 44 
              78F : 75 6D 70 20 50 4D 
              795 : 0A 0D 43 3A 43 6C 
              79B : 65 61 72 2C 20 63 
              7A1 : 3A 43 61 6C 63 20 
              7A7 : 6D 6F 64 65 0A 0D 
              7AD : 00                
    2041/     7AE :                     STR_CALCERR:
    2042/     7AE : 2A 2A 45 52 52 4F   	data "**ERROR**\n",0
              7B4 : 52 2A 2A 0A 00    
    2043/     7B9 :                     
    2044/     7B9 :                     ;;;----------------------------------------------------------------------------
    2045/     7B9 :                     ;;; String data
    2046/     7B9 :                     ;;;----------------------------------------------------------------------------
    2047/     7B9 :                     	
    2048/     7B9 :                     ;;;---------------------------------------------------------------------------
    2049/     7B9 :                     ;;; Subroutine for reading program memory located on page 15 (0F00H-0FFFH)
    2050/     7B9 :                     ;;;---------------------------------------------------------------------------
    2051/     7B9 :                     ;;; READPM_P0
    2052/     7B9 :                     ;;; P1 = (P0)
    2053/     7B9 :                     ;;; input: P0
    2054/     7B9 :                     ;;; output: P1
    2055/     7B9 :                     ;;;---------------------------------------------------------------------------
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 38 - 2023/02/17 11:38:13


    2056/     7B9 :                     ;;; 	org 0FF0H
    2057/     7B9 :                     ;;; PM_READ_P0_P2:
    2058/     7B9 : 34                  	FIN P2
    2059/     7BA : C0                  	BBL 0
    2060/     7BB :                     
    2061/     7BB :                     	end
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 39 - 2023/02/17 11:38:13


  Symbol Table (* = unused):
  --------------------------

 ADD_FRACTION_P6_P7 :           38A C | *ADD_FRA_EXIT :                 398 C |
 ADD_FRA_LOOP :                 38F C |  ALIGN_EXIT :                   4C9 C |
 ALIGN_REGISTER_XY :            4A8 C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
 BANK_DEFAULT :                   0 - |  BANK_RAM0 :                      0 - |
 BANK_RAM1 :                      0 - |  BANK_RAM2 :                      1 - |
 BANK_RAM3 :                      1 - |  BANK_SERIAL :                    0 - |
 BAUDRATE :                    2580 - |  BLINK_L0 :                     691 C |
 BLINK_LED :                    68E C |  BLINK_SUB :                    6A5 C |
*CASESENSITIVE :                  0 - |  CHANGE_SIGN_REG_X :            4F8 C |
 CHIP_RAM0 :                      0 - |  CHIP_RAM1 :                     40 - |
 CHIP_RAM2 :                      0 - |  CHIP_RAM3 :                     40 - |
 CHIP_SERIAL :                    0 - |  CLEAR_FRACTION_P0 :            4D0 C |
 CLEAR_REGISTER_L0 :            4D1 C |  CLEAR_REGISTER_P0 :            4CA C |
 CMDCL_L1 :                     1D9 C |  CMDC_ADD :                     33C C |
 CMDC_ADD_EXIT :                371 C |  CMDC_ADD_SAMESIGN :            36B C |
 CMDC_ADD_ZERO_EXIT :           373 C |
 CMDC_AUTOMATIC_PUSH_AND_CLEAR :                                        2DC C |
 CMDC_CLEAR :                   2F5 C |
 CMDC_CLEAR_AUTOMATIC_ENTER_FLAG :                                      2D6 C |
 CMDC_DIGITPOINT :              2EB C |  CMDC_DIV :                     4FF C |
 CMDC_DIVIDEND_ZERO :           549 C |  CMDC_DIV_BY_ZERO :             543 C |
 CMDC_DP_EXIT :                 2F4 C |  CMDC_ENTER :                   307 C |
 CMDC_L1 :                      229 C |  CMDC_L10 :                     2B8 C |
 CMDC_L11 :                     2C0 C |  CMDC_L2 :                      233 C |
 CMDC_L3 :                      243 C |  CMDC_L4 :                      253 C |
 CMDC_L5 :                      263 C |  CMDC_L6 :                      273 C |
 CMDC_L7 :                      27F C |  CMDC_L8 :                      28D C |
 CMDC_L81 :                     299 C |  CMDC_L9 :                      2A7 C |
 CMDC_LOOP :                    211 C |  CMDC_MUL :                     400 C |
 CMDC_MUL_EXIT :                422 C |  CMDC_MUL_L0 :                  420 C |
 CMDC_MUL_ZERO :                424 C |  CMDC_NORMALIZE_AND_EXIT :      379 C |
 CMDC_NUM :                     31B C |  CMDC_NUM_EXIT :                339 C |
 CMDC_PRINT :                   45E C |  CMDC_PUSH_EXIT :               2EA C |
 CMDC_PUSH_L0 :                 2E2 C |  CMDC_SETNUM :                  32A C |
 CMDC_SET_AUTOMATIC_ENTER_FLAG :                                        2D0 C |
 CMDC_SQUAREROOT :              454 C |  CMDC_START :                   206 C |
 CMDC_SUB :                     46F C |  CMDDP_L0 :                     1B0 C |
 CMDDP_L1 :                     1BF C |  CMDD_L1 :                      102 C |
 CMDD_L2 :                      104 C |  CMDWP_L1 :                     18C C |
 CMDW_L1 :                      12C C |  CMDW_L2 :                      12E C |
 CMD_LOOP :                      10 C |  CMD_SUB_X_Y :                  363 C |
*CMD_SUB_Y_X :                  351 C |  CMP_EXIT01 :                    9E C |
 CMP_EXIT11 :                    9F C |  CMP_FRACTION_EXIT10 :          3C3 C |
 CMP_FRACTION_EXIT11 :          3C4 C |  CMP_FRACTION_LOOP :            3AD C |
 CMP_FRACTION_NEXT :            3C0 C |  CMP_FRACTION_P6_P7 :           3AB C |
 CMP_L1 :                        96 C |  CMP_P0P1 :                      8E C |
 COMMAND_C :                    200 C |  COMMAND_CL :                   1D3 C |
 COMMAND_D :                    100 C |  COMMAND_DP :                   1AA C |
 COMMAND_G :                    1E1 C |  COMMAND_W :                    12A C |
 COMMAND_WP :                   16D C | *COMPMODE :                       0 - |
*CONSTPI :        3.141592653589793 - |  CTOI_09 :                      673 C |
 CTOI_P1_R5 :                   66A C | *DATE :                "2023/02/17" - |
 DISPLED_ACC :                  687 C |  DISPLED_P1 :                   676 C |
 DIV_FRAC :                     53F C |  DIV_FRACTION_XY :              54E C |
 DIV_FRAC_ADJ_EXP :             52C C |  DIV_LOOP :                     55A C |
 DIV_LOOP_D14 :                 519 C |  DIV_LOOP_L0 :                  521 C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 40 - 2023/02/17 11:38:13


 DIV_SUB_COUNT :                55C C |  DIV_SUB_COUNT_EXIT :           56A C |
 EY_GE_EX :                     4C2 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - |  GETCHAR_L1 :                   608 C |
 GETCHAR_L2 :                   60D C |  GETCHAR_L3 :                   610 C |
 GETCHAR_L4 :                   617 C |  GETCHAR_L5 :                   61C C |
 GETCHAR_L6 :                   61F C |  GETCHAR_OK :                   627 C |
 GETCHAR_P1 :                   600 C |  GET_SIGN_EXIT :                58C C |
 GET_SIGN_PRODUCT_P6_P7 :       582 C | *HAS64 :                          1 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
 INIT_SERIAL :                  664 C | *INSUPMODE :                      0 - |
 ISNUM_FALSE :                  2CF C |  ISNUM_P1 :                     2C2 C |
 ISZERO_EXIT0 :                 4F7 C |  ISZERO_LOOP :                  4F0 C |
 ISZERO_REGISTER_P0 :           4EE C |  L0 :                            2E C |
 L1 :                            38 C |  L2 :                            42 C |
 L3 :                            4A C |  L4 :                            52 C |
 L5 :                            5A C |  L6 :                            62 C |
 L9 :                            6A C |  LD_FRACTION_L0 :               4E6 C |
 LD_FRACTION_P6_P7 :            4E6 C |  LD_REGISTER_P6_P7 :            4D6 C |
*LISTON :                         1 - |  L_CR :                          14 C |
*MACEXP :                         7 - | *MAIN :                           0 C |
*MOMCPU :                      4004 - | *MOMCPUNAME :                "4004" - |
 MUL_ADD_LOOP :                 448 C |  MUL_FRACTION_XY :              42A C |
 MUL_LOOP :                     43E C |  MUL_LOOP_NEXT :                44C C |
*NESTMAX :                      100 - |  NM_EXIT :                      3EC C |
 NM_GO_SHIFT :                  3D7 C |  NM_LOOP :                      3CD C |
 NM_LOOP_ENTRY :                3D5 C |  NM_NOERROR :                   3EB C |
 NORMALIZE_REGISTER_P0 :        3C5 C | *P7_EXIT :                      70E C |
 P7_PUT :                       704 C |  P7_UPPER0 :                    70B C |
*PADDING :                        1 - |  PM_READ_P0_P2 :               0FFE - |
 PM_TOP :                      0F00 - |  PM_WRITE_P0_P1 :               0A0 C |
 PM_WRITE_READROUTINE :         0A6 C |  PRINTACC_L1 :                  650 C |
 PRINT_ACC :                    648 C |  PRINT_CHECK_EXP :              5B3 C |
 PRINT_CR :                     65C C |  PRINT_CRLF :                   653 C |
 PRINT_EXIT :                   5D2 C |  PRINT_LF :                     660 C |
 PRINT_P0 :                     700 C |  PRINT_REGISTER_EQU_ERR :       59C C |
 PRINT_REGISTER_L1 :            5D0 C |  PRINT_REGISTER_LOOP :          5BD C |
 PRINT_REGISTER_LOOP_SETUP :    5BA C |  PRINT_REGISTER_P0 :            594 C |
 PRINT_REGISTER_SGN :           5A6 C |  PRINT_REGISTER_WITH_NAME_P0 :  58D C |
 PUTCHAR_L1 :                   630 C |  PUTCHAR_L2 :                   63F C |
 PUTCHAR_P1 :                   628 C | *REG_A :                         50 - |
 REG_ERROR_DIVBYZERO :            2 - |  REG_ERROR_OVERFLOW :             1 - |
*REG_H :                         70 - |  REG_M :                         40 - |
 REG_T :                         30 - |  REG_X :                          0 - |
*REG_XI :                        60 - |  REG_Y :                         10 - |
 REG_Z :                         20 - | *RELAXED :                        0 - |
 SETBANKCHIP_P5 :                70 C |  SHIFTL_EXIT :                  4A7 C |
 SHIFTL_LOOP :                  490 C |  SHIFTL_NEXT :                  4A5 C |
*SHIFTL_READ :                  494 C |  SHIFTL_WRITE :                 49A C |
 SHIFTR_EXIT :                  488 C |  SHIFTR_LOOP :                  47A C |
 SHIFTR_NEXT :                  486 C | *SHIFTR_READ :                  47D C |
 SHIFTR_WRITE :                 47F C |  SHIFT_FRACTION_LEFT_P0_ACC :   489 C |
 SHIFT_FRACTION_RIGHT_P0_ACC :  473 C |  STR_ADD :                      746 C |
 STR_BANK :                     738 C |  STR_CALC :                     751 C |
*STR_CALCERR :                  7AE C |  STR_CHIP :                     73F C |
 STR_CMDERR :                   765 C |  STR_OMSG :                     70F C |
 STR_VFD_INIT :                 733 C |  SUB_FRACTION_P6_P7 :           399 C |
 SUB_FRA_LOOP :                 39F C | *TIME :                  "11:38:13" - |
*TRUE :                           1 - | *VERSION :                     142F - |
*W100_EXIT :                    6CE C |  W100_L1 :                      6C3 C |
*W10_EXIT :                     6BE C |  W10_L1 :                       6B3 C |
 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 41 - 2023/02/17 11:38:13


 WAIT100MS :                    6BF C |  WAIT10MS :                     6AF C |

    229 symbols
     33 unused symbols

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 42 - 2023/02/17 11:38:13


  Register Definitions (* = unused):
  ----------------------------------

 P0 --> R0P                           |  P1 --> R1P                          
 P2 --> R2P                           | *P3 --> R3P                          
*P4 --> R4P                           |  P5 --> R5P                          
 P6 --> R6P                           |  P7 --> R7P                          
*R10 --> R10                          | *R10R11 --> R5P                      
*R11 --> R11                          | *R12 --> R12                         
*R12R13 --> R6P                       | *R13 --> R13                         
*R14 --> R14                          | *R14R15 --> R7P                      
*R15 --> R15                         

     17 definitions

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 43 - 2023/02/17 11:38:13


  Defined Functions:
  ------------------

LOOPS                                 | LOOP                                 
LO                                    |

 AS V1.42 Beta [Bld 236] - Source File calc.asm - Page 44 - 2023/02/17 11:38:13


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.02 seconds assembly time

   2203 lines source file
      2 passes
      0 errors
      0 warnings
